Jag tror verkligen att om du knappar runt i det du utvecklar lokalt med tangentbordet Och se till att liksom du kan komma åt allting, du kan fylla i allting och du öppnas någon modal eller någonting så sitter fokus rätt och du hamnar inte plötsligt bakom modalen. När den stängs så är du kvar där du var. Du behöver inte navigera genom hela grålet igen och att liksom bara kunna slå igång en skärmläsare i 45 sekunder och bara liksom, men det känns som att det som att det mekar känns för mig, då mekar det förmodligen hyfsat sens för andra. Målet är inte att man ska täcka 100% av alla problem som kan uppstå, utan det är bara att få de lågtängande frukterna, helt enkelt. Kanske majoriteten av det som finns i någon läskig lång kravlista som är två kilometer lång. Då kanske majoriteten av det är redan löst. Hej och välkomna till Kådesnack. Jag heter Fredrik som vanligt och idag har jag med mig Johan. Hej Johan. Hej. Vem är du? Vad gör du? Jag är en utvecklare som jobbar på SBAB till vardags, där sitter jag sedan relativt nyligen i ett ny startat designsystemteam. Men jag har varit där i ett antal år nu. Jag tror att vi är inne på det sjundeåret. Så jag har gjort lite annat under min tid. Jag tror att det är mitt tredje tim. Eller jag vet att det är mitt tredje tim. Men ja, precis. Så det är lite det som vi sitter med och vi jobbar ganska mycket också med tillgänglighet. För det kommer ett nytt tillgänglighetskrav eller tillgänglighetsdirektiv just nu. Jag har ett designsystemteam nu, vad är det så? Ja, hur kom du till det? Har du varit på designspåret och kommit in på det teamet? Jag kommer från ett annat spännande håll. Jag har väl varit intresserad av designspåret lite grann, en gång i tiden för en femton år sedan så tror jag att jag trädde in utvecklingsvärlden ifrån att ha lekt lite grann med design. Jag tycker att i de allra flesta tillfällen tycker jag att den tekniska biten av det är det mest intressanta. Men lite bakgrund kring det är att vi, ja, vi har ju på jobbet och så är vi väl just nu så är vi cirka 20-25 stycken utvecklingsteam. Jag har fått lite siffror här, 135 stycken utvecklare och testare, där jag tror att det är ett par stycken. Ja, och det är, jag vet inte, men majoriteten är utvecklare då, och vi sitter och jobbar på lite olika sätt och det ändrar ju sig lite över tid också. Det är en tendens att bli lite utdaterade och man kanske kopierar en lösning som man gjorde det där och sen så klistrar man in det i en ny öppen och så gör man ändringarna där och så blir det ju inkonsekvent i släppt. Så det har väl egentligen fler så det började i 2018, hur många år sedan det nu är. Det börjar bli en typ på år sen. Precis, jag skulle säga tre. Ja, jag skulle också säga att det var 20-20 ändå samma år. Ja, men exakt, exakt. Nej, men så då började vi lite inofficellt helt enkelt. Ett gäng utvecklade som satt i lite olika utvecklingsteam. Vi lyckades få att vi kunde sitta typ en eftermiddag veckan eller sådant och ta det och programmera lite grann. Rent från allas eget intresse så att säga? Ja, man hade ju sett det här behovet. Sedan dess har vår design och UX-avdelning också växt ganska rejält, men på den tiden var det inte lika många. Vi hade under rätt nära dialog med dem och de såg om några det här problemet. Det kändes verkligen som att det finns ingen röd tråd någonstans. Vi får ringa er och allt vad man nu gör. Så vi började i den änden egentligen och bara försöka liksom såhär, vi vet inte nödvändigtvis vad som är rätt, vad som ser rätt ut, men det viktigaste är kanske att det ser likadant ut. Ja, vi gjorde ju ett litet bibliotek, egentligen, som vi distribuerade med en intern NPM registry. Och sen så visste vi då att det kan ju, om vi fokuserar mer på API-it och inte tänker så mycket på att skylta med några detaljer kring luckenfil, så kan vi ju ändå ganska flexibelt uppdatera det över tid när vi vet mer om vad som är rätt visuellt. Så det var så det började och det har jag egentligen hållit på så sedan dess fram till Q2 i 2024. Så första april där i krokarna så satte vi officiellt igång ett team. Men det här projektet har ju levt, eller projektet, jag vet inte vad man ska kalla det, Det har ju levt lite inofficiellt, så det har ju varit så här periodvis har man hunnit jobba lite mer på det. Och periodvis har man inte hunnit jobba någonting alls på det. Men det har ju ändå varit i användning hos ett antal team sedan 2018. Så då var det helt enkelt en PM-paket med Ui-komponenter då? Ja, exakt. och ganska begränsad dokumentation i en slutning till det då. Så sättet som det skiljer sig idag är ju att vi det är ju ett helhetsgrepp mer kring Designsystem omfattar ju mer än bara kod och design egentligen också. Man kan ju dra det till att det kan handla om copywriting, bildmanier och alla möjliga grejer. Och där har vi ju inte riktigt en röstning för ännu, men på sikt så hoppas vi att vi ska kunna centralisera det. Även om vi inte själva står för innehållet nödvändigtvis så ska man inte behöva liksom... Ja, men vart finns det här? Ja, just det. kan ha en samlingsplats där man hittar ja men både dokumentation och relevant information som utvecklar och designar men man kanske kan hitta till relaterade resurser också även om inte de är skrivna därom. Ja för det var en med liknande utmaningar, bygger en del användare upplevelser i fronten av applikationer. Det kommer precis, och ett helt gäng team som gör saker som är nere i allvar. Det skulle nog se ut att fungera ganska exakt likadant, i många fall. Ja, inte alla, men många. Men just det här med kopit till exempel, det känns som att det beror lite på. Alltså, jag tror att en intressant grej som vi kanske kan komma in på är hur vi arbetar och samarbetar med vår UX och designavdelning nu och de som är faktiskt dedikerade resurser i vårt nya team då. Men just det. Historiskt så känns det som att det inte är helt ovanligt att det blir lite vattenfalligt. Ja. Vi kanske sitter i en pipeline där man har så mycket i pipelineen att utveckla. Sitter liksom helt fokuserade på det och då blir det lite så att typ Affärsanalytiker och UX-are kanske då springer före på nästa grej. Och så blir det lite mer av en överlämning än vad man kanske skulle önska alla gånger. Då är det ju ganska klassiskt då att man till exempel sämre, men vad händer om det blir fel då? Ja, just det. Om man nu försöker skicka in det här och det inte funkar, för någon downstream tjänst är nere, då är det också så här. så kvämt och att man behöver inte vara expert på copywriting, utan att hitta lite resurser. Sen räcker det kanske en bra bit på vägen, men jag tror att man kan fånga en del lågtängande frukter på att vi kommer framåt utan att vi behöver fråga någon annan avdelning och hjälp. Ja, det är jätteintressant att utmana det med kommunikationen och någon flöden av att få saker gjorda och ta tid. Som du sa precis i början, det är väldigt lätt att man har med dig läget att... Ibland blir det lite gjort och sen går det en jättelång period och ingenting händer för att man har 17 andra saker som kanske både är och framför allt bedöms som viktigare just då. att komponentpibliotek. Sen finns det ju delar av tillgängligheten om hur ett helt flöde hänger ihop som är svårt att bara automatisera. Men det är ju en av de grejerna som jag tror fick organisationen att liksom komma med på. Nu startar vi ett team kring det. Jag har nog personligen velat ha ett team kring det i alla de här åren nu, men nu har det egentligen skett. För det är ju så, att tillgänglighet är ju viktigt, men jag vet inte, man har kanske inte riktigt insett det, eller att man har tänkt att det är viktigt, men det måste ju också konkurrera med andra projekt. Och vad finns det ju i bankvärlden, så är det ju massor av regulatoriska grejer och det är kanske stora systembyten och då är det ju ibland svårt. Ja, det här är viktigt, tyvärr. Vi hinner inte. Nej precis, det är fortfarande bara näst viktigast. Ja, ja men exakt. Och det kanske är liksom, jag tror att vår, asså drivet av vår UX-avdelning då så har vi ändå, jag tror att det var, jag har skrivit ner lite siffror och lite information här. 2019 började vi jobba lite mer dedikerat med tillgänglighet, men då har vi ju samarbetspartners som experter på det som kommer in och hjälper oss och så gör man en typ av analys överkyn, över våra flöden. Men då blev det lite mer punktinsatser, så jag tror inte vi lärde oss tillräckligt mycket för att ta det vidare nödvändigtvis, utan man gjorde någon review och så åtgärde man lite fel där. Men jag tror inte vi lär oss mindsetet hur vi ska utveckla tillgängligt, utan det drevs nog mest av en skild där, liksom, individer, typ jobbskälar, i de olika timmen. Så det vi försöker göra nu tillsammans med det här projektet som då drivs parallellt som är tillgärdighetsprojektet egentligen. Det är ju att försöka få lite mer långsiktighet i det, och inte se det som ett projekt som tar slut, utan att vi måste få in det i vårt arbetssätt mer och process. Ja precis. Och det är själva teamet för designsystem. Hur stort är det ungefär? Ja, just nu är vi samma uppställning sedan start. Två utvecklare är vi, som har varit med och inofficiellt petat på det här projektet. Tidsresurs som är liksom på design systemet. Två av dem har lite andra åtaganden också, men sedan är vi en produktägare. Och det tillkom ju i samband med att vi startade teamet och tycker jag är kanon, för det är inte man är inte nödvändigtvis alltid så bra på det som utvecklade. Nej, men det är ju det. Designer. Man verkar skillnaderna när man har en bra produktägare på plats. Jag sa, ja, vad mycket mer rakt på sak, tydligtvis att grejen blev plötsligt. Ja, nej men exakt. Kan ni en hål ibland? Jo, jag har gjort det en gång kanske. Ja, jag har nog också kanske gjort det en eller två gånger kanske. Och sen en teamchef har vi. Så vi är väl, ja, vad blir det? Typ 5. Vi har ju kvar det här som hade tagits fram in officiellt innan, men vi har ju inte så mycket legacy, utan det är ju väldigt mycket green field egentligen. Man får ta reda på ganska intressanta grejer. Vi vet att vi vill göra underlättare för våra utvecklare och designkollegor framförallt. Det övergripande målet handlar om att vi vill bidra till att det blir effektivare produktutveckling. Sen så vill vi ju göra den här gamla, det som startade initiativet från början, att se till att det blir en konsekvent användareupplevelse och att vi följer våran branding Och att det ska bli lätt att göra det rätt på det. Och sen är det ju då tillägglighet som är. Men det som är intressant är att vi har ju fått liksom upptäcka hur ska vi jobba i den här konstellationen och med den här produkten. För det blir ju en intern produkt. Ja, jag vet. Och det är ju väldigt kul, eftersom du har dina slutanvändare in till dig. Det är väldigt mycket feedback, men då har vi fått prova oss fram och vi jobbar lite grann i kvartal då. och in i nästa kvartal och så kanske vi skruvar på något annat. Men på senaste kvartalen så har vi i alla fall, vi jobbar i två stycken arbetsmöten här i vecka där vi försöker sitta hans son och jobba tillsammans, både utvecklarna och uexa. Och det gör ju att det här samarbetet är mycket tätare än vad det var åtminstone de timmen jag var med innan. Då känns det som att man kan ta vissa beslut som träffar både våran liksom kodbas och våran i det här fallet figma då och det känns som att det har varit väldigt värdefullt så. Så ni jobbar. Arbetsmöten, två stycken och sen så jobbar man mer på varsitt håll resten av. Ja, jag tror att det är lite... Det är ju lite spegla väl hur utvecklingsteammen jobbar också. Nu har jag... Vi jobbar inte med de vanliga produkterna på samma sätt, så jag kan väl inte svara exakt för hur... Genom snittse upplevelsen i utvecklingstim men man är ju autonoma så man får ju liksom vi vill ju jobba agilt och så alla En av team har väl i princip nån sin egen twist på vad det innebär med ceremonier, vissa kör någon kamban-variant och andra kör sprintar. Ja, men visst, det finns alla. Vad som passar just där timmet. Känner jag igen också. Ja, men precis. Vad äger eller driver eller kontrollerar era tim och andra tim? Jag tänker såhär, att ni gör en del komponenter förstår jag ju, här kommer en standard komponent för att göra den här saken. blir det då att man drar in nya komponenter som tillhör det inom situationstecken ett annat team förut eller hur funkar flödet mellan er och övriga team. Dels så fanns det ett antal komponenter som vi då förvaltar vidare och utvecklar. Det andra handlar ju om att försöka snappa upp vilka behov vi har och att inte nödvändigtvis komma i allt för lång tid utan att försöka vara lyhörda och snabbrölja. Men komponenter är väl en ganska central del i det. Vi har fokrat ganska mycket på dokumentationen kring det också. Men jag tycker personligen lite grann att det är en lite first-class-citizen i den leveransen också, så att det inte bara såhär, det finns en hink med komponenter, varsågås, där figure du det ut. Utan att man får försöker liksom ändå ha det i vårt tanke och det i och med det så får vi ju liksom bygga vår egen pipeline med hur vi levererar vår produkt. typ bibliotek, som man lyfter in via MPN. Just det. Och sen så består den i tillägg av dokumentation. Det har ju också varit en annan lite kul grej, för det har inte nödvändigtvis funnits en färdig pipeline för det, för de andra teamen har inte riktigt haft det i behovet. Där har man ju fått vara med och bygga upp det i enligt de behovet man har. Det blir lite andra saker att tänka på där med att det här ska ju versionshanteras. vi försöker ju förhålla oss till semantisk versionshantering och att man ska kunna medlita på att saker och ting funkar och om någonting har breakats så ska man få reda på det Bank här och sen så finns det nåt externt semäst där för nåt enda mål. Så jag tror i nuläget så så är det mycket fokus på tillgänglighet. Så jag tycker att det är lite intressant och spännande att jag vet inte riktigt exakt hur det kommer se ut. Vi kommer försöka se till att lyssna på våra användare och formade därefter. Ja, det är väl då det blir bäst också? Ja, och tillgängligheten, om vi ska gå in lite mer i detalj på det så är det ju... För de som mentuellt inte vet det då, så är det ju en ny lag, så den trädde vi kraften 28 juni. Och det här vet jag att de som har varit drivande, de har ju sagt ja, men förr eller senare så dyker det där datumet upp. För fem år sedan så kändes det som jättelund bort. Ja, visst precis. Men nu är det ju all hands on deck, så se till att vi liksom... Och det är väl en... Man kan väl säga att det är väl en vidare utveckling av de lagkraven som redan gäller för offentlig sektor Så man har varit inne på myndigheter och sjukvård och så där så har ju de redan mycket av de här kraven och nu uttökas det till att gälla privata aktörer också. Ja okej. Så från ett visst håll kan man se det som en breddning av nåt som redan fanns. Ja, och sen är det väl också en gräns, vilka som omfattar sig också lite. Det är lite luddigt och här vill jag brasklappa lite grann också. Jag har försökt känna att jag har noga lunda koll på det här. Men det känns som att när det gäller alla de här, bara ta det jag säger men det är passat. Ja, men exakt. Påstår att så här funkar det och sen kanske jag har missat någon per graf. Men precis allt det här är vår uppfattning utifrån det som vi har hört och sett och så där. Vi är inte lagtolkade. Nej, jag har försökt koka ner det till pragmatiskt. Vad är det som gäller? Just det. Typer av tjänster som omfattas av det här och det kommer ju på sikt att utökas till flera så träffas man inte av det här i nuläget så kommer man säkert inte göra det. Det betyder i praktiken att det finns en europeisk standard som är till för tillgänglighet och inkluderande i EU. Och en av aspekterna, de allmänna kraven som man omfattas av, det är ju de här WCAG Just som är någon sorts spes som spesar upp, det ska funka helt enkelt. Jag mår färgcontraster och allt vad det är. Sen finns det lite branschspecifika krav som beroende på manär för bransch så kan det vara extra saker som man måste tänka på. I vårt fall då som bank så omfattas vi av begripligt språk. Det betyder att det ska vara lätt att ta till sin hållet. Det ska inte minns att det finns möjlighet att om nånting står på massa faktärmer så ska man ju också kunna se det på något sätt som går att begripa även om man inte nödvändigtvis är i finansbranschen. Det är faktiskt ett underbart krav. Ja, men jag tycker det också. Sen är det ju så att de bästa lösningarna för det här är ju lika tillgängliga för alla från början. Så att det inte blir någonting man bara lägger ett lager på lager. Ja men okej, vill du ha lite mer tillgänglighet för att slå på det här läget? Och sen är det lite administrativa krav, så omfattas man av det här direktivet så måste man också arbeta med dokumentation och rapportera sina tillgänglighetsbrister. Och då finns det nånting som kallas för en tillgänglighetsredogörelse som man behöver ha då. Och det är typ en listning någonstans på sin sida som hålls uppdaterad på det här är de bristerna som finns, typ förklara varför och länka om det finns något mer tillgängligt alternativ och lite sånt där då. Och sen tror jag också att man behöver nog ha en kommentarsfunktion så att användare av din tjänst ska kunna rapportera in det här om de stött på något. Vi är medvetna om vad vi klarar och inte klarar och att vi jobbar på det. Det kommer till vad det får för påföljder, ifall man inte uppfyller de här kraven, så tillgönglighetsredogörelsen är nog en ganska viktig del i det, men vi är medvetna om det och vi är på bollen. Just det, lite sådana här, jag fan var att det fanns någon slags relaterad känsla i vissa delar, när GDPR var på tapeten och höll på att införa. Det fanns ju jättestora stränga påföljder, men det fanns också en ton av att visar du att du jobbar aktivt med det här och rapporterar när ni har problem, så kommer det, men det gäller att visa en rätt anda också. Ja, men exakt. Det är så tålka i år, eller? Ja men precis. Det känns lite som att även om jag tror att man förväntas väl vara compliant med det här när 28 juni inträder så går det ju säkert samman. Vi har inte hunnit helt enkelt. Ja, men om man kan visa. Det här är det viktigaste i det här sammanhanget. Det kan visa att vi har tagit det och att vi håller på med resten. Ja, men exakt, exakt. Och sen kanske man kan komma till den punkt inom sen. Vilka omfattas då? Det tycker jag verkar lite svårt. I vissa branscher känns det tydligt. E-handel är en av dem som omfattas av det här. Ja, det är rätt lätt att veta om man är i hand eller inte. Exakt, och banktjänster är också... Det känns också rätt lätt. Men sen är det elektroniska kommunikationstjänster, och det finns lite exempel. Telestyrelsen har de nån sorts introduktion till EUs tillgänglighetsdirektiv och då säger de elektroniska kommunikationstjänster som till exempel uppkoppling och abonnemang, Telefonsamtal, E-post, SMS, chat, videosamtal, tjänster. Det kan säkert vara fler. Ja, jag tänker det. Det kan bli ganska brett. Ja men exakt. Och sen såhär, streamingtjänster, mediertjänster typ. Det är väl en av dem. Och sen så är det vissa tjänster för personstransporter. Vissa tjänster. Ja, så vi lämnar utrymme för tolkning. Banktjänsten nämnde vi och så e-böcker behöver vara tillgängliga och e-handelstjänster. Det är ju en ganska stor sektor som omfattas. Sen tror jag att det är vissa fysiska, om man har betalningsterminaler eller olika typer av automat Så tror jag att de också är omfattas med för att jag läste någonstans att det har man liksom en sån fysisk grej ute. Så tror jag att det finns någon regel kring att om den står där idag så kan den stå kvar tills den är en viss ålder eller någonstans. Försöka liksom utbilda sig om man omfattas eller inte, men jag skulle väl förespråka att man kanske ändå tänker på tillgälligheten. För mig har det varit lite grann. Jag har inte riktigt varit så bra att tänka på tillgängligheten historiskt. Men ju mer man har fokuserat på det så har det låst upp lite grann. Det är typ ett nytt gränsnitt i din app. Ja, det är det som är så spännande. När du får in vana att jag har kortkommandot för att starta skärmläsaren, jag kan de vanliga navigeringssätten, då får du helt plötsligt ett nytt gränsligt för din app som du kan se till och få en bra användare upplevelse på. För mig är det motiverande. Jag tycker det är jättekul att det kan vara helt förfälligt. Det finns jättemånga roliga exempel när det är så här. Vårt att veta vad, vad är det då? Ja, men exakt, exakt. Så jag tycker att det känns som att det är viktigt utan tvekan, men det är också någonting som jag tycker är roligt. Det känns som att man har låst upp en ny, liten dimension här i sitt utvecklande och vad man levererar när det gäller bra användare och upplevelse. Ja men exakt, exakt. Man får lite trevlig incitament och bygga saker på mig genom tänkta sätt. Man gjorde första versionen av sin web-applikation och så är allting en div med olika styling på. Ja men exakt. att ha en AHF, en vanlig länk, ibland är det inte bara bra för att för tillgänglighet är faktiskt ganska bra för alla att se att Här är en vanlig länk, den funkar som en vanlig länk, den ser ut som en vanlig länk. Nej men exakt alla sådana grejer och det går att navigera och har vi gjort det bra och navigera med skärmläsare så blir det ofta bra att navigera med tänk på ordet också eller bara kunna tabba och saker i en vettig ordning är ju väldigt nyttigt för precis alla. Jag tror att man, du har ju säkert använt olika system även om de är webbaserade där man bara säger, men för alla de här tangentboards, liksom alltså att tabba, att navigera med liksom olika sorters kortkommandon eller navigera, alltså piltajenter och så vidare, det bara funkar. Ja. Det är ju en trevlig överraskning, och det skulle ju lika gärna kunna vara defaulten. Ja, men exakt. Det borde vara lite jobb att sabba till. Ja, men jag tror att för vår del, så en av våra... Det som vi försöker bidra med när det gäller utvecklingen är att alla kanske inte ska behöva vara tillgänglighetsexperter för att vi ska kunna leverera ett bra resultat. dels baka in det när det finns och går, men också uppmana kanske till att man har det Mindsetet, men redan när du sitter i lokala utveckling, trycker igång skärmlässan. Jag tror att man behöver gå nån liten crash course i hur skärmläsan funkar, för den kan vara ganska överväldigare när man sätter igång den. Ja, man har ju hört när den drar igång på 180 km i timmen, Spottar du massor av information? Ja visst, det är så. Profsen använder den. Ja, och man kan ju ställa in den precis så som man vill. Jag tror att en av de viktigaste, nu sitter jag på Mac, det är säkert lite olika bron på vilken och då använder jag en inbyggda voiceover. Men jag tror att den viktigaste tangenten är kontrolltangenten, för den får den att bara vara tyst. Den pausar upp lästningen. Så när du sätter igång den och du bara liksom vill få så här nu måste jag tänka. Då kan man alltid trycka in kontroll innan man gör sin nästa grej. Men jag tror att det nog inte är mer än kanske fem, sex, sju stycken kommandon. Man behöver kunna för att kunna använda den effektivt nog för att fånga mycket av de lågt hängande frukterna. Och då kanske det också är så här, gör man det redan i den lokala utvecklingen, då kanske majoriteten av det som finns inom läskillång, kravlista, som är två kilometer lång, då kanske majoriteten av det är redan löst. Jag tror verkligen att om du knappar runt i det du utvecklar lokalt med talentbordet Och se till att liksom du kan komma åt allting, du kan fylla i allting och du öppnas någon modal eller någonting så sitter fokus rätt och du hamnar inte plötsligt bakom modalen när den stängs så är du kvar där du var. Du behöver inte navigera genom hela jordet igen och att liksom bara kunna slå igång en skärmlässare i 45 sekunder och bara liksom. som man själv inte kan nu. Men jag tror målet är inte att man ska täcka hundra procent av alla problem som kan uppstå, utan det är bara att få de lågtängande frukterna. Går du att använda? Ja precis. Ett snabbt och jättestort tack till alla som stöttar oss på koffi. Du kan bli en av dem genom att syrpa in på ko-bindersrackfi.com snestrackkodsnack och slänga iväg antingen en en gångsumma eller ett månadsvis stöd. Stöder du oss på nivån kaffedrickare för 5 euro eller mer i månaden så får du ett gäng trevla klistemärken i bryolådan. Stöder du oss på nivån Barista för 10 euro eller mer i månaden så får du dessutom förutom klistermärkena. Ett stort tack precis här. Tusen tack till Michelle, Albin Groen, Anders Ligel, Brother Ingo och Tobbe Lundberg. Alla ni som stöter oss hjälper till att göra podden möjlig, och ju fler ni blir, desto bättre podd kan vi göra. Ibland har vi sponsorer i podden, men det är faktiskt ett stöd som gör att vi börjar kunna täcka kostnaderna för podden varje månad. Vill du stödas på andra sätt så går du naturligtvis utmärkt och resencerar podden i din podspelare. Sätter betyg eller en skärna, oavsett om det är Spotify, Apple-spodkast eller nån helt annan app. Eller berätta helt enkelt om ett avsnitt för nån som du tror skulle gilla på den. Och just nu har jag precis släppt det till ett nytt sätt att stötta. Vi har ett klistermärke till försäljning. I kofferbutiken finns ett trepack klistermärken om livet som Agile logförare, framhinproviserat i en mildt urspårade diskussionstråd häromveckan. Vi ser ett stöd för alla sejfutörare där ute och på den där sköna känslan i magen av att bidra till kodesnacks fortsatt ta resa. Men kom ihåg, du är en fantastisk person, oavsett om du stöttar oss, eller ej? Nej, oj, jag an... Jag antar att det fortfarande gäller att man får ett mycket gratis att säga vad man använder, standardkomponenter också istället för att finna sina egna. Ja, du tänker på sådär inbyggda element i... Ja, men precis. Det känns som en sån grej som fortfarande driv för bevinning i mina. Massor de flöder med gärna väljer dem att gör inte din egen e-kättning för en knapp eller något i onödan, utan se till att det verkligen, verkligen behövs och då har du rätt mycket att implementera om det ska bli lika tillgängligt som en standard standard. Ja ja, om du går div-hållet och försöker återståpa. Nej, men så är det i definitivt. Det finns ju många, liksom inbyggda element som är mer semantiska så man kan luta sig mot och så. Men sen är det ju lite så... Ja, det beror lite på. När det kommer till de här tillgänglighetskraven, så just WCAG, kanske specifikt då, så jobbar man ju i olika nivåer, då är det liksom A, AA och AAA. Och jag tror om jag inte minns fel här får kanske nån få rätta mig om jag har fel. Men jag tror att den här nivån som man ska uppnå är dubbel A. Det kan hända att det skiljer sig lite beroende på vilket typ av problem det är, men triple A är då den högsta ambitionsnivån och Jag menar, det kan man ju lika gärna sikta på då, men... Ja, men precis. Orimligt. Jag har kollat lite på vk och vc några gånger och det känns som att den högsta nivån kan vara ganska utmanande ganska ofta. Jag tror att det är säkert att du har en balans där, så att man inte, liksom. Ja, men av var väl ofta ganska rimlig. Man kan se så här. Ja men det här förstår jag ju, dels vad jag ska göra och varför och dels hur jag kommer dit, och sen dubbel och vad... Ja, men det här är samma, fast mer ambitiöst på något sätt. Och sen så tripplar jag såhär nu. Oj, nu kan det bli mycket. Ja, nej men exakt. Jag tror att det som du säger stämmer ju hundra procent att liksom återuppfinna inte hjulet, om man inte måste. Jag vet inte när det kommer till de komponenterna som vi levererar så försöker vi ju inte återuppfinna hjulet. Även om det är en komponent som inte nödvändigtvis går att bygga, den finns inte i Browsen. Det kanske är en lite mer interaktiv komponent som kräver... Nu finns det ju liksom ett inputfält för datum, men vi kanske behöver ha ett sätt att man ska kunna ange en range av datum och vi vill ha det som en liksom en bra upplevelse som man får om man ska boka en flygbiljett eller hotell natt eller något sånt där. Exakt. Och då måste man ju gå lite utanför vad som finns inbyggt, och det som vi försöker tänka på där, som jag väl kanske skulle uppmana ifall det är någon annan som sitter med liknande utmaningar. kan vi ändå säga ja det kanske är rimligt för oss att bara gå på den lösningen men då settet vi tänker på det då är att sätta som ett eget interface av hur skapit ser ut. Och det kan vi säkert inspireras av hur det ser ut där. Men även om det är näst in till en äthetmattning så är det en explicit. Vi lägger in det för att då blir det liksom inte ett implicit beroende på just den komponenten, Då skulle vi ju sedan kunna se så här, men vill vi bygga en custom eller behöver vi bygga en custom? Eller finns det kommer en ny aktör eller något nytt bibliotek som fungerar ännu bättre? Så det är väl en av de nyckelstrategierna som vi försöker tillämpa att liksom var det en är för komponent så är liksom API ett Det är lite helhet liksom. Det försöker vi se till att vi har en uppfattning om hur vi... Det är svårt att säkerställa att det blir så, men är det intuitivt, är det flexibelt? Är det flexibelt för att vi kanske vill ändra våra lösningar under huvudet på sikt? Precis. Jag har en kollega som jobbar med rätt mycket med våra komponenter. Vi har ett litet sånt projekt också som han har ju sagt exakt samma grej så här men vi ska se till och slå in det för att vi använder det i en bibliotek nu ganska mycket, men hans ambition är att Allting som vi har som gemensamma komponenter ska vara inslaget precis så att vi inte blir beroende av bibliotek. För just nu sitter vi stenort fast i det en del, framförallt en del äldre projekt, att det är så här katastrofer för att uppdatera en medie. Exakt, och jag menar att det skulle väl, även om du då tar den approachen så kanske majoriteten av biblioteket ändå använder någonting som färdigt. Men då är det i alla fall så förlitar du det helt och hållet på deras API. Då sitter du lite händerna på dem också. Nu har vi gjort en ny major uppdatering som bräcker en massa grejer. Då har man åtminstone en chans att motverka det genom att säga kan vi då, om vi nu inte bara kan byta komponent Tillsammans med det kan vi åtminstone se till att vårat api som vi till handahåller går att mappa om till vad som är ändrat liksom. Så det tycker jag. hur vi försöker snappa upp behoven ifrån organisationen, så jag tror ju, och där har vi ju i samband med UX också, Det som är intressant med våra täta samarbete är att man kommer från olika perspektiv. Från kodsidan så har vi ett visst perspektiv och särskilt när det gäller version samtierade kod. Det finns vissa spelregler helt enkelt. Ja, precis. På design-sidan så kanske det inte riktigt har varit lika känsligt med sånt, utan det är liksom... Då har vi behövt närma oss varandra och synka sig i mellan, så vi kan inte springa före alla gånger på design sidan eller bara göra en ändring, för det är inte riktigt så det funkar på kod sidan. Det är precis. En annan grej som vi försöker vara i synk kring, det är ju att man vill ju att det ska vara konsekvent och därmed så vill man att det ska finnas vissa constraints kanske så att det inte är så att vi kan göra på helt olika sätt fler kappar. Ja, det där är intressant, ja. bara lite större än vad man tror ändå. Ja, någonstans är det alltid nånting. Ja, men det är så trist när du sitter där i din app och så är det så här... Jag behöver måla lite utanför linjerna, men det går inte. Då får jag liksom, då får jag bara kasta ut allt och göra det helt från scratch. Precis, det blir ju inte hållborta heller. Nej, men på så sätt så ser vi att en viss flexibilitet behöver ändå finnas i alla komponenter. Och så settetvis är det typ att det är lite med high-level-komponenter och lite med low-level-komponenter. Och det finns ju en härans massa namn på sådana typer av atomic design eller vad som helst. Vi försöker tänka lite enklare på det, att en high level component är ett lite mer specifikt använder ett use case. använda det med ett ganska begränsat hopp i. Det är ganska mycket opinions inbakade. Men det gör ju också att det är ganska flexibelt för oss att se till att det fortsätter att funka, utan större ändringar och sen vart efter vi märker att då kan vi lösa kanske 80 procent av ett visst behov. Sen så kommer vi till de andra behoven och då kan vi liksom utifrån det vi vet då så kan vi börja bryta ner till lite mer olevel komponenter och då kanske man kan liksom då kommer ofta de insikterna om liksom api design som hade vi tagit det här valet så hade vi ju kanske kunna stödja, utan att man går alltför långt ner i framtida behov vi inte vet att vi har. Så vissa sådana där grejer blir ändå tydliga. rent intuitivt så känns det som att det här valet hade varit flexibelt även om vi ser framför oss att vi vill göra lite annorlunda också i framtiden. Om man säger high level i det här fall, är det typ en avancerad datumväljare som vi pratade om innan? –Är det en high level eller loll? –Ja, det är svårt med att dra gränserna också. Jag skulle se det som tänkte på tabeller, till exempel, och vi har inte supermånga tabeller ännu i biblioteket, men jag tar det som ett exempel, för där kan man se framför sig att en low-level version av sådana komponenter kan mapa väldigt nära hur det funkar i html. Du jobbar med rows och header och olika typer av celler och så vidare, men en high-level-komponent kanske tar en lista av data som den kan mappa om till det där huvuden. Många use cases så räcker det och då är det ganska närgissat så då kan du använda en komponent, skicka in datan som du kanske måste bara Skruva lite grann på, så det passar. Och sen så får du en tabell. Och i stället för att säga, visst, då ska jag liksom göra typ 88 rader kod här för att bara göra min tabell med liksom att mappa igenom saker och så vidare. Just det. Ett annat exempel är att när man jobbar med inmatningsfält i formulär så består de underhuvuden av rätt nära elementen i browser som input och så vidare. Vi har till exempel en komponent som är en textfield då, och då kombinerar ju den själva inputfältet med ett sätt att sätta en label på den och ett ämne till valideringsfel. Så sköt ju den om kopplingarna där, sin semellan under huvuden. Så att labeln blir associerad med inputfältet och valideringsfelet också. Utan att du som konsument behöver liksom säga, men hur var det nu? Just det, just det. Så det är det jag tänker på, men det är ju, jag tror att vi har stött på många gånger att man bara såhär, men är det här en higher level abstraction? Men ja, till slut så kanske man hamnar i någon atomic design ändå. Ja, men jag kanske borde dock. Det är en ständig utmaning att få till den där balansen. Ja, men här kan jag göra en jättefin komponent. Men jag behöver skicka in 300 saker till den för att den ska funka. Kan jag tänka om i det här så jag slipper det? Då kanske man på en sån här level, och det är ju också, jag vet inte vem det var som hade ett sånt talk någon gång, men att som pratade just om i design på någon konferens som man har ju sett exempel på en reakt komponent då som liksom har typ 38 props för att man har byggt på vartefter. Just det, vi måste stödja det här också. Då är det ju bättre att separera det till helt olika komponenter. Så att det blir lättare att underhålla över tid. Så det är väl lite av de tankarna och det är mycket av det är common sense men delar av det har man ju liksom på något sätt absorberat under de här åren som ändå stött lite mot det här, även om det inte har varit ens huvudsakliga arbetsgiften. Det finns ett stort värde också att få, som du säger, kommandsänds grejer, att få dem uttalade och utskrivna. Lite annorlunda ägare, men det här är väl kommelsen, så har man plötsligt dragit iväg på två spår igen, fast det är inte avsikten. En utmaning är att jag som jag nämnde där så vi två som är utvecklade i timmet just nu har ju jobbat med det här innan. Så frågan är vad som är inne i våran ryggmärg och vad som... Jag tror att det kan finnas en utmaning är att försöka få ner det här på ett enkelt och överskådligt sätt. Det här är ett mindset som vi tillämpar. För det blir ju svårt. vart lämnar det ena gärna hälvan på oss två och vart möter det nån dokumentationssida någonstans. Det där har vi säkert ett jobb att göra. Om man ser till framtiden att man skulle omborda nån ny eller nån försvinner och så vidare så försöka de grundprinciperna som man på något sätt luta sig mot nu som säkert kan ändras också såklart. när vi tar fram komponenter och liksom vad vi inte tar fram egentligen. Och lyckas man få ner sånt i text eller bilder, vilket material det är, då har man ju något som är väldigt, väldigt nyttigt, som du sa innan. Alltså allt man levererar är inte bara komponenter, utan det där informationen runt omkring kan ju vara supervärdefull, även om det kan vara svår att få fattig ibland. Man kan ju, det betyder ju att liksom jobba man i något annat än React och jobba man i mobilappen, eller jobba man i något av de andra bolagen som ingår i samma koncern. Så kan man inte nödvändigtvis ta del av komponenterna, för de är ju liksom React-specifika. Just det. Så då blir ju riktlinjer och design-token sånt blir ju desto viktigare och sen så är ju såklart också jätteintressant att fundera på hur skulle vi kunna brygga gapet mellan olika ranverk och kanske till och med olika plattformar. Hitels-teamet har ju varit verksamt i tre kvartal ungefär nu, så vi har inte känt att det känns inte så pragmatiskt att liksom börja gå utanför till något römbärksagnostiskt när så stor procentandel av allihopa ändå sitter, liksom natively mer react. Ja, och det kanske inte skriver generellt dokument för alla typer av gränssnitt i... Nej men exakt, ser man det håller man sig på webben och tänker att så, men hur kan vi stödja? Vi kanske inte vill och kommer att jobba med React i en massa år fram. Det kanske vi gör, men då kommer man ju onäkligare att tänka på sånt som webb-komponens och webb-komponens. Där är det också lite svårt, för när man läser en webb-komponens så är det också ganska polariserad. Ja, det har jag verkligen. Use the platform gänget, och så hör man library eller framework authors. Jag tycker det blir lite svårt, för det känns som att det är därför jag har varit lite försiktig med att skynda mig in i det, för det känns som att jobba i huvudsak med React. Så bra på pappret, men är det så bra i praktiken? Man kommer till alla komplexa detaljer som kärr och dom, hur lirar ramverken och domen egentligen? Många av ramverken går en annan väg när det gäller hur de renderar appar. Ja, precis. Som är lite mer... Vad är det man kallar det? Lazy, rendered, medans domen traditionellt är eagerly rendered. Samspelade verkligen. Jag har nog inte helt satt mig fullständigt in i det men det är definitivt nånting som vi har lust att titta på lite sen. Och det kan ju hända att delar av utbudet av komponenter fungerar kanon som webb-komponets, om de är liksom längre... De är ganska enskilda, det är liksom ingen komponent som rappar en massa annat, utan det kanske är typ en date picker. Eller nånting som är liksom en leaf-node typ i hierarchien av alla. Ja, det stämmer. Nej, det känns inte nödvändigtvis som en silver bullet, men vi vill ändå utforska det. Det är ju, jag tror att tittar man i ekosystemet bara i Sverige av andra designsystem och det gör vi ju själva mycket också. Det finns ju arbetsförmedlingen och SI har vi inspirerats ganska mycket om. Ja, så de kan vara surfa in och titta på. Ja, SCI har, jag tror att de relativt nyligen har gjort ett omtag på sin, jag vet inte, det är något sådant, SCI-design eller något sånt. Så de har gjort ett bra arbete och det kan man hämta mycket inspiration från. Men jag ska inte svära på hur de gör kring det, men vissa andra kör ju hundra procent webbkomponens. Ja de gör det. Det funkar säkert jättebra men jag tror att vi får utforska det i framtiden helt enkelt och se vad det är. Men sen vet jag inte, det är ju liksom inte helt otänkbart att landskapet ändrar sig lite grann, eller när AI är på stort intåg och utvecklingen går så pass snabbt som det gör. Så du sade ju precis innan vi började spela in här att det kan ju mycket väl komma att påverka. Ja. Var ni bygger och vad man gör och hur och det var en sån grej som jag inte hade slagit av för du inte sa det. Nej jag vet inte om jag hade slagit av det själv. För några veckor sen heller, men vi har pratat lite mer om det, för det har ju säkert inte gått någon förbi att det händer saker på AI. Kanske från utveckla perspektiv så har man ju traditionellt, man kanske tänkt på såhär, men vad betyder det här för mig? Ja, det är det här för mitt yrke, men om man bortse från det så tänker jag liksom att våra användare som vi bygger tjänster och appar för idag, hur ser deras interaktion med de apparna ut i framtiden? Delar av det kommer ju säkert att övergå till att vara någon sorts assistent. Man kanske pratar och ber om eller kattar eller nånting, så vissa sådana här stora komplexa flöden. Deklarationer eller du ska ansöka om bolån eller vad det nu är. Det kan ju vara ganska omfattande och komplexa formulär. Det kanske är nånting som skulle vara jättebra som ett chattflöde i framtiden för då kan du ställa frågor under tiden om det är nånting som du undrar. Men sen tror jag i personligen att vi kommer ju säkerligen att ta kvar grafiska gränssnitt för diverse grejer. Men det är också så att i våran interna produkt och dess framtid så blir det ju någonting som man har kommit under funn, men det här måste vi ändå tänka på. Hur ser framtiden ut kring det? Ja, just det. Vart är vi på väg? Just det. Det finns ju liksom vad är det de kallar det? Computer vision. Ja. Det är typ att datorn tar skärmdumpar och faktiskt navigerar. Då behöver vi ju ändå ha ett gränssnitt som är ju bara bra då, om det är tydligt och tillgängligt. Ja men exakt, tillgängligheten lönnar sig igen. Ja, det är klart, måste vi kunna finnas någon aspekt där det blir andra interaktioner så att man kanske vill presentera saker på andra sätt. Det kanske för ett annat behov av visningskomponenter som kan visas uttagna ur sitt sammanhang. Det är inte så att vi har jättestor formulär, men jag vill presentera resultatet och då är resultatkomponenten, men jag har inte resten av... –Exakt. –Informationer runtomkring. Man kanske vill integrera inåtningsfält i den här flödet också, istället för att allt hela tiden ska vara en fritext och typ en GPT-rapper. Så känns det som att det kanske är en mix av båda värdena. Men jag tycker det är svårt att veta vart vi är på väg och det är väldigt spännande att se. Och det är väl lite så som vi snackade om innan att man får försöka vara snabb på att inte sitta inlåst i. Så nu jobbar vi med det här i två år och sen så ser vi hur det blir när det är ute. Så man är snabb rörlig och håller örat mot rälsen. Ja, exakt, exakt. Det är nästan mer intressant när man tänker så också, när man inser att det kan komma sådana grejer. Finns fler aspekter att tänka på än bara de som man har framför sig precis nu? Ja nej men exakt och det tror jag väl gäller som man går in på temat med AI och utveckling också Där tycker jag också att det är lite svårt att veta. Precis som i webbkomponenten är det också ganska polariserande åsikter om det. Det är liksom all in eller all out, och vem ska man tro på? har de som är åt ena hållet eller andra hållet ett incitament, kanske, så sig eller så. Ja visst. Ja, jag själv har ju, vi har ju använt AI, framför allt under en längre stund nu för dokumentation, för att försöka hitta ett konsekvent och professionellt språk, men också liksom såhär, lite bland kanvas grej, att man får, vi ska dokumentera en knapp, eller vi ska dokumentera en komponent som gör det här. Man har ju fått den här wow-faktorn och sen har den på något sätt efterföljts av en... Ja, den kör fast och man bråkar med den här AI-in för att komma framåt. Men ju mer man fortsätter, ju mer ute på hallucinationer och så, det blir det. Ja, men exakt, exakt. Det är lite grann väldigt på beskrivning. Men den har ju kommit till omgångar också. Nu finns det ju ännu bättre integration mellan en AI-agent och en editor, till exempel. Det har också blivit en wow-faktor, men det känns också som att man kommer till. Man förstår ju att när den har den här chain of thought-grejen, att den kan promta sig själva, prova outcomes och så vidare, så förstår man ju att resultatet blir mer träffsäkert. Det har gått två dagar, en lilla honeymoon-facen är över, men då stötter man på de här frikonerna och där tar det stopp. Ja men exakt, det tar stopp på ungefär samma stil som sist. Fast på en liten... Nej, jag känner dem väldigt fyrt så också. Och samtidigt så pratar jag ju med folk, men vi genommedlar dem som verkligen, det känns som att de verkligen hittat arbetssätt ihop med AI som verkligen funkar för dem och de blir Genuint mycket snabbare på att göra saker och jobba på det sättet och det kanske är ett sätt som inte alls passar mig för att jag är gammaldags och vill sitta och titta på koden utan det blir störd av förslag vi inte i eller. Nej men om man vill ju... Alltså det är henne utav de grejerna som jag tycker är tråkigast med det. Jag vill ju prov, för jag tror också att i någon grad så kommer väl det här... Man kommer väl nästan att vara så illa tvungen att använda det för att behålla en viss produktivitet kanske. Sen så tror jag inte att man behöver liksom förlita sig på det helt och hållet. Precis, det är frågan. Men jag tänker så som för min del. Jag jobbar ju vim. Jag älskar ju det att skriva. Ja, jag tycker det är det i sig, det är så kul. Men den, liksom när man jobbar i terminalen så, det är inte nödvändigtvis så att det är inte där Ja, okej, men ska jag testa nåt nödigt här för att prova? Men liksom, jag tror jag delar din åsikt där. Men jag vill ju typ sitta utan distraktioner och bara liksom få göra det som för det ger mig glädje, liksom. Ja, och samtidigt är det ju onöjligen så att när jag har Co-pilot påslagen när vi kör studiecode. Mm. Jag vill ju kanske egentligen inte ha så mycket av intelligensen, men däremot att den ibland funkar som en väldigt smartare auto-komplettering. Ja, spara tid helt enkelt. Det sparar mig ju lite tid, då då. och hjälper med att hålla avsluta en grej och samtidigt hålla en tanke i huvudet. Så det är väldigt balansgång. Det är både störande och lite hjälpsamt samtidigt. Ja, men exakt. Men det kan vara mycket frustrerande också. Ja, jag visste. Jag menar menar mer cyniska humar så kan jag tänka om att om tillräckligt många går tillräckligt hårt in på AI Ja, i utvecklingen så kan vi vara några andra som sitter i taran och känna storkoan på att vi skriver väldigt pålite små saker med minsta möjliga kod som är hantverksmässigt skriven, mycket mer förutsägbar. Ja, men precis. Det är väl också en av aspekten att både när det gäller att producera kod kanske är en aspekt i sig, men att säga alla de här bildgenereringarna. Det är ju det som att du får samma resultat när du har samma fråga. Det blir lite svårt. Vad är det egentligen som kommer ut? Det kommer säkert att funka. Men det är där i den ballparken. Ja, precis. Det är som att prata med någon drömgenerator. Så tror man att det är samma sak plötsligt allting runt och kring ändå. Exakt, exakt. Men jag tror att det kommer väl att vara viktigt att fortsätta vara nyfiken på det i alla fall, så att man inte frånskriver det helt och hållet. Nej men precis. Jag använder det till en rimlig grad där det känns som att det är gynnaren och inte att man bara till slut sitter och men det kanske är vändigt att vi är på väg. Nej, precis. Vi stämmer av igenom två år och ser vad som faktiskt händer. Är det något mer vi borde få med innan vi avslutar för idag? Jätteintressant. Ja, men jag tror inte det. Jag tror vi har varit inom det mesta som jag har tankarna. Det är väl i så fall, jag tror att det finns några länkar som vi kanske skulle kunna lägga in i någon beskrivning för en avsnitt eller så. Ja, men exakt. Jag lägger in massor av länkar, inklusive till SCI-designsystem också. Jag tycker att det är ett tydligt samtant att de har gjort en sight for the design system som Alltså den visar ju bara komponenter men den känns samtidigt 100% SJ så de har ju verkligen De har lyckats få till en enligt känsla på det på ett ganska Stiligt sätt Det är också lite power move och läggas in till din system publikt. Det känns som att vi hade säkert också kunnat tänka oss att göra det i framtiden, men vi har inte vågat göra det ännu. Det har inte tillräckligt ett tillräckligt skiltfönster, väl enligt material kanske? Nej, jag kan helt förstå rätselnvanget. Men som sagt, vi länkar in sånt också om du och om du kommer på några fler grejer som vi borde länka med så tar vi med dem också som folk massivt tittar på. Ja men då så, tack så jättemycket Johan för att du ville vara med. Ja, ja, tack för att jag fick vara med. Tack för att just du vill lyssna på kodsnack. Om du vill stödja oss, varför inte tipsa en bekant om podden? Eller lämna en recension i till exempel iTunes eller något annat ställe där går att sätta butik på boddar. Du kan också stödja oss genom att köpa oss en kop-kaffe på koffee. koobindeseqfi.com sned seggådsnack. Alla pengar går direkt till att göra på den bättre och trevligare. Du kan också hänga i vår släckkanal. Länk finns på kodessnack.se, precis som alla andra länkar och alla andra info kopplat till varje avsnitt. Sist men inte minst finns det också en länk till vår spreadjobbutik där du kan köpa tröjor och andra prylar med kodsnacktryck.