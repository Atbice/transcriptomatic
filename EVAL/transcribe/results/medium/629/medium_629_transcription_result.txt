Jag tror verkligen att om du knappar runt i det du utvecklar lokalt med tangentbordet och ser till att du kan komma åt allting, du kan fylla i allting och du öppnas någon modal eller nånting så sitter du i fokus rätt och du hamnar inte plötsligt bakom modalen. När den stängs så är du kvar där du var, du behöver inte navigera genom hela e-rollet igen Och att liksom bara kunna slå igång en skärmläsare i 45 sekunder och bara liksom ja men, det känns som att det mekar tjänst för mig, då mekar det förmodligen hyfsat sämst för andra. Målet är inte att man ska liksom täcka 100% av alla problem som kan uppstå, utan det är bara att liksom få de lågt hängande frukterna, helt enkelt, utan att behöva göra det separat. tillgänglighetskrav eller tillgänglighetsdirektiv just nu. Just det. Så det tar upp väldigt mycket av inte bara vår uppmärksamhet utan hela utvecklingsorganisationens egentligen. Ja, så ni har ett design system team nu, var det så? Ja. Ja, hur kom du till det? Eller har du liksom varit inne på designspåret och kommit in på det teamet eller kommit från något annat spännande håll? Ja, alltså jag har väl varit intresserad av designspåret lite grann. En gång i tiden förrän femton år sedan så tror jag att jag trädde in i utvecklingsvärlden ifrån att ha lekt lite grann med design. Mm. Jag tror att i de flesta tillfällen tycker jag att den tekniska biten av det är det mest intressanta men lite bakgrund kring det är att vi har ju på jobbet så är vi väl, just nu så är vi cirka 20-25 stycken i utvecklingsteam och jag har fått lite siffror här, 135 stycken utvecklare och testare där jag tror att... Så det är ett par stycken? both internt och externt och till privata kunder, företagskunder och allting sådant. Det har varit väldigt många appar, och de har ju en tendens att bli lite utdaterade. Man kanske kopierar en lösning som man gjorde där och sen så klistrar man in det i den nya appen och så gör man ändringarna där och så blir det ju inkonsekvent till släppt. Så det var väl egentligen så det började 2018. Hur många år sedan det nu är. Det började bli 7 år sedan. Jag skulle säga tre. Ja, jag skulle också säga tre. Allt efter mars 2020 är ju ändå samma år. Ja men exakt exakt. Nej men så då började vi lite inofficiellt helt enkelt. Ett gäng utvecklare som satt i lite olika utvecklingsteam. Vi lyckades få att vi kunde sitta typ en eftermiddag i veckan eller nåt sånt. Ja men ta dem och programmera lite grann. Rent från eget, i allas eget intresse så att säga. Ja, man hade ju sett det här behovet. Sedan dess har vår design och UX-avdelning också växt ganska rejält. Men på den tiden var det inte lika många. Men vi hade ju ändå rätt nära dialog med dem och de såg ju om några det här problemet. Det kändes verkligen som att det finns ingen röd tråd någonstans. Så då började vi bara se, vad är det vanligaste? För vi har inte heller fått nåt commitment på att underhålla det här enligt nåt strukturerat. Så då blev det så, men väldigt mycket handlar om formulär, vi ska samla in data i ansökningsflöden och det är liksom man ska göra överföringar och allt vad man nu gör. Så vi började i den änden egentligen och bara försöka, vi vet inte nödvändigtvis vad som är rätt, vad som ser rätt ut. Men det viktigaste är kanske att det ser likadant ut. Ja, vi gjorde ju ett litet bibliotek egentligen som vi distribuerade med en intern MPM-registry. Sen visste vi att om vi fokuserar mer på API-it och inte tänker så mycket på att skylta med några detaljer kring luckenfil så kan vi ju ändå ganska flexibelt uppdatera det över tid när vi vet mer om vad som är rätt visuellt. Så det var så det började och det har jag egentligen hållit på så sedan dess fram till Q2 i 2024. Så första april där i Krokarna så satte vi officiellt igång ett team. Ja. Men det här projektet har ju levt, eller projekt, jag vet inte vad man ska kalla det. Det har ju levt lite inofficiellt, så det har ju varit så här, periodvis har man hunnit jobba lite mer på det och periodvis har man inte hunnit jobba någonting alls på det. Men det har ju ändå varit i användning hos ett antal team, sedan 2018. Så då var det helt enkelt att en PM-paket med UI-komponenter då? Ja, exakt. Och ganska begränsad dokumentation i anslutning till det då. Så sättet som det skiljer sig idag är ju att vi... Det är ju ett helhetsgrepp kring det. Designsystemet omfattar ju mer än bara kod och design-enten också. Man kan ju dra det till att det kan handla om copywriting, bildmanier och alla möjliga grejer. Och det där har vi inte riktigt en lösning för ännu, men på sikt så hoppas vi att vi ska kunna centralisera det. Även om vi inte själva står för innehållet nödvändigtvis så ska man inte behöva liksom... Ja men vart finns det här? Man kanske kan ha en samlingsplats där man hittar både dokumentation och relevant information som utvecklare och designer men man kanske kan hitta till relaterade resurser också, även om inte de är skrivna där då. Ja, för det var en sån grej som är intressant, kände jag när jag började fundera inför vårt snack. Just det där med hur stort eller litet paraply är ordet designsystem. Det skulle nog se ut att fungera ganska exakt likadant i många fall, inte alla men många. Just det här med kopi till exempel, det känns ju som att det beror lite på mig. Jag tror att en intressant grej som vi kanske kan komma in på är hur vi arbetar och samarbetar med vår UX och designavdelning nu och de som är faktiskt dedikerade resurser i vårat nya team då. Men historiskt så känns det som att det är inte helt ovanligt att det blir lite vattenfalligt. Och så blir det lite mer av en överlämning än vad man kanske skulle önska alla gånger. Då är det ganska klassiskt att man till exempel säger, vad händer om det blir fel då? Om man nu försöker skicka in det här och det inte funkar för någon downstreamtjänst är nere. Man behöver inte vara expert på copywriting utan man kan hitta lite resurser och sen räcker det kanske en bra bit på vägen. Men jag tror att man kan fånga en del lågt hängande frukter på att vi kommer framåt utan att vi behöver fråga någon annan avdelning. Hjälp typ. Ja, det var jätteintressant att utmana där med kommunikationen och flöden av att få saker gjorda och ta tid. Som du sa precis i början där, det är väldigt lätt att man har med det där läget att, ja, men ibland blir det lite gjort och sen går en jättelång period och ingenting händer för att... för att man har sjutton andra saker som man kanske både är och framförallt bedöms som viktigare just då. Ja, och det kanske man, alltså nu, vi har ju hållt på med det här nu. Vi konstaterade att det var mer än tre år och det känns som att få ett commitment på att kunna göra det här också. Så där har ju det här tillgänglighetsdirektivet varit, det var ju lite det som var, ja men det var det som fick skjuts i den prioriteringen. För det är ju också så att det är ju en av våra stora fokusområden är ju just tillgänglighet att försöka dels baka in tillgänglighet där vi kan. Det finns ju delar av tillgängligheten om hur ett helt flöde hänger ihop som är svårt att automatisera. Men det är ju en av de grejerna som jag tror att organisationen fick gå med på. att nu startar vi ett teamkring. Jag har nog personligen velat ha ett teamkring i alla de här åren nu, men nu har det egentligen skett. För det är ju så att tillgänglighet är ju viktigt men jag vet inte, man har kanske inte riktigt insett det eller att man har tänkt att det är viktigt men det måste ju också konkurrera med andra projekt och då finns det ju liksom i bankvärlden så är det ju massa regulatoriska grejer och det är kanske stora systembyten och då är det ju ibland svårt och liksom ja det här är viktigt men tyvärr vi hinner inte. Nej, precis. Det är fortfarande bandnäst viktigast. Ja, men exakt. Och det kanske är liksom, jag tror att drivet av vår UX-avdeling, så har vi ändå... Jag tror att det var... Jag har skrivit ner lite siffror och lite information här. 2019 började vi jobba lite mer dedikerat med tillgänglighet, men då har vi samarbetspartners som är experter på det som kommer in och hjälper oss och så gör man en analys och översyn över våra flöden. Men då blev det lite mer punktinsatser. Så jag tror inte vi lärde oss tillräckligt mycket för att ta det vidare nödvändigtvis. Utan man gjorde någon review och så åtgärdade man lite fel där. Men jag tror inte vi lärde oss mindsättet hur vi ska utveckla tillgängligt. Utan det drevs nog mest av enskilda individer, typ äldre skälar i de olika teamen. Så det vi försöker göra nu tillsammans med det här projektet som då drivs parallellt som är tillgänglighetsprojektet egentligen Det är ju att försöka få lite mer långsiktighet i det, och inte se det som ett projekt som tar slut, utan att vi måste få in det i vårt arbetssätt mer, och process, typ. Ja, precis. Det är själva teamet för designsystemet. Hur stort är det ungefär? Ja, just nu är vi två utvecklare, eller just nu, vi är i samma uppställning sedan start. Två utvecklare är vi som har varit med och inofficiellt petat på det här projetet, det som fanns innan. Vi är typ tre UX-are. En av våra UX-are är en fulltidsresurs som jag fokuserar på designsystemet. Två av dem har lite andra åtaganden också, men sen är vi en produktägare och det tillkom ju i samband med att vi startade teamet och tycker jag är kanon, för man är inte nödvändigtvis alltid så bra på det som utvecklare. Nej men det är ju det, man märker skillnaden när man har en bra produktägare på plats. Jaha, oj, vad mycket mer rakt på sak och tydligt vissa grejer blev plötsligt. Ja, nämen exakt. Och bara att vi håller i rätt riktning och inte... Ja, för jag menar som utvecklare känner du kanske likadant men att det är ganska lätt att ramla ner i lite kaninhål ibland. Jo, jag har gjort det en gång kanske. Ja, jag har nog också kanske gjort det en eller två gånger kanske. Och sen en teamchef har vi. Så vi är väl, ja vad blir det, typ fem? Vi har ju kvar det här som hade tagits fram innan, men vi har ju inte så mycket legacy. Det är ju väldigt mycket greenfield egentligen, och man får ta reda på ganska intressanta grejer. Ja men vi vet ju att vi vill göra underlätta för våra utvecklare och designkollegor framförallt. Och det övergripande målet handlar väl om att vi vill bidra till att det blir effektivare produktutveckling. Sen så vill vi ju göra den här gamla, det som startade initiativet från början att se till att det blir en konsekvent användarupplevelse och att vi liksom följer vår branding och att det ska bli lätt att göra rätt på det. Men det som är intressant är att vi har ju fått upptäcka hur ska vi jobba i den här konstellationen och med den här produkten. För det blir ju en intern produkt, och det är ju väldigt kul eftersom du har dina slutanvändare in till dig och revir dig. Så det är väldigt mycket feedback, men då har vi fått prova oss framåt. Vi jobbar lite grann i kvartal då. Det känns som att vi provar ett arbetssätt och sen så behåller vi det som känns bra in i nästa kvartal. och UXa. Det gör ju att det här samarbetet är mycket tätare än vad det var, åtminstone i de teamen jag var med innan. Det känns som att man kan ta vissa beslut som träffar både vår kodbas och i det här fallet figma då. Det känns som att det har varit väldigt värdefullt. Men ja, så ser teamet ut. Arbetsmöten, två stycken, och sen så jobbar man mer på varsitt håll, resten av... Ja, jag tror att det lite speglar väl hur utvecklingsteamen jobbar också. Nu jobbar jag inte med de vanliga produkterna på samma sätt, så jag kan väl inte svara exakt för genomsnittsupplevelsen. Nej, det är klart. Man är ju autonoma så man får ju liksom, vi vill ju jobba agilt och alla team har väl i princip någon sin egen twist på vad det innebär när det gäller ceremonier, vissa kör någon Kanban-variant och andra kör sprintar och app. Det finns alla, vad som passar just det i teamet, känner jag igen också väldigt så. Ja, men precis. Men, hur det... Vad äger eller driver eller kontrollerar era team kontra andra team? Jag tänker att ni gör en del komponenter, här kommer en standardkomponent för att göra den här saken. Blir det då att man drar in nya komponenter som tillhör det inom situationsdecken? Ett annat team förut eller hur funkar flödet mellan er och övriga team? Dels så fanns det ju ett antal komponenter som vi då förvaltar vidare och vidareutvecklar och det andra handlar vi om att försöka snappa upp vilka behov vi har och att inte nödvändigtvis kommitta allt för långt fram i tid utan att försöka vara lyhörda och snabbrörliga. Det är en bra grej. Jag tycker personligen att det är en first class citizen i den leveransen också. Det är inte bara så att det finns en hink med komponenter, var som vill figure it out. Man försöker ändå ha det i åtanke. I och med det får vi bygga vår egen pipeline med hur vi levererar vår produkt. För det har inte nödvändigtvis funnits en färdig pipeline för det, för de andra timmen har inte riktigt haft det behovet. Så där har man ju fått vara med och liksom bygga upp det enligt de behov man har. Det blir lite andra saker att tänka på där med att det här ska ju versionshanteras och versionshanteringen är ju någonting som är väldigt viktig för att säkerställa att det blir stabilt i länken. Vi försöker ju förhålla oss till semantisk versionshantering och att man ska kunna lita på att saker och ting funkar och om någonting har breakats så ska man få reda på det och kunna ta hänsyn till det. Men annars så är det ju alltså, jag tror att det där är också lite grann i rörelse. Vad är det vi kommer att äga som team? Vad är våra produkter egentligen? Något externt kemiskt där för något ändamål så jag tror i nuläget så är det mycket fokus på tillgänglighet så jag tror att det Jag tycker att det är lite intressant och spännande att jag vet inte riktigt exakt hur det kommer se ut. Jag tror att vi kommer försöka se till och lyssna på våra användare och forma det därefter. Ja, visst. Det är väl då det blir bäst också. Ja, och tillgängligheten, om vi ska gå in lite mer i detalj på det, För de som eventuellt inte vet det då så är det ju en ny lag, så den trädde i kraft den 28 juni. Och det här vet jag att de som har varit drivande, de har ju sagt ja, men förr eller senare så dyker det där datumet upp. För fem år sedan så kändes det som jättelungt bra. Jaja, visst, precis. Men nu är det ju all hands on deck för att se till att vi liksom, och det är väl en, man kan väl säga att det är väl en vidare utveckling av de lagkraven som redan gäller för offentlig sektor, så om man har varit inne på myndigheter och Ja, okej. Så från ett visst håll kan man säga att det är som en breddning av någonting som redan fanns. Ja, och sen är det väl också en gräns, alltså vilka som omfattar sig också lite. Det är lite luddigt och här vill jag brasklappa lite grann också. Alla de här, bara ta av det och säga men det är passat så att man påstår att såhär funkar det och sen så kanske jag har missat någon paragraf. Nej men precis, allt det här är vår uppfattning utifrån det som vi har hört och sett och sådär. Vi är inte lagtolkare. Nej, jag har försökt koka ner det till så här pragmatiskt, vad är det som gäller? Just det. Men ja, så nu är det ju ett antal typer av tjänster egentligen som omfattas av det här och det kommer ju på sikt att utökas till flera. Man kan säkerligen göra det inom det relativt snar framtid. Det betyder i praktiken att det finns en europeisk standard som är till för tillgänglighet och inkluderande i EU. En av aspekterna, de allmänna kraven som man omfattas av, det är ju de här WCAG, som är någon sorts spes, som spesar upp såhär. Det ska funka såhär, helt enkelt. Färgkontraster och allt vad det är. Sen finns det lite specifika krav som beroende på om man är i för bransch så kan det vara extra saker som man måste tänka på. I vårt fall som bank så omfattas vi av begripligt språk och det betyder ju att det ska vara lätt att ta till sig innehållet. Det ska åtminstone finnas möjlighet att om någonting står på massa faktermer så ska man också kunna se det på något sätt som går att begripa även om man inte nödvändigtvis är i finansbranschen. Det är ju faktiskt ett underbart krav. Ja, nej men jag tycker det också. Och jag tycker att... Sen är det ju så att de bästa lösningarna för det här är ju lika tillgängliga för alla från början. Så att det inte blir såhär någonting man bara lägger ett lager på lager. Ja, men exakt. Okej, vill du ha lite mer till innan får du slå på det här läget. Just det, precis. Och sen är det lite administrativa krav, så omfattas man av det här direktivet så måste man också arbeta med dokumentation och liksom rapportera sina tillgänglighetsbrister. Och då finns det någonting som kallas för en tillgänglighetsredogörelse som man behöver ha då. Och det är typ en listning någonstans på sin sida som hålls uppdaterad på mer tillgängligt alternativ och lite sånt där då. Man behöver nog ha en kommentarsfunktion så att användare av din tjänst ska kunna rapportera in det här om de stöter på något. Så det är egentligen lite grann att visa, vi är medvetna om vad vi klarar och inte klarar och att vi jobbar på det. Ja. Just det. Det kommer till vad det får för påföljder ifall man inte uppfyller de här kraven så tillgänglighetsredogörelsen är nog en ganska viktig del i det. Men vi är medvetna om det och vi är på bollen. Det fanns någon slags relaterad känsla i vissa delar när GDPR var på tapeten och höll på att införa. Ja men alltså en grej var att det fanns ju jättestora strängar påfölj där, men det fanns också en ton av att visar du att du jobbar aktivt med det här, och rapporterar när ni har problem, så kommer det liksom, ja men det gäller att visa en rätt anda också. väl vara kompliant med det här när 28 juni inträder så går det ju säkert såhär men vi har inte hunnit helt enkelt och om man kan visa att vi har tagit det här Det här är det viktigaste i det här sammanhanget, vi kan visa att vi har tagit det och att vi håller på med resten. Ja, men exakt, exakt. Och sen kanske man kan komma till den punkten om vilka omfattas då, och det tycker jag verkar lite svårt, alltså i vissa branscher så känns det väldigt tydligt, typ e-handel är ju en utav dem som omfattas av det här. Exakt, och banktjänster. Det känns också rätt lätt. Men sen är det så här elektroniska kommunikationstjänster och det är också så här det finns lite exempel. Jag tror att vi kan säkert lägga in några bra länkar i beskrivningen också, men det finns ju från post- och telestyrelsen så har de någon sorts introduktion till det här EUs tillgänglighetsdirektiv och då säger de elektroniska kommunikationstjänster Men det kan säkert vara fler. Ja, jag tänker det. Det kan nog bli ganska brett. Ja, men exakt. Och så här streamingtjänster, medietjänster typ, det är väl en av dem. Och sen så är det vissa tjänster för persontransporter. Vissa känns det. fysisk grej ute, så tror jag att det finns någon regel kring att om den står där idag så kan den stå kvar tills den är en viss ålder eller något sånt. Ja, det känns ju sansat. Man kan säkert försöka utbilda sig om man omfattar sig eller inte, men jag skulle väl förespråka att man kanske ändå tänker på tillgängligheten. För jag vet inte, alltså för mig så har det varit lite grann, jag har inte riktigt varit så bra att tänka på tillgängligheten historiskt. Men ju mer man har fokuserat på det så har det ju låst upp lite grann. Det är typ ett nytt gränssnitt i din app. Ja, det är det som är så spännande. När du får in vanan att... Liksom, ja men jag kan... Jag har kortkommandot för att starta skärmläsaren. Jag kan de vanliga navigeringssätten. Då får du helt plötsligt ett nytt gränssnitt för din app som du kan se till att få en bra användareupplevelse på. för det kan ju vara helt förfärligt. Det finns jättemånga roliga exempel när det liksom är såhär ja men du kan typ hoppa igenom 48 element som bara säger pill, pill, pill, pill ganska svårt att veta vad är det då liksom. Ja, men exakt, exakt. Så jag tycker att det känns som att det är viktigt utan tvekan, men det är också någonting som jag tycker är roligt. Det känns som att man har låst upp en ny, liten dimension här i sitt utvecklande och vad man levererar när det gäller bra använderupplevelse. Ja, men exakt. Man får lite trevlig incitament att bygga saker på mer genomtänkta sätt. Sedan gjorde man första versionen av sin webbapplikation och så är allting en div med olika styling på. Att ha en AHRF, en vanlig länk, ibland, det är inte bara bra för tillgänglighet, det är faktiskt ganska bra för alla att se att den funkar som en vanlig länk, den ser ut som en vanlig länk. Precis alla. Just det alltså. Jag tror att det är en sån här grej som man kanske inte ens... Man tänker knappt på det när man sitter och utvecklar, och när man sitter och utvecklar så blir man lite så här hemma blind också. För du är inte nödvändigtvis den tilltänkta målgruppen för den appen du utvecklar. Jag ska bara utveckla den. Jag tror att man, du har säkert använt olika system även om de är webbaserade, där man bara säger men fan, alla de här tajantbords, Att tabba, att navigera med olika sorters kortkommandon eller piltagenter och så vidare, det bara funkar. Det är ju en trevlig överraskning, och det skulle ju lika gärna kunna vara defaulten. Ja, exakt. Det borde vara lite jobb att sabba till. Jag tror att för vår del så är en av våra, det som vi försöker bidra med när det gäller utvecklingen är att alla kanske inte ska behöva vara tillgänglighetsexperter för att vi ska kunna leverera ett bra resultat. Dels baka in det när det finns och går, men också uppmana till att man har det mindsetet att redan när du sitter i lokal utveckling, tryck igång skärmläsaren. Jag tror att man behöver gå någon liten crash course i hur skärmläsaren funkar, för den kan vara ganska överväldigande när man sätter igång den. Man har ju hört när den drar igång på 180 km i timmen, där man spotar ur massa information. Ja visst, det är så profsen använder den. Ja, och man kan ju ställa in den precis så som man vill. Sitter jag på Mac, det är säkert lite olika beroende på vilken och då använder jag en inbyggda voiceover. Men jag tror att den viktigaste tangenten är kontrolltagenten, för den får den att bara vara tyst. Den pausar uppläsningen. Så när du sätter igång den och du bara vill få, nu måste jag tänka. Då kan man alltid trycka in kontroll, innan man gör sin nästa grej. Men jag tror att det är nog inte mer än kanske fem, sex, sju stycken kommandon man behöver kunna för att kunna använda den effektivt nog för att fånga mycket av de här lågt hängande frukterna. Och då kanske det också är så här, gör man det redan i den lokala utvecklingen, då kanske majoriteten av det som finns i någon läskig lång kravlista, som är liksom två kilometer lång, då kanske majoriteten av det är redan löst. Jag tror verkligen att om du knapar runt i det du utvecklar lokalt med tangentbordet och ser till att du kan komma åt allting, du kan fylla i allting och du öppnas någon modal eller någonting så sitter du i fokus rätt och du hamnar inte plötsligt bakom modalen. När den stängs så är du kvar där du var, du behöver inte navigera genom hela grålet igen. Och att liksom bara kunna slå igång en skärmläsare i 45 sekunder och bara liksom ja men det känns som att det är makartjänst för mig, då är makare förmodligen hyfsat sens för andra. Och sen så är det ju med också, visst är man proffsanvändare av det här, så kan det ju hända att det finns insikter som man själv inte kan ännu. Ja men det går då att använda. Ja precis. Ett snabbt och jättestort tack till alla som stöttar oss på Ko-Fi. Du kan bli en av dem genom att surfa in på ko-fi.com, snedsträck kodesnack och slänga iväg antingen en engångssumma eller ett månadsvis stöd. Stödjer du oss på nivån kaffedrickare för fem euro eller mer i månaden så får du ett gäng trevliga klistermärken i brevlådan. Stödjer du oss på nivån barista för tio euro eller mer i månaden så får du dessutom, förutom klistermärkena, ett stort tack precis här. Vill du stöda oss på andra sätt så går det naturligtvis utmärkt att recensera podden i din podspelare. Sätt ett betyg eller en stjärna, oavsett om det är Spotify, Apples podcast eller någon helt annan app. Eller berätta helt enkelt om ett avsnitt för någon som du tror skulle gilla podden. Och just nu har jag precis släppt ett helt nytt sätt att stötta. Vi har ett klistermärke till försäljning. I koffebutiken finns ett trepack klistermärken om livet som agil logeförare, fram improviserat i en milt urspårad diskussionsstrål häromveckan. Ni får utöva det där ute och få den där sköna känslan i magen av att bidra till Kodesnacks fortsatta resa. Men kom ihåg, du är en fantastisk person, oavsett om du stöttar oss eller ej. Nej, jag antar att det fortfarande gäller att man får rätt mycket gratis av att använda standardkomponenter också istället för att finna sina egna, det känns. Ja, du tänker på sådär inbyggda element. Ja, men precis. Det känns som en sån här grej som fortfarande driver för bevinning i mina. Massor av de flöden med genom, att gör inte din egen ersättning för en knapp eller något i onödan. Utan se till att det verkligen, verkligen, verkligen behövs. och då har du rätt mycket att implementera om det ska bli lika tillgängligt som en standard. Ja, om du går div-hållet försöker du låta det skapa. Nej, men så är det definitivt. Det finns ju många inbyggda element som är mer semantiska som man kan luta sig mot. Det beror lite på när det kommer till de här tillgänglighetskraven och just WCAG specifikt så jobbar man i olika nivåer. Då är det liksom A, AA och AAA. Och jag tror, om jag inte minns fel, att någon får rätta mig om jag har fel. Men jag tror att den här nivån som man ska uppnå är dubbel A. Det kan hända att det skiljer sig lite beroende på vilket typ av problem det är, men AAA är då den högsta ambitionsnivån. Jag menar, Det kan man ju lika gärna sikta på det om man vet att det är orimligt. Jag har kollat lite på VK och WCAG några gånger och det känns som att den högsta nivån kan vara ganska utmanande ganska ofta, har jag för mig. Ja, men jag tror det är säkert att ha en balans där, så att man inte liksom... Ja, men A var väl ofta ganska rimlig. Man kan säga att man förstår vad man ska göra, varför och hur man kommer dit. Och sen dubbel av, ja men det här är samma fast mer ambitiöst på något sätt. Och sen så trippar jag och är såhär, oj nu kan det bli mycket. Ja, nej men exakt. Jag tror att det som du säger stämmer ju hundra procent att liksom återuppfinna inte hjulet om man inte måste. Jag vet inte, när det kommer till de komponenter som vi levererar så försöker vi ju inte återuppfinna hjulet, även om det är en komponent som inte nödvändigtvis går att bara bygga. Den finns inte i browser. Det kanske är någon lite mer interaktiv komponent som kräver... Nu finns det ju liksom ett inputfält för datum men vi kanske behöver ha ett sätt att liksom man ska kunna ange en range av datum och vi vill ha det som en liksom en bra upplevelse som man får om man ska boka en flygbiljett eller hotellnatt eller nåt sådant där. Exakt. Och då måste man ju gå lite utanför vad som finns inbyggt. Och det som vi försöker tänka på där, och som jag väl kanske skulle uppmana ifall det är någon annan som sitter med liknande utmaningar. ut i ekosystemet. Så försöker vi ändå säga ja, det kanske är rimligt för oss att bara gå på den lösningen. Men då sättet vi tänker på det då är att sätta liksom ett eget interface av hur skapit ser ut. Det kan säkert inspireras av hur det ser ut där, men även om det är nästintill en etetmattning, så är det en explicit. Vi lägger in det för att då blir det inte ett implicit beroende på just den komponenten, eller något nytt bibliotek som funkar ännu bättre. Så det är väl en av de nyckelstrategierna som vi försöker tillämpa att var det än är för komponent så är API-t lite heligt. Det försöker vi se till att vi har en uppfattning om hur vi... Och där är det ju såklart liksom... Det är svårt att säkerställa att det blir så, men att så här... Är det liksom intuitivt? Är det flexibelt? Och flexibelt så menar jag bara, är det flexibelt för att vi kanske vill ändra vår lösning under huvudet på sikt då? Precis. Jag har en kollega som jobbar rätt mycket med våra komponenter. Vi har ju ett litet sådant projekt också, som han har ju sagt exakt samma grejer såhär att vi ska se till att slå in det för att vi använder rätt designbibliotek nu ganska mycket. Nu sitter vi stenhårt fast i det, framförallt i en del äldre projekt, att det är en katastrof att försöka uppdatera en Mayhew. Exakt, och även om du tar den approachen så kanske majoriteten av biblioteket ändå använder någonting sånt färdigt. Men då är det i alla fall, förlitar du det helt och hållet på deras API, då sitter du ju lite i händerna på dem också när nu har vi gjort en ny major uppdatering som breakar en massa grejer. Då har man åtminstone en chans att motverka det genom att säga åtminstone se till att vårt API som vi tillhandahåller går att mappa om till vad som än är ändrat. Så det tycker jag är typ en key take away i sammanhanget. hur vi försöker snappa upp behoven från organisationen. Så jag tror ju, och där har vi ju i samband med UX också, det som är intressant med våra täta samarbete är att man kommer från olika perspektiv. Från kod sidan så har vi ett visst perspektiv och särskilt när det gäller liksom versionshanterade kod Det finns vissa spelregler helt enkelt och på designsidan så kanske det inte riktigt har varit lika känsligt med sådant. Då har vi behövt närma oss varandra och synka sig inte emellan så att vi kan inte springa före alla gånger på designsidan eller bara göra en ändring för det är inte riktigt så det funkar på kodssidan. Ja, det där är ju intressant ja. Men jag tycker personligen så tycker jag att asså jag har under de här åren nu så har man ändå både såhär konsumerat ganska mycket innehåll ifrån ekosystemet och ifrån diverse thought leaders och så vidare Min uppfattning är att den här flexibiliteten behöver vara lite snurre än vad man tror ändå. Ja, någonstans är det alltid nånting. Ja men det är så trist när du sitter där i din app och så är det såhär Jag behöver måla lite utanför linjerna, men det går inte. Då får jag bara kasta ut allt och göra det helt från scratch. Ja men precis, det blir ju inte hållbart det heller. På så sätt så ser vi att en viss flexibilitet behöver ändå finnas i alla komponenter. Och så sättet vi ser det på är ju typ att det är lite mer high-level komponenter och lite mer low-level komponenter. Och det finns ju en herrans massa namn på liksom sådana typer av såhär, om det är atomic design eller vad som helst. Vi försöker tänka lite enklare på det, att en high-level komponent, det är ett lite mer specifikt användare, ett use case. Man kan använda det med ett ganska begränsat API, det är ganska mycket opinions-inbakade, men det gör ju också att det är ganska flexibelt för oss att se till att det fortsätter att funka utan större ändringar. Och sen vart efter vi märker att, för då kan vi lösa kanske 80% av ett visst behov. Sen så kommer vi till de andra behoven och då kan vi ju liksom utifrån det vi vet då så kan vi börja bryta ner den till lite mer low-level komponenter och då kanske man kan liksom Då kommer ofta de här insikterna om API design som hade vi tagit det här valet så hade vi ju kanske kunna stödja utan att man går alltför långt ner i framtida behov vi inte vet att vi har. Så vissa sådana där grejer blir ändå tydliga. Rent intuitivt så känns det som att det här valet hade varit flexibelt även om vi ser framför oss att vi vill göra lite annorlunda också i framtiden. Ja, det är svårt med hur man drar gränserna också. Ja, självklart. Vi ser det som... Tänk dig på tabeller, till exempel, och vi har inte supermånga tabeller ännu i biblioteket, men jag tar det som ett exempel, för där kan man se framför sig att en low-level version av sådana komponenter kan mappa väldigt nära hur det funkar i HTMLen. Så då kan du använda en komponent, skicka in datan som du kanske måste bara skriva lite grann på så att den passar. Och sen så får du en tabell. Och istället för att säga att jag ska göra 8 rader kod för att göra min tabell och mappa igenom saker och så vidare. Så det är väl ett exempel. Ett annat exempel är kanske att när man jobbar med inmatningsfält i formulär så består ju de under huvudet av ganska, alltså de är ju rätt nära elementen i browser, som input och så vidare. Vi har till exempel en komponent som är en text-field då, och då kombinerar ju den själva input-fältet med ett sätt att sätta en label på den och ett valideringsfel. så sköt ju den om kopplingarna där, sin semellan under huven, så att label blir associerad med input-fältet och valideringsfelet också. Utan att du som konsument behöver liksom så här, men hur var det nu? Bye. Ska vi ha sådant. Så det är det jag tänker på men det är ju, jag tror att vi har stött på många gånger att man bara säger Ja men är det här en higher level abstraction? Men ja, till slut kanske man hamnar i någon atomikdesign ändå. Ja, men det är kanske både och. Det är en ständig utmaning att få till den balansen. Jag behöver skicka in 300 saker till den för att den ska funka. Kan jag tänka om i det här så jag slipper det? Ja, men då kanske man på en sån här highlevel och det är också en... Det är också, jag vet inte vem det var som hade ett sådant tak någon gång, men att de pratade just om OPI design på någon konferens. Man har ju sett exempel på en React-komponent som har typ 38 props för att man har byggt på vart efter. Det är väl lite av de tankarna, och mycket av det är common sense, men delar av det har man ju liksom på något sätt absorberat under de här åren som man då stött lite mot det här, även om det inte har varit ens huvudsakliga arbetsuppgift då. Det finns ju ett stort värde i att få de uttalade och utskrivna, det är ju en väldigt stor nytta i sig. Annars är det ju nån i ett team som tycker att det är något lite annorlunda, men det här är väl common sense. Utmaningen är ju att, som jag nämnde där, så vi två som är utvecklade i teamet just nu har ju jobbat med det här innan. Så frågan är vad som är inne i våran ryggmärg och vad som... Jag tror att det kan finnas... En utmaning är ju att försöka få ner det här på ett enkelt och överskådligt sätt. att det här är ett mindset som vi tillämpar, för det blir ju svårt. Jag vet faktiskt inte riktigt var gränsen går. Vart lämnar det ena hjärnhälvan på oss två? och vart liksom möter det någon dokumentationssida någonstans. Där har vi säkert ett jobb att göra. Om man ser till framtiden och att man skulle omborda någon ny eller om någon försvinner och så vidare så försöka de grundprinciperna som man på något sätt lutar sig mot nu, som säkert kan ändras också såklart, men det här är det vi förhåller oss till nu. Liksom bara vänta fram egentligen. Ja, visst. Och lyckas man få ner sådant i text eller bilder, vilket material det är, då har man ju något som är väldigt, väldigt nyttigt. Som du sa innan, allt man levererar är inte bara komponenter utan informationen runt omkring kan ju vara supervärdefull, även om den kan vara svår att få fat i ibland. just nu och jobbar i React-applikationen. Det var så det började och det är fortfarande så. Det betyder ju att jobbar man i något annat än React och jobbar man i mobilappen eller jobbar man i något utav de andra bolagen som ingår i samma koncern så kan man inte nödvändigtvis ta del av komponenterna, för de är ju reaktorspecifika. Det blir ju riktlinjer och design tokens och sånt blir ju desto viktigare och sen så är det ju såklart också jätteintressant att fundera på hur skulle vi kunna brygga gapet mellan olika ranverk och kanske till och med olika plattformar. Hitills, teamet har ju varit verksamt i tre kvartal ungefär nu, så vi har inte känt att det känns inte så pragmatiskt att börja gå utanför till nåt ramverksagnostiskt när så stor procentandel av allihopa ändå sitter natively med React. Nej. Men det är ju definitivt en fråga för nära framtid, förmodligen. Ja, men det är ju som du säger, det är en lågt hängande frukt igen. Vad är vettigt att börja med? Vad får vi stor utdelning på det? Och det kanske inte att skriva ett generellt dokument för alla typer av gränssnitt i... en massa år fram. Det kanske vi gör, men då kommer man ju onekligen att tänka på sådant som webcomponents. Webcomponents, jag tycker också, där är det också lite svårt för jag tycker när man läser en webcomponents så är det också ganska polariserande. Man hör liksom Use the platform-gänget och så hör man eller framework-authors. Det är liksom de två lägenheterna. Jag tycker det blir lite svårt, för det känns som att det är därför jag har varit lite försiktig med att att skynda mig in i det för det känns som att vi jobbar ju ändå i huvudsak med React Då vore det ju synd om man ska behöva hoppa igenom en massa loopholes för att webcomponents i React ska samspela. Ja, men det är det ju hur. Och webcomponens låt är ju så bra på pappret, men är det så bra i praktiken? Man kommer till alla komplexa detaljer som Shadow Dom och hur lirar ramverken och domen egentligen. För många av ramverken går ju liksom en annan väg när det gäller hur de renderar appar. Ja, precis. Som är lite mer, ja vad är det man kallar det, typ så här lazy rendered medans domen traditionellt är eagerly rendered liksom och då är det såhär samspelade verkligen och såhär visst, det kanske är liksom, jag har nog inte helt satt mig fullständigt in i det men det är definitivt någonting som vi har lust att titta på lite sen. Och det kan ju hända att delar av utbudet av komponenter funkar kanon som webbcomponents. Om de är liksom längre... De är ganska enskilda. Det är liksom ingen komponent som rappar en massa annat, utan det kanske är typ en date picker. Eller någonting som är liksom en leaf node typ i hierarkin av alla. man i ekosystemet bara i Sverige av andra designsystem och det gör vi ju liksom själva mycket också det finns ju Liksom i Arbetsförmedlingen och SJ har vi inspirerats ganska mycket av. Ah, så de kan vara surfa in och titta på? Så de har gjort ett bra arbete och det kan man hämta mycket inspiration från. Men tar man vissa andra så... Jag ska inte svära på hur de gör kring det, men vissa andra kör ju 100% webcomponents. Jaha, de gör det. Det funkar säkert jättebra, men jag tror att vi får ut forskare i framtiden helt enkelt och se vad det är. Sen vet jag inte, det är ju liksom inte helt otänkbart att landskapet ändrar sig lite grann heller nu när AI är på stort intåg och utvecklingen går så pass snabbt som det gör. Det sa du ju precis innan vi började spela in här, att det kan ju mycket väl komma att påverka. Vad ni bygger och vad man gör och hur och det var en sån grej som jag inte hade slagits av förrän du sa det. Jag vet inte om jag hade slagit sig av det själv för några veckor sen heller, men vi har pratat lite mer om det för det har ju säkert inte gått någon förbi att det hände saker på AI. Och kanske från utvecklarperspektiv så har man ju traditionellt... Man har kanske tänkt på såhär, men vad betyder det här för mig? Vad betyder det här för mitt yrke? Men om man bortser från det så tänker jag att våra användare som vi bygger tjänster och appar för idag Hur ser deras interaktion med de apparna ut i framtiden? Delar av det kommer ju säkert att övergå till att vara någon sorts assistent. Man kanske pratar och ber om eller tjattar eller någonting. Så vissa sådana här stora komplexa flöden, så här deklarationer eller liksom du ska ansöka om bolån eller vad det nu är, Det kan ju vara ganska omfattande och komplexa formulär. Det kanske är någonting som skulle vara jättebra som ett chattflöde i framtiden. För då kan du ställa frågor under tiden om det är någonting som du undrar. Ja, just det. Men sen tror jag i personligen att vi kommer ju säkerligen att ta kvar grafiska gränssnitt för diverse grejer. Men det är också så att i våran interna produkt och dess framtid så blir det ju någonting som man har kommit underfund med nu, att det här måste vi ändå tänka på. Ja. Hur ser framtiden ut kring det liksom? Ja, just det. Vart är vi på väg? Det finns ju liksom, vad är det de kallar det? Computer vision. Visserligen så är det faktiskt då typ att datorn tar skärmdumpar och faktiskt navigerar och då behöver vi ju ändå ha ett gränssnitt som det är ju bara bra då om det är tydligt och tillgängligt. Ja, men exakt. Tillgängligheten lönar sig igen. Ja, men exakt. Ja, men det är klart. Det måste väl kunna finnas någon aspekt också där det blir... Ja, men andra interaktioner som gör att man kanske vill presentera saker på andra sätt. Det kanske får ett annat behov av visningskomponenter som kan visas tagna ur sitt sammanhang. Det är inte så att vi inte har ett jättestort formulär, men jag vill presentera resultatet och då har jag resultatkomponenten, men jag har inte resten av informationen runt omkring. Man kanske vill integrera inmatningsfält i det här flödet också för att istället för att allt hela tiden ska vara en fritext och typ en GPT-rapper så känns det som att det kanske är en mix av båda världarna. Men jag tycker att det är svårt att veta vart vi är på väg och det blir väldigt spännande att se. Och det är väl lite så som vi snackade om innan, att man får försöka liksom vara snabb på att... inte sitta inlåst i. Nu jobbar vi med det här i två år och sen så ser vi hur det blir när det är klart. Att man är snabbrörlig och håller örat mot reelsen. Ja, exakt. Det blir nästan mer intressant när man tänker så också, när man inser att det kan komma sådana grejer. Det finns fler aspekter att tänka på än bara de som man har. Framför sig precis nu. Ja exakt, och det tror jag väl gäller om man går in på temat med AI och utveckling också. Där tycker jag också att det är lite svårt att veta. För precis som i webcomponents är det också ganska polariserande åsikter om det. Det är liksom all in eller all out typ, och vem ska man tro på? Har de som är åt det ena hållet i det andra hållet ett incitament kanske att säga eller så? Ja visst. Jag själv har ju, vi har ju använt AI framförallt under en längre stund nu för dokumentation. För att försöka hitta ett konsekvent och professionellt språk, men också lite bland canvasgrejer, att man får... som gör det här. Ge mig ett utkast och så tar vi det därifrån liksom. Ja, just ge mig något som börjar med. Nej men, och jag tror att min personliga resa när det gäller AI-assisterad utveckling Man har ju fått den här wow-faktorn och sen har den på något sätt efterföljts av en, ja, typ att den kör fast och man bråkar med den här AI för att komma framåt men ju mer man fortsätter, ju mer ute på hallucinationer blir det. Ja men exakt, exakt. Det är en väldigt bra beskrivning. Som att man kommer till och man förstår ju att liksom när den när den har den här chain of thought-grejen att den kan liksom typ ...prompta sig själva, prova, outcomes och så vidare, så förstår man ju att resultatet blir mer träffsäkert. Men det känns ju någonstans också som i slutändan att hur de fungerar gissar sig ända till vad som är rimligt att göra härnäst. Så att det känns som att hittills så har jag fått några sådana där wow-faktorer men ändå känt i slutändan av när det har gått såhär två dagar Den lilla honeymoon-facen är över, men då stöter man på de här friktionerna och där det tar stopp. Ja, men exakt. Och det tar stopp på ungefär samma stil som sist. Fast på den lite annan. Nej, jag känner de väldigt mycket så också. Och samtidigt så pratar jag ju med folk, ja men vi genommedlar dem som verkligen, det känns som att de verkligen har hittat Arbetssätt ihop med AI som verkligen funkar för dem Och de blir genuint mycket snabbare på att göra saker och jobba på det sättet. Det kanske är arbetssättet som inte alls passar mig för att jag är gammaldags och vill sitta och titta på koden utan att bli störd av förslag vi inte är i eller... Jag tror också att i någon grad så kommer väl det här, man kommer väl nästan att vara så illa tvungen att använda det för att behålla en viss produktivitet kanske. Sen så tror jag inte att man behöver förlita sig på det helt och hållet. Nej, det är ju frågan. Precis, det är frågan, vem vet. Men jag tänker så som för min del. Jag jobbar ju vim och jag tycker det, eller neovim specifikt. Jag älskar ju liksom det att skriva. Jag tycker att det i sig är så kul. Men när man jobbar i terminalen så är det inte nödvändigtvis så att det inte är där nyfunktionalitet kring det här kommer först. Ja okej men ska jag testa något nytt jag tar det här för att prova allt men liksom jag Jag tror att jag delar din åsikter. Jag vill ju typ sitta utan distraktioner och bara få göra det som... För det ger mig glädje liksom. Ja, och samtidigt så är det ju onekligen så att när jag har copilot påslagen i Visual Studio Code Jag vill ju kanske egentligen inte ha så mycket intelligensen, men däremot att den ibland funkar som en väldigt mycket smartare autokomplettering. Så det är väldigt balansgång. Det är både störande och lite hjälpsamt samtidigt. Ja, men exakt. Det är intressant. Men det kan vara mycket frustrerande också. Ja, visst. När jag menar mer cyniska hummar så kan jag tänka mig att om tillräckligt många går tillräckligt hårt in på AI-utvecklingen som är hantverksmässigt skriven, blir mycket mer förutsägbar. Det är väl också en av aspekterna att producera kod kanske är en aspekt i sig, men se alla de här bildgenereringarna. Det är ju inte som att du får samma resultat när det är samma fråga, så det blir ju lite svårt att liksom, vad är det egentligen som kommer ut, det kommer säkert funka. Men det är liksom, det är där i den ballparken. så tror man att det är detsamma och så har plötsligt allting runtomkring ändrats. Nej, exakt, exakt. Men jag tror att det kommer väl att vara viktigt att fortsätta vara nyfiken på det i alla fall. Så att man liksom inte frånskriver det helt och hållet. Så använda det till en rimlig grad där det känns som att det gynnar en och inte att man bara till slut sitter och men det kanske vem vet, vem vet vart vi är på väg. Få med innan vi avslutar för idag. Jätteintressant. Ja nej, jag tror inte det. Jag tror vi har varit inne om det mesta som jag har tankarna. Det är väl i så fall, jag tror att det finns några länkar som vi kanske skulle kunna lägga in i någon beskrivning. Ja men exakt, jag lägger ner massor med länkar, inklusive till SJs designsystem också. Jag tycker att det är trivsamt att de har gjort en site för sitt designsystem som bara visar komponenter, men den känns samtidigt 100% SJ, så de har verkligen lyckats få till en enhetligt känsla på det på ett ganska stiligt sätt. Ja men det är också såhär, det är lite powermove att liksom lägga sig in i sådant system publikt, det känns som att såhär, vi hade säkert också kunnat tänka oss att göra det i framtiden men vi har inte vågat göra det ännu, det har inte liksom förutsett tillräckligt såhär skyltfönstervänligt material kanske. Nej, jag kan helt förstå resonemanget. Men som sagt, vi länkar in sådant också, och om du kommer på några fler grejer som vi borde länka med så tar vi med dem också, så har folk massvis att titta på. Tack så jättemycket Johan för att du ville vara med. Ja, tack för att jag fick vara med! Tack för att just du lyssnar på KodSnack. Om du vill stödja oss, varför inte tipsa en bekant om podden? Eller lämna en recension i till exempel iTunes, eller något annat ställe där går att sätta betyg på poddar. Du kan också stöda oss genom att köpa oss en kopp kaffe på Ko-fi. Ko-binde-se-k-fi.com snesekod-snack. Alla pengar går direkt till att göra podden bättre och trevligare. Du kan också komma och hänga i vår Slack-kanal. Länk finns på kodsnack.se, precis som alla andra länkar och all annan info kopplat till varje avsnitt. Sist men inte minst finns det också en länk till vår spreadjobbutik där du kan köpa tröjor och andra prylar med kodsnacktryck.