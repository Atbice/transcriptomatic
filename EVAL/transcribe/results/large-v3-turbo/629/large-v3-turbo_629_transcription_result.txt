Jag tror verkligen att om du knappar runt i det du utvecklar lokalt med tangentbordet och ser till att du kan komma åt allting, du kan fylla i allting och du öppnas någon modal eller någonting så sitter fokus rätt och du hamnar inte plötsligt bakom Modalen, när den stängs Så är du kvar där du var Du behöver inte navigera genom hela hållet igen och att kunna slå igång en skärmlösare i 45 sekunder och bara liksom det känns som att det make a sense för mig då märker det förmodligen hyfsat sens för andra målet är inte att man ska täcka hundra procent av alla problem som kan uppstå utan det är bara Liksom Få de lågt hängande frukterna. Helt enkelt. utan att behöva göra det separat. gör man det redan i den lokala utvecklingen då kanske majoriteten av det som finns i någon läskig, lång kravlista som är liksom två kilometer lång Då kanske majoriteten av det är redan löst. Hej och välkomna till Kodsnack. Jag heter Fredrik som vanligt och idag har jag med mig Johan. Hej Johan! Vem är du? Vad gör du? Jag är en utvecklare som jobbar på SBAB till vardags. Där sitter jag sedan relativt nyligen i ett nystartat designsystem-team. Men jag har varit där i ett antal år nu. Jag tror att vi är inne på det sjunde året. jag har gjort lite annat under min tid. Jag tror att det är mitt tredje team. Eller jag vet att det är mitt tredje tid Ja, det skulle jag väl kunna säga. Men, ja, precis. Så det är lite det som vi sitter med Och vi jobbar ganska mycket också med tillgänglighet. För det kommer ju ett nytt tillgänglighetskrav eller tillgänglighetsdirektiv just nu. Just det. Så det tar upp väldigt mycket av, inte bara vår uppmärksamhet utan hela utvecklingsorganisationens egentligen. Ja, så ni har ett designsystem-team nu, var det så? Hur kom du till det? Har du varit inne på designspåret och kommit in på det teamet eller kommit från något annat spännande håll? Jag har väl varit intresserad av Designspåret lite grann en gång i tiden förrän 15 år sedan så tror jag att jag trädde in i utvecklingsvärlden ifrån att ha lekt Lite grann med design Det ligger någonstans i ryggmärgen även om jag inte är en designer eller UXare på det sättet men jag tror väl att jag tycker ju att i de allra flesta tillfällen Men så tycker jag att den tekniska biten av det är det mest intressanta. men lite bakgrund kring det är att vi Vi har ju på jobbet och så är vi väl, just nu så är vi cirka 20-25 stycken utvecklingsteam och jag har fått lite siffror här 135 stycken utvecklare och testa det. Där jag tror att Så det är ett par stycken Ja och det är ju, jag vet inte men majoriteten är ju utvecklare då och vi sitter och jobbar på lite olika sätt och det ändrar ju sig lite över tid också men man jobbar ju ganska autonomt och man jobbar i ganska många olika appar, vi har haft lite olika sätt hur vi liksom levererar frontend-applikationer Både internt och externt till privata kunder företagskunder och allting sånt och det har varit väldigt många appar och de har ju en tendens att liksom bli lite utdaterade och man kanske kopierar en lösning som man gjorde där och sen så klistlar man in till den nya appen och ser man ändringarna där och så blir det ju inkonsekvent tillsläppt. Så det var väl egentligen så det började 2018, hur många år sedan det nu är. Det börjar bli Det var typ sju år sedan Ja, precis. Jag skulle säga tre. Ja jag skulle också säga Jag lade efter det liksom Mars 2020 är ju ändå samma år. Ja men exakt exakt. Nej men så då började vi lite inofficiellt, helt enkelt. ett gäng utvecklare som satte lite olika utvecklingsteam vi lyckades få att vi kunde sitta typ en eftermiddag i veckan eller något sånt. Ja men tar och programmerar lite grann Rent från allas eget intresse, så att säga. Ja, man hade ju sett det här behovet och sen så tror jag att Sedan dess så har vår design- och UX-avdelning också växt ganska rejält. men på den tiden så var det inte lika många så men vi hade ju ändå rätt nära dialog med dem och de såg ju om några det här problemet Det kändes ju verkligen som att det finns ingen röd tråd någonstans. nej men så då började vi liksom bara se så här Men vad är det vanligaste? För vi har ju inte heller liksom fått någon commitment på att underhålla det här enligt liksom något strukturerat. Så då blev det väldigt mycket handlar om formulär vi ska samla in data i ansökningsflöden och man ska göra överföringar och allt vad man nu gör. Så vi började i den änden egentligen. Och bara försöka vi vet inte nödvändigtvis vad som är rätt, vad som ser rätt ut men det viktigaste är kanske att det ser likadant ut. vi gjorde ju ett litet bibliotek egentligen som vi distribuerade med en internt med NPM Registry. Och sen så visste vi ju då att det kan ju om vi fokuserar mer på API-t och inte tänker så mycket på att skylta med några detaljer kring luckenfil så kan vi ju ändå ganska flexibelt uppdaterade över tid när vi vet mer om vad som är rätt visuellt. så det var så det började och det har ju egentligen hållit på så sedan dess fram till Q2 i 2024 så första april där i krokarna så satte vi officiellt igång ett team. Men det här projektet har ju levt, eller projekt Jag vet inte vad man ska kalla det. Det har ju levt lite inofficiellt Så det har ju varit så här, periodvis har man hunnit jobba lite mer på det, och periodvis har man inte hunnit jobba någonting alls på det. Men det har ju ändå varit i användning hos ett antal team sedan 2018. Så det var helt enkelt ett NPM-paket med UI-komponenter? Ja, exakt och ganska begränsad dokumentation i anslutning till det då. Så sättet som det skiljer sig idag är ju att vi, det är ju ett helhetsgrepp mer kring, alltså designsystem omfattar ju mer än bara kod och design egentligen också man kan ju dra det till att det kan handla om copywriting, bildmaner och alla möjliga grejer. Och det där har vi inte riktigt en lösning för ännu, men på sikt så hoppas vi att vi ska kunna centralisera det även om vi inte själva står för innehållet nödvändigtvis så ska man inte behöva liksom, ja men vart finns det här? finns i sjön. Och så får man leta upp det Utan att man mer kanske kan ha en samlingsplats där man hittar både dokumentation och relevant information som utvecklare och designer. men man kanske kan hitta till relaterade resurser också Även om inte de är skrivna där. Ja, för det var ju en sån intressant grej kände jag när jag började fundera inför vårt snack. Just det där med liksom Hur stort eller litet paraply är ordet designsystem? det känns som att på ett sätt så kan det bli hur brett som helst nästan och det finns väldigt mycket nyttigt som man kan baka in under det som du säger hur skriver man text? Det kanske inte är det första man tänker på men det är ändå en grej som dyker upp när det gäller att få saker att se ut och kännas på samma sätt över en massa olika saker man bygger. Ja, jag tror att du och jag jobbar ju på relativt liknande, med liknande utmaningar. bygger en del, använder upplevelser i front-end-applikationer. Ja men precis, och ett helt gängt team som gör saker som Ja, men i en idealvärld skulle det nog se ut att fungera ganska exakt likadant i många fall. inte alla men många just det här med copy till exempel det känns ju som att det beror lite på jag tror att en intressant grej som vi kanske kan komma in på är hur vi arbetar att samarbeta med våran UX och designavdelning nu och de som är faktiskt dedikerade resurser i vårat nya team Men historiskt Så känns det som att det inte är helt ovanligt att det blir lite vattenfalligt. vi kanske sitter i en pipeline där man har så mycket i pipelinen att utvecklarna sitter liksom helt fokuserade på det och då blir det lite så att typ affärsanalytiker och UX-are kanske då springer före på nästa grej. och så blir det lite mer av en överlämning än vad man kanske skulle önska alla gånger. och då är det ju ganska klassiskt då att man till exempel Vad händer om det blir fel då? om man nu försöker skicka in det här och det inte funkar för någon downstream-tjänsten nere. då är det liksom också så här Det är ganska vanligt att man inte nödvändigtvis har tänkt på det i typ en designleverans Och då är det ju jättevärdefullt och ha lite riktlinjer kring det och att vi kan försöka hjälpa till att det ändå blir konsekvent och att man kan liksom, man behöver inte vara expert på copywriting Utan man kan liksom bara hitta lite resurser Och sen räcker det kanske en bra bit på vägen men jag tror att man kan att fånga en del lågt hängande frukter på att vi kommer framåt utan att vi behöver fråga någon annan avdelning och hjälp typ. Ja, det har varit jätteintressant att utmana det här med kommunikationen eller flöden av att få saker gjorda och ta tid. som du sa precis i början där det är väldigt lätt att man har med det där läget att Ibland blir det lite gjort och sen går det en jättelång period och ingenting händer för att... Man har 17 andra saker som Kanske både är och framförallt bedöms som viktigare just då. Ja, och det kanske man, alltså nu vi har ju hållit på med det här nu Vi konstaterade att det var mer än tre år. Nå? och det känns som att få ett commitment på att kunna göra det här också Så där har ju det här tillgänglighetsdirektivet varit, det var ju lite det som var det var det som fick skjuts i den prioriteringen. för det är ju också så att Det är ju en av våra stora fokusområden är ju just tillgänglighet och försöka dels baka in tillgänglighet där vi kan. om det är då i vårt komponentbibliotek sen finns det ju delar av tillgängligheten om hur ett helt flöde hänger ihop som är svårt att bara automatisera men det är ju en av de grejerna som jag tror fick organisationen att liksom gå med på att ja men nu startar vi teamkring. Jag har nog personligen velat ha ett team kring det Alltså i alla de här åren nu Ja. men det nu har det egentligen skett, för det är ju så Att såhär tillgänglighet är ju viktigt, men jag vet inte man har kanske inte riktigt insett det, eller att man har tänkt att det är viktigt men det måste ju också konkurrera Med andra projekt och då finns det ju liksom, alltså i bankvärlden så är det ju massa regulatoriska grejer och det är kanske stora systembyten och då är det ju ibland svårt och liksom, ja det här är viktigt Men tyvärr, vi hinner inte Nej, precis. Det är fortfarande bara näst viktigast. Ja men exakt Och det kanske är liksom jag tror att drivet av vår UX-avdelning så har vi ju ändå jag tror att det var, jag har skrivit ner lite siffror och lite information här 2019 så började vi jobba lite mer dedikerat med tillgänglighet. Men det blev då har vi ju samarbetspartners som är experter på det som kommer in och hjälper oss och så gör man en typ av analys och översyn över våra flöden. Men då blev det lite mer punktinsatser. Så jag tror inte vi lärde oss tillräckligt mycket för att ta det vidare nödvändigtvis. Utan man gjorde någon review och så åtgärdade man lite fel där. jag tror inte vi lärde oss mindsettet hur vi ska Utveckla tillgängligt Utan det är drevs nog mest av enskilda individer, typ eldsjälar. i de olika teamen. Så det vi försöker göra nu tillsammans med det här projektet som då drivs parallellt som är tillgänglighetsprojektet egentligen. det är ju att försöka få lite mer långsiktighet i det. och inte se det som ett projekt som tar slut utan att vi måste få in det i vårat arbetssätt, mer och process. just det, ja precis och det är själva teamet för designsystem. Hur stort är det ungefär? Ja vi är alltså då Just nu så är vi två ut Eller just nu Vi har Vi har samma uppställning sedan start. Två utvecklare är vi som har varit med och inofficiellt petat på det här prosjöet. det som fanns innan. och sen så är vi faktiskt vi är typ Tre UX-are. en av våra UX är ju en fulltidsresurs som är liksom fokuserade på designsystemet. Två av dem har lite andra åtaganden också Sen är vi en produktägare Och det tillkom ju i samband med att vi startade teamet Och tycker jag är kanon för man är inte nödvändigtvis alltid så bra på det som utviklar det kanske. Nej, men du är det, du är det. Man verkar skillnaden när man har en bra produktägare på plats såhär, jaha, oj vad mycket mer rakt på sak och tydligt Vissa grejer blev jag plötsligt. Ja, nej men exakt och bara liksom att vi håller rätt riktning och inte, ja, för jag menar som utvecklar Du känner, du kanske är likadant men att det är ganska lätt att ramla ner i lite såhär Kaninhål ibland Jo jag har gjort det en gång kanske Ja, jag har nog också gjort det en eller två gånger Och sen en teamchef har vi Så vi är väl, ja, vad blir det? typ fem. vi är vi är och man får en skjuts ja Nej, men så... Det är ganska roligt Eftersom att det är ett nystartat team och vi har ju inte, vi har ju kvar det här som hade tagits fram officiellt innan, men vi har ju inte så mycket legacy, utan det är ju väldigt mycket liksom, det är ju väldigt mycket Greenfield egentligen Och man får ta reda på ganska intressanta grejer vi vet ju att vi vill göra underlätta för våra utvecklare och designkollegor framförallt. och det övergripande målet handlar väl om att vi vill bidra till att bli effektivare produktutveckling sen så vill vi ju göra den här gamla, det som startade initiativet från början att se till att det blir en konsekvent användarupplevelse och att vi liksom följer våran branding och att det ska bli lätt att göra rätt på det. Och sen är det ju då tillägghet som är. men det som är intressant är ju att vi har ju fått ja men vi har ju fått liksom upptäcka Hur ska vi jobba i den här konstellationen med den här produkten, för det blir ju en internprodukt. Ja, ja visst. Och det är ju väldigt kul eftersom att du har ju dina slutanvändare in till dig. Det är väldigt mycket feedback men då har vi ju liksom fått prova oss fram och vi jobbar lite grann i kvartal då. och det känns som att vi provar rätt arbetssätt och sen så behåller vi det som känns bra. Ja, just det. In i nästa kvartal och så kanske vi skruvar på något annat. Ja, just det. På senaste kvartalen så har vi i alla fall vi jobbar i två stycken arbetsmöten per vecka där vi försöker Sitta hands-on och jobba tillsammans Både utvecklarna och UX Och det gör ju att det här samarbetet mycket tätare än vad det var i åtminstone i de timen jag var med innan. Och då känns det som att man kan ta vissa beslut som träffar både vår kodbas och våran, i det här fallet Figma då Och det känns som att det har varit väldigt värdefullt Men ja, så ser teamet ut Ja, just det. Och det är så ni jobbar arbetsmöten, två stycken och sen så jobbar man mer. på varsitt håll resten av Ja, jag tror att det är lite... Det är ju lite, speglar väl, hur utvecklingsteamen jobbar också. Så nu har ju jag... Vi jobbar ju inte med de vanliga produkterna på samma sätt så jag kan väl inte svara exakt för hur genomsnittsupplevelsen... Utvecklingsteam. Men man är ju autonoma, så man får ju liksom vi vill ju jobba agilt och så alla team har väl i princip sin egen twist på vad det innebär med ceremonier. Vissa kör någon kanban-variant och andra kör sprintar Ja men visst, det finns alla Vad som passar just det teamet Det känner jag igen också. väldigt svårt. Ja, men precis. Men hur det Vad liksom äger eller driver eller kontrollerar era team kontra andra team. Jag tänker så här Att ni gör en del komponenter förstår jag ju, här kommer en standardkomponent för att göra den här saken Blir det då att man liksom drar in drar in nya komponenter som så att säga tillhör det inom citationstecken ett annat team förut eller hur funkar flödet mellan er och övriga team. Dels så fanns det ju ett antal komponenter som vi då förvaltar vidare och utvecklar Och det andra handlar vi om att försöka liksom snappa upp vilka behov vi har och att inte nödvändigtvis kommitta allt för långt fram i tid utan att försöka vara lyhörda och liksom snabbrölja. men komponenter är väl en ganska central del i det. Vi har fokat ganska mycket på dokumentationen kring det också. Det är en bra grej. Jag tycker personligen lite grann att det är lite en first class citizen i den leveransen också. så att det är inte bara så att Det finns en hink med komponenterna. varsågod, to figure it out. utan att man får försöker ändå ha det i åtanke Och i och med det så får vi ju liksom bygga vår egen pipeline med hur vi levererar vår produkt. Våran produkt består ju på kodsidan av bibliotek som man lyfter in via NPM. Just det. Och sen så består den i tillägg av dokumentation. och det har ju också varit en annan lite kul grej för det har inte nödvändigtvis funnits en färdig pipeline för det för de andra teamen har inte riktigt haft det behovet. Så där har man ju fått vara med och bygga upp det enligt de behoven man har. och det blir lite andra saker att tänka på där med att det här ska ju versionshanterat hanteras och versionshanteringen är ju någonting som är väldigt viktigt för att säkerställa att det blir stabilt i länken att man inte... Vi försöker ju förhålla oss till semantisk versionshantering och att man ska kunna lita på att saker och ting funkar och om någonting har breakouts så ska man få reda på det och kunna ta hans syn till det. Men annars så är det ju alltså jag tror att det där är också lite grann i rörelse. vad är det vi kommer att äga som team, vad är våra produkt är det egentligen och det finns ju ganska mycket material som är utspritt på någon kunskapsbankör och sen så finns det något externt CMS där för något enda mål så jag tror i nuläget så är det mycket fokus på tillgänglighet så jag tror att jag tycker att det är lite intressant och spännande att jag vet inte riktigt exakt Hur det kommer se ut Jag tror att vi kommer försöka se till att lyssna på våra användare och forma det därefter. Det är väl då det blir bäst också Ja, och tillgängligheten om vi ska gå in lite mer i detalj på det så är det ju för dem som eventuellt inte vet det då så är det ju ett ny lag. Så den träder i kraften 28 juni och det här vet jag att de som har varit drivande, de har ju sagt ja men förr eller senare så dyker det där datumet upp för fem år sedan så kändes det som jättelungt bort. Ja, ja, visst, precis. Men nu är det ju all hands on deck Se till att vi liksom Och det är väl en, man kan väl säga att det är väl en vidare utveckling av de lagkraven som redan gäller för offentlig sektor som man har varit inne på myndigheter och sjukvård och sådär så har ju de redan mycket av de här kraven och nu utökas det till att Gälla privata aktörer också Ja, okej. Så från ett visst håll kan man se det som en breddning av någonting som redan fanns. Ja, och sen är det väl det är också en gräns alltså vilka som omfattar sig också lite Det är lite luddigt Och här vill jag brästglappa lite grann också. Jag har ju försökt, liksom känner att jag jag har någorlunda koll på det här. Men det känns som att när det gäller alla de här Bara att ta av det jag säger men det är passant påstår att så här funkar det Och sen så kanske jag har missat någon paragraf. Nej men precis, allt det här är vår uppfattning utifrån det som vi har hört och sett och sådär Vi är inte lagtolkare. Nej, jag har försökt koka ner det till pragmatiskt. Vad är det som gäller? Just det. typer av tjänster egentligen som omfattas av det här och det kommer ju på sikt att utökas till flera så träffas man inte av det här i nuläget så kommer man säkerligen att göra det inom relativt snar framtid Och det betyder i praktiken att det finns ju en europeisk standard som är till för tillgänglighet och inkluderande i EU. Och en av aspekterna, de allmänna kraven som man omfattas av, det är ju de här VCAG som är någon sorts spes för, som spesar upp så här. Det ska funka så här, helt enkelt. Och färgkontraster och allt vad det är Sen finns det lite branschspecifika krav som beroende på om man är i för bransch så kan det vara extra saker som man måste tänka på. i vårt fall då som bank så omfattas vi av begripligt språk. Och det betyder att det är liksom det ska vara lätt att ta till sig innehållet. Det ska åtminstone finnas möjlighet att om någonting står på massa fact-termer så ska man ju också kunna se det på något sätt som går att begripa Även om man inte nödvändigtvis är i finansbranschen. Det är ju faktiskt ett underbart krav. Ja, jag tycker det också Och jag tycker att, alltså sen är det ju så att de bästa lösningarna för det här är ju lika tillgängliga för alla redan från början, så att det inte blir så här någonting man bara lägger ett lager på lager Nej, men exakt. Vill du ha lite mer till in Då får du slå på det här läget. Och sen är det lite administrativa krav så omfattas man av det här direktivet så måste man också arbeta med dokumentation och rapporterar sina tillgänglighetsbrister. Och då finns det någonting som kallas för en tillgänglighetsredogörelse som man behöver ha då. Och det är typ en listening någonstans på sin sida som hålls uppdaterad på det här är de bristerna som finns, typ förklara varför och länka om det finns något mer tillgängligt alternativ och lite sånt där då. Och sen så tror jag också att man behöver nog ha en kommentarsfunktion så att liksom användare av din tjänst ska kunna rapportera in det här, om de stöter på något. Så det är egentligen lite grann visa Vi är medvetna om vad vi klarar och inte klarar och att vi jobbade på det. Ja, precis. om man nu kommer till vad det får för påföljder ifall man inte uppfyller de här kraven så tillgänglighetsredogörelsen är nog en ganska viktig del i det vi är medvetna om det Det vill bli... via på bollen typ. Just det, lite sådana här jag för mig att det fanns någon slags relaterad känsla i vissa delar av när man GDPR var på tapeten och höll på att införa så att Ja men alltså en grej var att det fanns ju jättestora stränga påföljder men det fanns också en ton av att visar du att du jobbar aktivt med det här och rapportera när ni har problem så kommer det liksom Ja, men det gäller att visa en rätt anda också. Ja, men exakt. Så tolkar jag det i alla fall Ja men precis Det känns ju lite som att Även om jag tror att man förväntas väl vara compliant med det här när 28 juni inträde. Så går det ju säkert tillsammans Men vi har inte hunnit helt enkelt. om man kan visa Det här är det viktigaste i det här sammanhanget. vi kan visa att vi har tagit det och att vi håller på med resten Ja men exakt, exakt Och sen så kanske man kan komma till den punkten om vilka omfattas då. det tycker jag verkar lite svårt alltså det är lite av, i vissa branscher så känns det väldigt tydligt typ e-handel är ju en utav dem som omfattas av det här. Ja, det är rätt lätt att veta om man är i handel eller inte. Exakt, och banktjänster Det känns också rätt lätt. Men sen är det så här, elektroniska kommunikationstjänster och det är också såhär Det finns lite exempel. jag tror vi kan säkert lägga in några bra länkar i beskrivningen också Ja, det får vi göra. det finns ju från Post- och telestyrelsen så har de någon sorts introduktion till EUs tillgänglighetsdirektiv och då säger de elektroniska kommunikationstjänster som till exempel uppkoppling och abonnemang, telefonsamtal, e-post sms, chatt, videosamtaltjänster men det är ju liksom, det kan säkert vara fler Ja, jag tänker det här. Det kan nog bli ganska brett. Ja men exakt, och sen såhär streamingtjänster medietjänster typ, det är väl en av dem och sen så är det vissa tjänster för persontransporter Vissa tjänster. Ja, så det lämnar ju utrymme för tolkning Banktjänsten nämnde vi E-böcker behöver vara tillgängliga och e-handelstjänster. Det är ju en ganska stor sektor som som omfattas. Sen är det, så tror jag att det är vissa såhär fysiska typ Alltså om man har betalningsterminaler eller olika typer av automater så tror jag att de också omfattas. Men jag för mig att jag läste någonstans, att har man liksom en sån fysisk grej ute så tror jag att det finns någon regel kring att om den står där idag Så kan den stå kvar tills den är en viss ålder Eller något sånt Ja, det känns ju Zahnsats. Man kan säkert Liksom försöka liksom utbilda sig i om man omfattar sig eller inte, men jag skulle väl förespråka att man kanske ändå tänker på tillgängligheten. för jag vet inte För mig så har det varit lite grann jag har inte riktigt varit inte så bra att tänka på tillgenligheten historiskt men ju mer man har fokuserat på det så har det ju låst upp lite grann. Det är typ ett nytt gränssnitt I din app Ja det är det som är så spännande när du får in vanan att liksom, ja men jag kan jag har kort kommandot För att starta skärmläsaren jag kan de vanliga navigeringssätten då är det så här då får du helt plötsligt ett nytt gränssnitt för din app som man kan se till att få en bra användareupplevelse på. för mig i alla fall så är det Jättemotiverande Jag tycker det är jättekul att ändå För det kan ju vara helt förfärligt det finns jättemånga roliga exempel när det liksom är såhär, ja men du du kan typ hoppa igenom 48 element som bara säger bil, bil, bil, bil Det är ganska svårt att veta Vad är det då liksom? Ja men exakt Så jag tycker att det känns som att Det är ju viktigt utan tvekan. men det är också någonting som som jag tycker är roligt Det känns som att man har låst upp en ny liten dimension här i sitt utvecklande och vad man levererar när det gäller bra vännerupplevelser. Ja, men exakt. exakt, om man får lite trevliga incitament att bygga saker på mer genomtänkta sätt och sådär man gjorde första versionen av sin webb webapplikation och så är allting en div med olika styling på. och sen kommer jag på att att ha en A-HRF en vanlig länk. Ibland är det inte bara bra för att för tillgänglighet Det är faktiskt ganska bra för alla att se att Här är en vanlig länk. Den funkar som en vanlig länk. Den ser ut som en vanlig länk. Nej, men exakt. Alla sådana där grejer. och den går att navigera och har vi gjort det bra att navigera med skärmläsare så blir det ofta bra att navigera med tangentbordet också eller bara kunna tabba igenom saker i en vettig ordning är ju Så här, väldigt nyttigt för precis alla. just det, alltså jag tror att Det är en sån här grej som man kanske inte ens... Man tänker knappt på det när man sitter och utvecklar och när man sitter och utvecklar så blir man lite såhär hemmablind också. För du är ju såhär du är inte nödvändigtvis den liksom tilltänkta målgruppen för den appen du utvecklar Jag ska bara utveckla den Jag tror att man du har ju säkert använt olika system även om de är webbaserade, där man bara säger men fan, alla de här Tajantbords Tabba att navigera med olika sorters kortkommandon eller piltangenter och så vidare. Det bara funkar. Det är ju en trevlig överraskning Och det är ju liksom det skulle ju lika gärna kunna vara defolten. Ja men exakt Det borde vara lite jobbat att sabba till. Ja, och jag tror att för vår del så en utav våra Det som vi försöker bidra med när det gäller utvecklingen är att Alla kanske inte ska behöva vara tillgänglighetsexperter för att vi ska kunna leverera ett bra resultat. Dels baka in det när det Finns? och går. Men också uppmana Kanske till att man har det mindsetet Men redan när du sitter i lokalutveckling tryck igång skärmläsaren Jag tror att man behöver gå någon liten crash course I hur skärmläsaren funkar för den kan vara ganska överväldigande när man sätter igång den Man har ju hört Liksom när den drar igång på 180 kilometer i timmen spottar ur en massa information. Ja visst, det är så proffsen använder den. Ja, och man kan ju ställa in den precis så som man vill. Jag tror att en av de viktigaste, nu sitter jag på Mac Det är säkert lite olika beroende på vilken och då använder jag den inbyggda voice-over men jag tror att den viktigaste tangenten är kontrolltangenten. För den får den att bara vara tyst Den liksom pausar uppläsningen så när du sätter igång den och du bara liksom vill få så här Nu måste jag tänka här. Då kan man alltid trycka in kontroll Innan man gör sin nästa grej Men jag tror att det är nog inte liksom mer än kanske fem 6-7 stycken kommandon man behöver kunna för att kunna använda den effektivt nog för att fånga mycket av de här lågt hängande frukterna. Och då kanske det också är så här gör man det redan i den lokala utvecklingen då kanske majoriteten av det som finns i någon läskig, lång kravlista som är liksom två kilometer lång Då kanske majoriteten av det är redan löst. Ja. Och sen kanske man, de här som är lite mindre problem som är lite mindre Som är lite svårare att upptäcka. de kan man säkert behöva åtgärda ändå när det är någon sorts testprocess eller review senare men jag tror verkligen att om du knappa runt i det du utvecklar lokalt med tangentbordet och se till att liksom du kan komma åt allting, du kan fylla i allting och du öppnas någon modal eller någonting så sitter fokus rätt och du hamnar inte plötsligt bakom modalen. När den stängs så är du kvar där du var Du behöver inte navigera genom hela hela hållet igen och att kunna slå igång en skärmlösare i 45 sekunder och bara liksom det känns som att det make a sense för mig då mickar det förmodligen hyfsat sens för andra. Och sen så är det ju mer också visst är man proffsanvändare av det här, så kan det ju hända att det finns insikter som man själv inte kan ännu. Men jag tror målet är inte att man ska täcka 100% av alla problem som kan uppstå utan det är bara att liksom Få. de lågt hängande frukterna helt enkelt utan att göra det separat. ett snabbt och jättestort Tack till alla som stöttar oss på Coffee. Du kan bli en av dem genom att surpa in på k-fi.com snedsträck kodsnack och slänga iväg antingen en engångssumma eller ett månadsvis stöd. Stödjer oss på nivån kaffedrickare för fem euro eller mer i månaden så får du ett gäng trevliga klistermärken i brevlådan. Stödjer oss på nivån barista för 10 euro eller mer i månaden så får du dessutom, förutom klistermärkena, ett stort tack precis här. Tusen tack till Michelle, Albin Groen, Anders Legel, Brother Ingo och Tobbe Lundberg. Alla ni som stödjer oss hjälper till att göra podden möjlig och ju fler ni blir desto bättre podd kan vi göra. Ibland har vi sponsorer i podden men det är faktiskt ert stöd som gör att vi börjar kunna täcka kostnaderna för podden varje månad. Vill du stöda oss på andra sätt så går det naturligtvis utmärkt att recensera podden i din poddspelare. sätter betyg eller en stjärna oavsett om det är Spotify, Apples podcaster eller någon helt annan app. eller berätta helt enkelt om ett avsnitt för någon som du tror skulle gilla podden. Och just nu Vi har ju precis släppt ett helt nytt sätt att stötta. Vi har ett klistermärke till försäljning. I koffebutiken så finns det ett trepack klistermärken om livet som agil lokförare. Framimproviserat i en milt urspårad diskussionsstråd häromveckan. Visa ett stöd för alla safe-utövare där ute och få den där sköna känslan i magen av att bidra till kodesnacks fortsatta resa. Men kom ihåg, du är en fantastisk person oavsett om du stöttar oss eller ej. Jag antar att det fortfarande gäller att man får rätt mycket gratis att säga och använda standardkomponenter också istället för att finna sina egna. Ja, du tänker på sådär inbyggda element i... Ja, men precis. det känns som en sån här grej som fortfarande drivförbevinning i mina massor av de flöden menar gör inte din egen ersättning för en knapp eller något i onödan utan se till att du verkligen, verkligen, verkligen behövs och då har du rätt mycket att implementera om det ska bli lika tillgängligt som en standard om du går div-hållet så är det definitivt Det finns ju många inbyggda element som är mer semantiska som man kan luta sig mot. Men sen är det ju lite så det beror lite på Och när det kommer till de här tillgänglighetskraven och just VCAG kanske specifikt så jobbar man ju i olika nivåer. Då är det liksom A, AA, AAA. och jag tror om jag inte minns fel här får få kanske rätta, någon får rätta om jag har fel. Men jag tror att den här nivån som man ska uppnå är dubbel A. det kan hända att det skiljer sig lite beroende på vilket typ av problem det är, men AAA är ju då den högsta ambitionsnivån Och jag menar Det kan man ju lika gärna sikta på då. Ja men precis Orimligt Jag har kollat lite på VCAG några gånger och det känns som att Den högsta nivån kan vara ganska utmanande ganska ofta för mig. Ja, men jag tror det är säkert att du har en balans där Så att man inte liksom Ja, men så här Men A var väl ofta ganska rimlig. ganska, man kan säga så här, men det här förstår dels vad jag ska göra och varför och dels hur jag kommer dit och sen dubbel av. Det här är samma fast mer ambitiöst på något sätt och sen så trippade han såhär, nu, oj Nu kan det bli mycket Ja, nej men exakt jag tror att det som du säger stämmer ju hundra procent att liksom återuppfinner inte hjulet om man inte måste jag vet inte, när det kommer till de komponenterna som vi levererar så Försöker vi ju inte återuppfinna hjulet även om det är en komponent som inte nödvändigtvis går att bara bygga Den finns inte i browsern Det kanske är någon lite mer interaktiv komponent Som kräver nu finns det ju liksom ett inputfält för datum men vi kanske behöver ha ett sätt att man ska kunna ange en range av datum och vi vill ha det som en bra upplevelsen som man får om man ska boka en flygbiljett eller hotellnatt eller något sånt där. Exakt Och då måste man ju gå lite utanför vad som finns inbyggt. och det som vi försöker tänka på där och som jag väl kanske skulle uppmana ifall det är någon annan som sitter med liknande utmaningar även om det är så att man det här finns kanske en färdig komponent för i något off-the-shelf-bibliotek ute i ekosystemet. så försöker vi ändå säga Ja, det kanske är rimligt för oss att bara gå på den lösningen. men då sättet vi tänker på det då i att sätta ett eget interface av hur skapar Se ut Och det kan vi säkert inspireras av Hur det ser ut där Men även om det är nästintill en äthetmappning Så är det en explicit vi lägger in det för att då blir det liksom inte är ett implicit beroende på just den komponenten utan då skulle vi ju sen kunna CSR. Men vill vi bygga den custom eller behöver vi bygga en custom eller finns det kommer det en ny aktör eller något nytt bibliotek som funkar ännu bättre så det är väl en av de nyckelstrategierna som vi försöker tillämpa att liksom vad det än är för komponent så är API-t Det är lite heligt. det försöker vi se till att vi har ett uppfattning om hur vi och där är det ju såklart Det är svårt att säkerställa att det blir så, men att Är det liksom intuitivt, är det flexibelt Och flexibelt så menar jag bara är det flexibelt för att vi kanske vill ändra vår lösning under huvuden på sikt då. Jag har en kollega som jobbar rätt mycket med våra komponenter. Vi har ett litet sådant projekt också han har ju sagt exakt samma grejer att vi ska se till att slå in det för att vi använder rätt designbibliotek nu ganska mycket Men hans ambition är ju att allting som vi har som gemensamma komponenter skruva inslaget precis så. så att vi inte blir beroende av det biblioteket för just nu sitter vi stenhårt fast i det en del framförallt i en del äldre projekt att det är så här Katastrof att försöka uppdatera en mail-view. exakt och jag menar det skulle väl, även om du då ta den approachen så kanske majoriteten av biblioteket ändå använder någonting sånt färdigt. men då är det i alla fall Alltså förlitar du det helt och hållet på deras API Då sitter du lite i händerna på dem också nu har vi gjort en ny major-uppdatering som breakar en massa grejer. Då har man åtminstone en chans att Ja men motverka det genom att säga kan vi då, om vi nu inte bara kan byta komponent tillsammans med det kan vi åtminstone se till att vårat API som vi tillhandahåller går att mappa om till vad som än har ändrat. Så det tycker jag är typ en key takeaway i sammanhanget. Och sen när det gäller lite grann så som vi snackade om med Hur vi försöker snappa upp behoven ifrån organisationen. så jag tror ju, och där har vi ju i samband med UX också. Det som är intressant med våra täta samarbete är att man Kommer från olika perspektiv. från kodsidan så har vi ett visst perspektiv och särskilt när det gäller versionshanterade kod som liksom, det finns vissa spelregler helt enkelt. på design-sidan så kanske det inte riktigt har varit lika känsligt med sånt Utan det är liksom då har vi liksom behövt närma oss varandra och liksom synkas insemellan så att vi liksom vi kan inte springa före alla gånger på designsidan eller Liksom bara göra en ändring för det är inte riktigt så det funkar på kodsidan. Nej, precis. Men sen så tror jag att En annan grej som vi försöker liksom vara i synk kring det är ju att man vill ju att det ska vara konsekvent och därmed så vill man att det ska finnas vissa constraints kanske Så att det inte är så att vi kan göra på helt olika sätt Ja, det där är intressant Men jag tycker personligen så tycker jag att under de här åren nu så har man ju ändå både konsumerat ganska mycket innehåll ifrån ekosystemet och ifrån diverse thought leaders och så vidare Ja, min uppfattning är att den här flexibiliteten behöver vara lite större än vad man tror ändå. Ja, någonstans är det alltid någonting. Ja, men det är så trist när du sitter där i din app Och så är det så här Jag behöver måla lite utanför linjerna. Men det går inte Då får jag bara kasta ut allt Och göra det helt från scratch. Det blir ju inte hållbart det heller? Nej, men så På så sätt så ser vi att en viss flexibilitet behöver ändå finnas i liksom alla komponenter och sättet vi ser det på är ju typ att det är lite mer high-level-komponenter och lite mer low-level-komponenter. och det finns ju en herransmassa namn på sådana typer av om det är atomic design eller vad som helst. Vi försöker tänka lite enklare på det att bara så här, en high-level-komponent Det är ett lite mer specifikt användare Liksom ett use case och man kan använda det med ett ganska begränsat Topp i. Det är ganska mycket opinions inbakade. Men det gör ju också att det är ju ganska flexibelt för oss att se till att det fortsätter att funka utan större ändringar. Och sen vartefter vi märker att, för då kan vi lösa kanske 80% av ett visst behov. sen så kommer vi till de andra behoven Och då kan vi utifrån det vi vet då så kan vi börja bryta ner den till lite mera low-level-komponenter. Och då kanske man kan liksom då kommer ofta de här insikterna om oppe i design som hade vi tagit det här valet Så hade vi ju kanske kunnat stödja utan att man går allt för långt ner i framtida behov vi inte vet att vi har. Vissa sådana där grejer blir ändå tydliga. rent intuitivt så känns det som att det här valet hade varit flexibelt även om vi ser framför oss att vi vill göra lite annorlunda också i framtiden. Ja, just det. Men om man säger high level i det här fallet. Är det typ en sån avancerad datumväljare som vi pratade om innan? Är det en high-level eller en low-level? Ja, det är svårt med hur man drar gränserna. Självklart. Men jag skulle se det som... Tänk dig på tabeller, till exempel. och vi har inte supermånga tabeller ännu i biblioteket. men jag bara tar det som ett exempel för där kan man ju se framför sig att en low level version av sådana komponenter kan ju mappa väldigt nära hur det funkar i htmln. Så att du liksom, så att du jobbar med Rose och Header och liksom Olika typer av celler och så vidare men en high level komponent kanske tar en lista av data som den kan Och mappa om till det där under huvudet. Och för ganska många use cases så räcker det, och då är det ganska nice Då kan du använda en komponent, skicka in datan som du kanske måste bara skruva lite grann på så att det passar. och sen så får du en tavell. Och så istället för att Ja visst, då ska jag liksom göra typ 88 rader kod här för att bara göra min tabell med att mappa igenom saker och så vidare. Så det är väl ett exempel Ett annat exempel är kanske att när man jobbar med inmatningsfält i formulär, så består ju de under huvuden av ganska, alltså de är ju rätt nära elementen i browsern som input och så vidare. Vi har till exempel en komponent som är en textfield och då kombinerar själva inputfältet med ett sätt att sätta en label på den och ett valideringsfel så sköt ju den om kopplingarna där finns emellan under huvuden. Så att labeln blir associerad med inputfältet och valideringsfelet också Utan att du som konsument behöver liksom säga, men hur var det nu? Ska den vara ARIA labeled by eller Aria Describe By, ska vi... Sådana saker liksom. Så det är det jag tänker på Men det är ju, jag tror att vi har stött på många gånger att man bara säger, ja men är det här en higher level abstraction till slut så kanske man hamnar i någon Atomic Design ändå. Jo men Kanske både och. det är ju det det är en ständig utmaning att få till den där balansen här kan jag göra en jättefin komponent Men jag behöver skicka in 300 saker till den För att den ska funka Kan jag Kan jag tänka om mig det här så att jag slipper det? Och då kanske man på en sån high level och det är ju också en, jag vet inte vem det var som hade ett sånt talk någon gång, men som pratade just om hoppa i design på någon konferens Man har ju sett exempel på en React-komponent då som liksom har typ 38 props för att man har byggt på vart efter just det, vi måste stödja det här också Och då är det ju bättre att separera det till Helt olika komponenter. så att det blir lättare att underhålla över tid. så det är väl lite av de tankarna och mycket av det är common sense men delar av det har man ju liksom på något sätt absorberat under de här åren som har ändå stött lite mot det här, även om det inte har varit ens huvudsakliga arbetsuppgifter. Nej men precis Det finns ju ett stort värde också i att få Alltså sånt som du säger commonsensgrej att få dem uttalade och utskrivna, det är ju en väldigt stor nytta i sig för att annars är det ju någon i ett team som tycker att något lite annorlunda ägare. Ja men det här är väl common sense och sen har man plötsligt dragit iväg på två spår igen. Fast om det inte var avsikten. En utmaning är ju att som jag nämnde där så vi två som är utvecklade i teamet just nu har ju jobbat med det här innan, så frågan är vad som är liksom inne i våran ryggmärg och vad som Jag tror att det kan finnas en utmaning är ju att försöka få ner det här på ett enkelt och överskådligt sätt att det här är ett mindset som vi tillämpar. för det blir ju svårt jag vet faktiskt inte riktigt var gränsen går vart lämnar det liksom typ ena hjärnhalvan på oss två och vart möter det någon dokumentationssida någonstans, det där har vi säkert ett jobb att göra om man ser till framtiden och att man skulle omborda någon ny eller Någon försvinner och så vidare så försöka liksom de, ja men grundprinciperna som man på något sätt luta sig mot nu, som säkert kan ändras också såklart. men det här är det vi förhåller oss till nu istället för att liksom ha en uppsättning i regler som blir omfattande och komplicerade och granulära så är det så här vi försöker ha några grundläggande principer som vi tänker på när vi när vi tar fram komponenter och vad vi än tar fram egentligen. Ja, visst. Och lyckas man få ner sånt text eller bilder vilket material det nu är. Då har man ju Något som är väldigt, väldigt nyttigt. som du sa innan, allt man levererar inte bara komponenter utan det är den där informationen runt omkring kan ju vara supervärdefull även om den kan vara svår att författa i ibland. Och det är ju också en intressant grej för att ibland våra utvecklingsteam så sitter majoriteten av dem just nu och jobbar i React-applikationen. Och det har ju då pragmatiskt sett varit det var så det började och det är fortfarande så det betyder ju att jobbar man i något annat än React och jobbar man i mobilappen eller jobbar man i något av de andra bolagen som ingår i samma koncern så kan man inte nödvändigtvis ta del av komponenterna För de är ju reaktorspecifika. Så då blir ju riktlinjer och liksom design tokens sånt blir ju desto viktigare och sen så är det ju såklart också jätteintressant att fundera på hur skulle vi kunna brygga gapet mellan olika ramverk och kanske till och med olika plattformar Men hittills, teamet har ju varit verksamt i tre kvartal ungefär nu, så vi har inte känt att det känns inte så pragmatiskt att liksom börja gå utanför till något Trambergs agnostiskt när så stor procentandel av allihopa ändå sitter liksom natively med React. Men det är ju definitivt en fråga för Alltså nära framtid förmodligen. Ja, det är som du säger, det är en lågt hängande frukt igen. Vad är vettigt att börja med? vad får vi stor utdelning på det Ja, och det kanske inte att hitta Och skriva ett generellt dokument för alla typer av gränssnitt. Nej men exakt ser man det, håller man sig på webben och tänker att hur kan vi stödja Vi vill ju förmodligen, eller vi kanske inte vill och kommer jobba med React i en massa år fram. det kanske vi gör, men då kommer man ju onekligen att tänka på sånt som Web Components. och webcomponents där är det också lite svårt för jag tycker när man läser en webcomponents så där är det också ganska polariserade. Man hör liksom Use the platform-gänget Och så hör man framework authors Det är liksom de två lägena Ja, det är det. Jag tycker det blir lite svårt för det känns som att det är därför jag har varit lite försiktig med att skynda mig in i det, för det känns som att Jobba ju ändå i huvudsak med React. då vore det ju synd om man ska behöva hoppa genom en massa loopholes för att webcomponents och React ska samspela. Ja, men eller hur? och webbkomponerns låt ju Så bra på pappret men är det så bra i praktiken? Man kommer liksom till liksom alla komplexa detaljer som Shadow Och dem och hur lirar liksom ramverken och domen egentligen för många av ramverken går ju liksom en annan väg när det gäller hur de renderar appar. Ja, precis. Som är lite mer vad är det man kallar det typ såhär lazy rendered medans domen traditionellt är eagerly rendered liksom. och då är det så här, samspela det verkligen och så här, visst, det kanske är liksom, jag har nog inte helt satt mig fullständigt in i det. men det är definitivt någonting som vi har lust att titta på lite sen. Och det kan ju hända att delar av utbudet av komponenter funkar kanon som webbcomponents om de är ganska enskilda. Det är liksom ingen komponent som rappar en massa annat utan det kanske är typ en date picker Eller någonting som är en leaf node typ i Hierarkin av alla Ja just det Men ja, nej, det känns inte nödvändigtvis som en silver bullet. Men vi vill ändå utforska det. för det är ju Jag tror att tittar man i ekosystemet bara i Sverige av andra designsystem och det gör vi ju själva mycket också Det finns ju liksom i arbetsförmedlingen och SJ har vi inspirerats ganska mycket av. Ah, så de kan man surfa in och titta på. Ja, SJ har, jag tror att de relativt nyligen har gjort ett omtag på sin jag vet inte, det är något som är SJ-design eller något sånt Så de har gjort ett bra arbete och det kan man hämta mycket inspiration för. Men tar man vissa andra så jag vet, jag ska inte svära på hur de gör kring det, men vissa andra kör ju 100% webcomponents. Jaha, de gör det. Det funkar säkert jättebra Men jag tror att Det är... Vi får utforska det i framtiden Helt enkelt att se vad det är Sen vet jag inte, det är ju liksom inte helt otänkbart att landskapet ändrar sig lite grann heller nu när AI är på stort intåg och utvecklingen går så pass snabbt som det gör. Ja men precis, det tycker jag var intressant för det sa du ju precis innan vi började spela in här att Det kan ju mycket väl komma att påverka Ja. vad ni bygger och vad man gör och det var en sån grej som jag inte hade slagits av Varför inte du sa det? Nej, jag vet inte om jag hade slagit sig av det själv för några veckor sedan heller, men vi har pratat lite mer om det, för det har ju säkert inte gått någon förbi att det händer saker på AI. och kanske från utvecklarperspektiv så har man ju traditionellt man har kanske tänkt på så här vad betyder det här för mig? Vad betyder det här för mitt yrke? men om man bortser från det så tänker jag ju liksom att våra användare som vi bygger tjänster och appar för idag. Hur ser deras interaktion med de apparna ut i framtiden. delar av det kommer ju säkert att övergå till att vara någon sorts assistent. Man kanske pratar och ber om eller chattar eller någonting. Vissa sådana här stora, komplexa flöden. Deklarationer eller du ska ansöka om bolån eller vad det nu än är. Det kan ju vara ganska omfattande och komplexa formulär. Det kanske är någonting som skulle vara jättebra som ett och chattflöde i framtiden för då kan du ställa frågor under tiden, om det är någonting som du undrar. men sen tror jag personligen att vi kommer ju säkerligen att ha kvar grafiska gränssnitt för diverse grejer. men det är också så att i våran interna produkt och dess framtid så blir det ju någonting som man har kommit underfund med nu Så det här måste vi ändå tänka på. hur ser framtiden ut kring det? vart är vi på väg Och det finns ju liksom så här Vad är det de kallar det? Computer Vision finns så. visserligen så är ju det faktiskt då Typ att datorn tar skärmdumpar och faktiskt navigerar. Och då behöver vi ju ändå ha ett gränssnitt som det är ju bara bra då om det är tydligt och tillgängligt. Ja, men exakt. Tillgängligheten lönar sig igen. Ja men exakt Ja, nej men det är klart det måste väl kunna finnas någon aspekt också där det blir andra interaktioner som gör att man kanske vill presentera saker på andra sätt. det kanske för ett annat behov av visningskomponenter som kan visas tagna ur sitt sammanhang det är inte så att vi har ett jättestort formulär om jag vill presentera resultatet Så då är jag resultatkomponenten. men jag har inte resten av informationen Runt omkring om man kanske vill integrera inmatningsfält i den här i det här flödet också för att istället för att allt hela tiden ska vara en fritext och typ en GPT-rapper, så känns det som att Ja men det kanske är såhär En mix av båda världarna Men jag tycker det är svårt och veta vart vi är på väg. och det blir väldigt spännande att se. Och det är väl lite så som vi snackade om innan att man får försöka liksom vara snabb på att ja men inte sitta inlåst i så nu jobbar vi med det här i två år och sen så ser vi hur det blir när det är mer. Ja, just det. Utan att man är snabbrörlig och håller örat mot reelsen. Ja, väl exakt. det blir nästan mer intressant när man tänker så också. När man inser att det kan komma och sådana grejer. det finns fler aspekter att tänka på än bara de som man har framför sig precis nu. Ja, nej men exakt. och det tror jag väl gäller om man går in på temat med AI och utveckling också att, där tycker jag också att det är lite svårt att veta. för precis som i webbcomponents så är det också ganska polariserande åsikter om det. Det är liksom all in eller all out och Vem ska man tro på? av de som är åt ena hållet i andra hållet ett incitament kanske att eller så. Ja, visst. Jag själv har ju vi har ju använt AI framförallt under en längre stund nu för dokumentation för att försöka hitta ett konsekvent och professionellt språk, men också lite blank canvas-grej, att man får vi ska dokumentera en knapp. Eller vi ska dokumentera en komponent som gör det här Ge mig ett utkast och så tar vi det därifrån Ja just det, ge mig något att börja med Nej, men jag tror att min personliga resa när det gäller AI-assisterad utveckling har ju varit såhär att man har man har ju fått den här wow-faktorn och sen har den på något sätt efterföljts av en Åh, det är bara så här. Just det. Den kör. den kör fast och liksom man liksom man bråkar med den här AI för att Liksom komma framåt men ju mer man liksom fortsätter, ju mer liksom ute på Liksom Sinationer och så Blir det Ja, men exakt. Det tycker jag är en väldigt bra beskrivning. Men den har ju kommit i omgångar också Nu finns det ju liksom ännu bättre integration mellan en AI-agent och en editor till exempel. Och det är också så här Det har också blivit en wow-faktor. men det känns också som att man kommer till och man förstår ju att när den när den har den här chain of thought-grejen att den kan prompta sig själv och prova outcomes och så vidare. Så förstår man ju att resultatet blir mer träffsäkert. Men det känns ju någonstans också som i slutändan att hur de fungerar, gissar sig ända till vad som är rimligt att göra det här näst så att det känns som att hittills så har jag fått några sådana där wow-faktorer men ändå känt i slutändan av när det har gått två dagar, den lilla honeymoon-facen är över då stöter man på de här friktionerna och där det liksom tar stopp Ja, men exakt. Och du tar stopp på ungefär samma stil som sist. fast på en lite annan ja jag känner nog väldigt mycket så också Och samtidigt så pratar jag ju med folk Ja men vi genomledar dem som verkligen har Det känns som att de verkligen har hittat arbetssätt ihop med AI som verkligen funkar för dem. Och de blir genuint mycket snabbare på att göra saker och jobba på det sättet. och det kanske är ett sätt som inte alls passar mig för att jag är gammaldags och vill sitta och titta på koden utan att bli störd förslag mitt i eller? Nej men man vill ju det är en av de grejerna som jag tycker är dråkigast med det Jag vill ju prov, för jag tror också att i någon grad så kommer väl det här Man kommer väl nästan att vara så illa tvungen att använda det för att behålla en viss produktivitet kanske. Sen så tror jag inte att man behöver förlita sig på det helt och hållet. Nej, det är ju frågan. Precis, det är frågan Men jag tänker sig också för min del. Jag har ju jag jobbar ju i Vim och jag tycker det gäller NeoVim specifikt och jag älskar ju liksom det att skriva. jag tycker det i sig är så kul men den Liksom om man jobbar i terminalen så då är det inte nödvändigtvis så att det är inte där ny funktionalitet kring det här kommer först. och då blir man såhär, okej men ska jag testa Någon nya det tar det här för att prova men liksom jag jag tror jag dela din åsikt där. Men jag vill ju typ sitta utan distraktioner och bara liksom få göra det som För det ger mig glädje liksom Och samtidigt så är det ju onekligen så att När jag har Copilot påslagen i Visual Studio Code. Jag vill ju kanske egentligen inte ha så mycket av intelligensen men däremot att den ibland funkar som en väldigt mycket smartare Autokomplettering Ja, spara tid helt enkelt. Det sparar mig ju lite tid då och då. och hjälper mig att avsluta en grej och samtidigt hålla en tanke i huvudet. Så det är väldigt balansgång. det är både störande och Och lite hjälpsamt samtidigt. Ja, men exakt Det är intressant Men det kan vara mycket frustrerande också. Ja visst, jag menar på mina mer cyniska humör så kan jag ju tänka mig att om tillräckligt många går tillräckligt hårt in på AI i utvecklingen så kan vi vara några andra som sitter i törn att känna storkåren på att vi skriver väldigt pålitliga små saker med minsta möjliga kod som är hand hantverksmässigt skriven. Det blir mycket mer förutsägbar. Jo nämen precis för det är väl också en av aspekterna Både när det gäller att producera kod kanske är en aspekt i sig, men Säg alla de här bildgenereringarna. det är ju inte som att du får samma resultat när det är samma fråga. så det blir ju lite svårt vad är det egentligen som kommer ut Det kommer säkert funka. Men det är ju liksom Det är där i den ballparken Ja, precis. Det är som att prata med någon slags drömgenerator. det händer något i en dröm och så tror man att det är detsamma så har plötsligt allting runt omkring ändrats. Nej exakt exakt exakt exakt Men jag tror ju att det kommer väl att vara viktigt att fortsätta vara nyfiken på det i alla fall så att man liksom inte frånskriver helt och hållet. Så använder det använda det liksom till en rimlig grad där det känns som att det gynnar en. Och inte att man liksom bara Till slut sitter det, men det kanske Vem vet? vi är på väg Nej, precis. vi stämmer av igen om två år att se vad som faktiskt hände. något mer vi borde få med innan vi avslutar för idag. Jätteintressant. Ja, nej, jag tror inte det. Jag tror vi har varit inom det mesta som jag har... Ja, tankarna. det är väl i så fall, jag tror att det finns några länkar som vi kanske skulle kunna lägga in i någon beskrivning för avsnittet Jag lägger ner in massor med länkar inklusive till SJs designsystem också. jag tycker det är trivsamt att de har gjort en sajt för sitt designsystem som Den visar ju bara komponenter men den känns samtidigt 100% SJ, så de har ju verkligen De har lyckats få till en enhetlig känsla på det på ett ganska stiligt sätt. Ja men det är ju också så här, det är lite power move och liksom lägga sin publikt det känns som att vi hade säkert också kunnat tänka oss att göra det i framtiden men Ja, vi har inte vågat göra det ännu. Det har inte funnits ett tillräckligt skyltfönstervänligt material kanske. Nej, jag kan helt förstå resonemanget. Men som sagt, vi länkar in sånt också Och om du kommer på några fler grejer som vi borde länka med så tar vi med dem också. Som folk massvis tittar på. Jättebra. Tack så jättemycket Johan för att du ville vara med Ja, tack för att jag fick vara med. Tack för att just du lyssnade på Kodsnack Om du vill stödja oss, varför inte tipsa en bekant om podden? Eller lämna en recension i till exempel iTunes eller något annat ställe där det går att sätta betyg på poddar. Du kan också stödja oss genom att köpa oss en kopp kaffe på koffi. ko-fi.com-kodsnack Alla pengar går direkt till att göra podden bättre och trevligare. Du kan också komma och hänga i vår Slack-kanal. Länk finns på kodsnack.se precis som alla andra länkar och alla någon info kopplad till varje avsnitt. Sist men inte minst finns det också en länk till vår Spreadshop-butik där du kan köpa tröjor och andra prylar med kodsnacktryck.