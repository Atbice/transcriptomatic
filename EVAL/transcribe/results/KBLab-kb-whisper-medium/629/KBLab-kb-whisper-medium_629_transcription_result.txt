Jag tror verkligen att om du knappar runt i det du utvecklar lokalt med tangentbordet och ser till att du kan komma åt allting, du kan fylla i allting, och öppnas någon modal eller nånting så sitter fokus rätt och du hamnar inte plötsligt bakom modalen. När den stängs så är du kvar där du var. Du behöver inte navigera genom hela genomhållet igen. Och att bara slå igång en skärmläsare i 45 sekunder och bara "ja men det känns som att det makear sense för mig, då makear det förmodligen hyfsat sense för andra". Målet är inte att man ska täcka hundra procent av alla problem som uppstår, utan det är bara att få de lågt hängande frukterna, helt enkelt, utan att behöva göra det separat. Gör man då kanske majoriteten av det som finns i någon läskig, lång kravlista som är 2 km lång då kanske majoriteten av det redan är löst. Hej och välkomna till Kodsnack, jag heter Fredrik som vanligt, och idag har jag med mig Johan. Hej Johan! Vem är du? Vad gör du? Vad gör du? – Jag är en utvecklare som jobbar på SBAB till vardags. Där sitter jag sedan relativt nyligen i ett nystartat designsystemteam. Jag har varit där, ja i ett antal år nu. Jag tror att vi är inne på det sjunde året. Jag har gjort lite annat under min tid, jag tror att det är mitt tredje team. eller jag vet att det är mitt tredje tips. Men ja precis, så det är det som vi sitter med och vi jobbar ganska mycket också med tillgänglighet. För det kommer ju ett nytt tillgänglighetskrav, eller tillgänglighetsdirektiv just nu. – Just det. Så det tar upp väldigt mycket av, inte bara vår uppmärksamhet, utan hela utvecklingsorganisationen egentligen. Ja, så ni har ett designsystemteam nu? Var det så? Hur kom du till det? Har du varit inne på designspåret och kommit in på det teamet eller kommit från något annat spännande håll? Jag har väl varit intresserad av designspåret, lite grann. En gång i tiden, för en 15 år sen, tror jag att jag trädde in i utvecklingsvärlden lite från att ha lekt med design. Det ligger någonstans i ryggmärgen, även om jag inte är en designer eller UX:are på det sättet då. Jag tycker att, i de allra flesta tillfällen, den tekniska biten är den mest intressanta, men lite bakgrund kring det att vi har ju på jobbet ca 20-25 stycken utvecklingsteam, 135 stycken utvecklare och testare. Jag tror att... - Så det är ett par stycken. Ja, jag vet inte men majoriteten är ju utvecklare då. Och vi sitter och jobbar på lite olika sätt och det ändrar ju sig lite över tid också. Men man jobbar ju ganska autonomt och man jobbar i ganska många olika appar. Vi haft lite olika sätt hur vi levererar frontend applikationer, både internt och externt och till privata kunder, företagskunder och allting sånt. Det har varit väldigt många appar och de har ju en tendens att liksom bli lite utdaterade. Man kanske kopierar en lösning som man gjorde där och sen så klistrar man in det i den nya appen så ser man ändringarna där, och så blir det inkonsekvent släppt. Så det var väl egentligen så det började 2018, hur många år sen det nu var. Det börjar bli typ 7 år sen. Jag skulle säga tre. – Ja, jag skulle också säga tre. Allt efter mars 2020 är ju ändå samma år. Ja, men exakt, exakt. Nej men, då började vi lite inofficiellt helt enkelt. Ett gäng utvecklare som satt i lite olika utvecklingsteam. Vi lyckades få att vi kunde sitta typ en eftermiddag i veckan eller något sådant. Ja, men att programmera lite. Rent från allas eget intresse så att säga. Ja, men man hade ju sett det här behovet, liksom. Och sen så tror jag att sedan dess har våran design och UX-avdelning också växt ganska rejält. men på den tiden så var det inte lika många, men vi hade ju ändå rätt nära dialog med dem och de såg ju om några det här problemet. Det kändes som att det inte finns en röd tråd någonstans. Så då började vi se, vad är det vanligaste? För vi har ju inte fått något commitment på att underhålla det här enligt något strukturerat... Nej, just det. Så då blev det så, väldigt mycket handlar om formulär. Vi ska samla in data i ansökningsflöden och man ska göra överföringar och allt vad man nu gör. Så vi började i den änden egentligen, att bara försöka liksom, vi vet inte nödvändigtvis vad som är rätt. Vad som ser rätt ut. Men det viktigaste är kanske att det ser likadant ut. Vi gjorde ju ett litet bibliotek egentligen som vi distribuerade med en intern NPM registry. Och sen så visste vi ju då att, ja men det kan ju ... Om vi fokuserar mer på API:et och inte tänker så mycket på att skylta med några detaljer kring Leken-fil, så kan vi ju ändå ganska flexibelt uppdatera det över tid när vi vet mer om vad som är rätt visuellt. Så det var så det började och det har egentligen hållit på så sedan dess fram till Q2 i 2024. Så första April där i krokarna så satte vi officiellt igång ett team. Periodvis har man hunnit jobba lite mer på det och periodvis har man inte hunnit jobba någonting alls på det. Men det har ju ändå varit i användning hos ett antal team sedan 2018. Så det var helt enkelt ett NPM-paket med UI-komponenter då? Ja, exakt. Och ganska begränsad dokumentation i anslutning till det. Sättet som det skiljer sig idag är ju att vi ... det är ju ett helhetsgrepp mer kring ... alltså designsystem omfattar ju mer än bara kod och design egentligen också. Man kan ju dra det till att det kan handla om copywriting, bildmanér och alla möjliga grejer. Och det där har vi ju inte riktigt en lösning för ännu men på sikt så hoppas vi att vi ska kunna centralisera det. Även om vi inte själva står för innehållet nödvändigtvis så ska man inte behöva ... Ja, men vart finns det här? – Ja, just det. – Finns i sjön, och så får man leta upp det. utan att man mer kanske kan ha en samlingsplats där man hittar både dokumentation och relevant information som utvecklare och designer. Man kanske kan hitta till relaterade resurser också, även om inte de är skrivna där. Det var en intressant grej som jag kände när jag började fundera inför vårt snack. Just det där med hur stort eller litet paraply är ordet designsystem. Det känns som att på ett sätt så kan det bli hur brett som helst nästan. Det finns väldigt mycket nyttigt som man kan baka in under det. Som du säger, hur skriver man text. Det kanske inte är det första man tänker på, men det är ändå onekligen en grej som dyker upp när det gäller att få saker att se ut och kännas på samma sätt över en massa olika saker man bygger? Ja. Jag tror att du och jag jobbar ju med liknande utmaningar. Bygger en del användarupplevelser i fronten av applikationer. Ja, men precis. Och ett helt gäng team som gör saker som... I en idealvärld skulle det nog se ut att fungera ganska exakt likadant i många fall. Inte alla men många. Nej men just det här med copy till exempel. Det känns ju som att det, Det beror ju lite på. Jag tror att en intressant grej som vi kanske kan komma in på är hur vi arbetar och samarbetar med vår UX och designavdelning nu och de som faktiskt är redigerade resurser i vårat nya team. Men historiskt så känns det som att det det är inte helt ovanligt att det blir lite vattenfalligt. kanske sitter i en pipeline där man har så mycket i pipelinen att utvecklarna sitter helt fokuserade på det. Och då blir det lite så att affärsanalytiker och UX:are kanske då springer före på nästa grej. Och så blir det lite av en överlämning än vad man man kanske skulle önska alla gånger. då är det ju ganska klassiskt att man till exempel säger, vad händer om det blir fel då? ja, just det. Om man nu försöker skicka in det här och det inte funkar för nån downstream-tjänst där nere. Då är det ganska vanligt att man inte nödvändigtvis har tänkt på det i typ en designleverans, och då är det ju jättevärdefullt att ha lite riktlinjer kring det och att vi kan försöka hjälpa till så att det ändå blir konsekvent och att man behöver inte vara expert på copywriting utan att man hittar lite resurser, och sen räcker det kanske en bra bit på vägen. Fånga en del lågt hängande frukter på att vi kommer framåt utan att vi behöver fråga någon annan avdelning om hjälp. Ja, det är jätteintressant att utmana det där med kommunikationen och de där flödena och få saker gjorda och ta tid. Som du sa precis i början är det väldigt lätt att man hamnar i det där läget att ibland blir det lite gjort och sen går jag i en jättelång period och ingenting händer. Nej. Man har 17 andra saker som kanske både är och framförallt bedöms som viktigare just då. Ja, och det kanske man ... Vi har ju hållit på med det här nu. Vi konstaterade att det var mer än tre år. Och det känns som att få ett commitment på att kunna kunna göra det här också, där har ju det här tillgänglighetsdirektivet varit... Det var ju det som fick skjuts i den prioriteringen. Det är ju också så att ett av våra stora fokusområden är just tillgänglighet, att försöka dels baka in tillgänglighet där vi kan. sen finns det ju delar av tillgängligheten om hur ett helt flöde hänger ihop som är svårt att automatisera men det är ju en utav de grejerna som jag tror fick organisationen att gå med på, jamen nu startar vi ett team kring det. Jag har nog personligen velat ha ett team kring det, i alla de här åren nu. Men nu har det äntligen skett, för det är ju så tillgänglighet är ju viktigt, men man har kanske inte riktigt insett det. Eller att man har tänkt att det är viktigt men det måste ju också konkurrera med andra projekt. I bankvärlden är det massa regulatoriska grejer och kanske stora systembyten. och då är det ju ibland svårt att liksom – ja, det här är viktigt, men tyvärr, vi hinner inte. Nej, precis. Det är fortfarande bara näst viktigast. Ja, men exakt. Och det kanske är liksom, jag tror att våran, alltså drivet av våran UX-avdelning så har vi ju ändå, jag tror att det var Vi har skrivit ner lite siffror och lite information här. 2019 så började vi jobba lite mer dedikerat med tillgänglighet men det blev ju, då har vi ju samarbetspartners som är experter på det som kommer in och hjälper oss och så gör man en typ av analys och översyn över våra flöden. Men då blev det lite mer punktinsatser. så jag tror inte vi lärde oss tillräckligt mycket för att ta det vidare nödvändigtvis, utan man gjorde en on review, och så åtgärdade man lite fel där. jag tror inte vi lärde oss mindsetet hur vi ska utveckla tillgängligt utan det drevs nog mest av enskilda individer, typ eldsjälar, i de olika teamen. så det vi försöker göra nu tillsammans med det här projektet som då drivs parallellt, som är tillgänglighetsprojektet egentligen det är ju att försöka få lite mer långsiktighet i det, och inte se det som ett projekt som tar slut, utan vi måste få in det i vårt arbetssätt och process. Ja, precis. Själva teamet för designsystemet – hur stort är det ungefär? Ja, vi gör samma uppställning sedan start. Två utvecklare är vi, som varit med och inofficiellt petat på det här pro... Alltså det som fanns innan. Och sen så är vi faktiskt... Ja, vi är typ tre UXare. En utav våra UXare är ju en fulltidsresurs som är fokuserat på designsystemet. Två av dem har lite andra åtaganden också. Men sen är vi en produktägare, och det tillkom ju i samband med att vi startade teamet och tycker jag är kanon. För man är inte nödvändigtvis alltid så bra på det som utvecklare, designer. Man märker skillnaden när man har en bra produktägare på plats. jaha, oj vad mycket mer rakt på sak och tydligt vissa grejer blev plötsligt. Ja, men exakt. Och bara att vi håller rätt riktning och inte... För jag menar som utvecklare, du känner ju likadant, men det är ganska lätt att ramla ner i kaninhål ibland. – Jo, jag har gjort det en gång kanske. Ja, jag har nog också kanske gjort det en eller två gånger. Och sen en team-chef har vi. Så vi är väl, ja vad blir det, typ fem? – Nämen fem, sju. Nämen så. Och det funkar ganska, det är ganska roligt för eftersom det är ett nystartat team och vi har ju kvar det här som hade tagits fram inofficiellt innan men vi har ju inte så mycket legacy. Det är ju väldigt mycket, liksom. Det är ju väldigt mycket greenfield egentligen. Ja, just det. och man får ta reda på ganska intressanta grejer. Vi vet ju att vi vill underlätta för våra utvecklare och designkollegor, framför allt. och det övergripande målet handlar väl om att vi vill bidra till effektivare produktutveckling. Sen så vill vi ju göra det här gamla gamla, det som startade initiativet från början att se till att det blir en konsekvent användarupplevelse och att vi liksom följer våran branding och att det ska bli lätt att göra rätt på det. Och sen är det ju då tillgängligheten. Men det som är intressant är ju att vi har ju fått upptäcka, hur ska vi jobba i den här konstellationen och med den här produkten, för det blir ju en intern produkt. Ja visst. Och det är ju väldigt kul eftersom att du har ju dina slutanvändare intill dig. Så det är väldigt mycket feedback. Men då har vi ju fått prova oss fram. Vi jobbar lite grann i kvartal då. Det känns som att vi provar ett arbetssätt och så behåller vi det som känns bra in i nästa kvartal och så kanske vi skruvar på nåt annat. På senaste kvartalen så har vi i alla fall – vi jobbar i två stycken arbetsmöten per vecka där vi försöker sitta hands-on och jobba tillsammans, både utvecklarna och UXA. Det gör ju att det här samarbetet mycket tätare än vad det var i de teamen jag var med i innan. Och då känns det som att man kan ta vissa beslut som träffar både våran kodbas och våran, i det här fallet, Figma då. och det känns som att det varit väldigt värdefullt. Men, så ser teamet ut. Just det, och det är så ni jobbar. Arbetsmöten, två stycken, och sen så jobbar man mer på varsitt håll resten av. Ja, jag tror att det är ju lite, speglar väl hur utvecklingsteamen jobbar också. Nu jobbar ju inte med de vanliga produkterna på samma sätt så jag kan väl inte svara exakt för hur, genomsnittsupplevelsen är, Nej, så klart. Man är ju autonoma, så vi vill ju jobba agilt och alla team har väl i princip sin egen twist på vad det innebär med ceremonier. Vissa kör någon kanband variant och andra kör sprintar. Ja, men visst. Det finns alla. Vad som passar just det teamet känner jag igen också. Ja, men precis. Men vad äger, driver eller kontrollerar erat team kontra andra team? Jag tänker så här att ni gör en del komponenter förstår jag ju. Här kommer en standardkomponent för att göra den här saken. Blir det då att man drar in nya komponenter som så att säga tillhörde inom citationstecken ett annat team förut? Eller hur funkar flödet mellan er och övriga team? Nej, men dels så fanns det ju ett antal komponenter som vi då förvaltar vidare och vidareutvecklar. Och det andra handlar ju om att försöka snappa upp vilka behov vi har, och att inte nödvändigtvis committa allt för långt fram i tid utan att vi ska vara lyhörda och snabbrörliga. – Japp. Men komponenter är väl en ganska central del i det. Vi har fokat ganska mycket på dokumentationen kring det också. Det är en bra grej. Jag tycker personligen att det är lite av en first class citizen i den leveransen också. Det är inte bara så att det finns en hink med komponenter, varsågod, figury that out. Utan att man försöker ändå ha det i åtanke. i och med det så får vi ju bygga vår egen pipeline med hur vi levererar vår produkt. Alltså vår produkt består ju på kodsidan av typ bibliotek som man lyfter in via MPM. Just det. Sen så består den i tillägg av dokumentation. Det har varit en annan lite kul grej för det har inte nödvändigtvis funnits en färdig pipeline för det. De andra teamen har inte riktigt haft det behovet. Så där har man ju fått vara med och liksom bygga upp det enligt de behov man har och det blir lite andra saker att tänka på där med att Det här ska ju versionshanteras, och versionshanteringen är ju nånting som är väldigt viktig för att säkerställa att det blir stabilt i längden. Vi försöker förhålla oss till semantisk versionshantering och att man ska kunna lita på att saker och ting funkar. någonting har breakats, så ska man få reda på det och kunna ta hänsyn till det. Men annars så är det ju, alltså jag tror att det där är också lite grann i rörelse. Vad är det vi kommer att äga som team, vad är våra produkter egentligen, det finns ju ganska mycket material som är utspritt på en kunskapsbank här och sen så finns det ju något externt kemias där, för något ändamål Jag tror i nuläget så är det mycket fokus på tillgänglighet så jag tycker att det är lite intressant och spännande att jag vet inte exakt hur det kommer se ut. Jag tror att vi kommer att försöka se till att lyssna på våra användare och forma det därefter. Ja, ja. Det är väl då det blir bäst också. Ja, och tillgängligheten – om vi ska gå in lite mer i detalj på det – så är det ju, för de som eventuellt inte vet det, så är det ju en ny lag så den träder i kraft den 28 juni. Det här vet jag att de som varit drivande har sagt, men förr eller senare dyker det datumet upp. För fem år sedan kändes det jättelångt bort. Men nu är det ju all hands on deck att se till att vi liksom... Och man kan väl säga att det är en vidareutveckling av de lagkraven som redan gäller för offentlig sektor myndigheter och liksom sjukvård och så där, så har ju de redan mycket av de här kraven och nu utökas det till att gälla privata aktörer också. Ja okej, så från ett visst håll kan man se det som en breddning av någonting som redan fanns? – Ja. Och sen är det väl också en gräns. Vilka som omfattas är också lite luddigt. Och här vill jag brasklappa lite grann också. Jag har ju försökt ... känner att jag har någorlunda koll på det här. Men det känns som att när det gäller alla de här bara ta av det jag säger med en nypa salt. Ja men exakt! påstår att så här funkar det, och sen så kanske jag missat någon paragraf. Nej men precis, allt det här är vår uppfattning utifrån det som vi har hört och sett och så där. Vi är inte lagtolkade. Nej, jag har försökt koka ner det till pragmatiskt: “Vad är det som gäller?” Men, ja, så nu är det ju ett antal typer av tjänster egentligen som omfattas av det här och det kommer ju på sikt att utökas till flera, så träffas man inte av det här i nuläget så kommer man säkerligen att göra det inom relativt snar framtid. Och det betyder i praktiken att det finns ju en europeisk standard som är till för tillgänglighet och inkluderande i EU. En utav aspekterna, de allmänna kraven som man omfattas av, är ju de här WCAG som är nån sorts spece för ... som specar upp så här. Det ska funka så här, helt enkelt. Och färgkontraster och allt vad det är. sen finns det lite branschspecifika krav som beroende på vad man är i för bransch så kan det vara extra saker som man måste tänka på I vårt fall, som bank, så omfattas vi av Begripligt Språk – åh. Det ska vara lätt att ta till sig innehållet, det ska åtminstone finnas möjlighet om något står på massa facktermer, så ska man också kunna se det på något sätt som går att begripa även om man inte är i finansbranschen. Det är ju faktiskt ett underbart krav. Ja, jag tycker det också. Sen är det ju så att de bästa lösningarna för det här är ju lika tillgängliga för alla redan från början, så att det inte blir så här att man bara lägger lager på lager. Vill du ha lite mer tillgänglighet så får du slå på det här läget. Och sen är det lite administrativa krav, så omfattas man av det här direktivet så måste man också arbeta med dokumentation och rapportera sina tillgänglighetsbrister. Och då finns det något som kallas för en tillgänglighetsredogörelse som man behöver ha då och det är en listning någonstans på sin sida som hålls uppdaterad på, typ: förklara varför, och länka om det finns något mer tillgängligt alternativ och lite sånt där då. Och sen så tror jag också att man behöver ha en kommentarsfunktion så att användare av din tjänst ska kunna rapportera in det här om de stöter på något. Så det är egentligen lite grann att visa att vi är medvetna om vad vi klarar och inte klarar och att vi jobbar på det? Ja, precis. om man nu kommer till vad det får för påföljder ifall man inte uppfyller de här kraven så... tillgänglighetsredogörelsen är nog en ganska viktig del i det men vi är medvetna om det och vi... Ja, just det. Vi är på bollen, typ. Lite sådana här, jag har för mig att det fanns någon slags relaterad känsla i vissa delar av när GDPR var på tapeten och höll på att införas. Ja men alltså en grej var att det fanns ju jättestora stränga påföljder, men det fanns också en ton av att, visar du att du jobbar aktivt med det här och rapporterar när ni har problem, så kommer det, ja men det gäller att visa en rätt anda också. Ja men exakt. Så tolkar jag det iallafall. Det känns lite som att även om jag tror att man förväntas väl vara compliant med det här när 28 juni inträder så går det ju säkert såhär men vi har inte hunnit helt enkelt. Det här är det viktigaste i det här sammanhanget, vi kan visa att vi har tagit det och att vi håller på med resten. Ja men exakt, exakt. Sen kanske man kan komma till den punkten också, vilka omfattas då? Det tycker jag verkar lite svårt. I vissa branscher känns det väldigt tydligt, typ e-handel är ju en av de som omfattas av det här. Ja, det är rätt lätt att veta om man är e-handel eller inte. Exakt. Och banktjänster känns också rätt lätt. Men sen är det såhär – elektroniska kommunikationstjänster. Det finns lite exempel. Vi kan säkert lägga in bra länkar i beskrivningen också. – Ja, det får vi göra. det finns ju från Post och telestyrelsen så har de någon sorts introduktion till EUs tillgänglighetsdirektiv elektroniska kommunikationstjänster som till exempel uppkoppling och abonnemang, telefonsamtal, e-post sms, chatt, videosamtalstjänster. Men det är ju liksom, det kan säkert vara fler. Ja, jag tänker det. Det kan nog bli ganska brett. Ja, men exakt. Och sen streamingtjänster. Medietjänster typ. Det är väl en utav dem. Sen är det vissa tjänster för persontransporter. Vissa tjänster. – Ja, så det lämnar utrymme för tolkning. Banktjänster nämnde vi. E-böcker behöver vara tillgängliga och e-handelstjänster. Det är ju en ganska stor sektor – som omfattas då. så tror jag det är vissa fysiska, om man har betalningsterminaler eller olika typer av automater, så tror jag de också omfattas. Men jag för mig att jag läste att har man en fysisk grej ute så tror jag att det finns någon regel kring att om den står där idag så kan den stå kvar tills den är en viss ålder. Ja, det känns ju sansat. Man kan säkert försöka utbilda sig i om man omfattas eller inte, eller inte, men jag skulle väl förespråka att man kanske ändå tänker på tillgängligheten. Jag vet inte, för mig så har det varit lite grann... Jag har inte riktigt varit så bra att tänka på tillgängligheten historiskt, men ju mer man har fokuserat på det så har det ju låst upp lite grann. Det är typ ett nytt gränssnitt i din app. Ja, det är det som är så spännande. När du får in vanan att jag har kortkommandot för att starta skärmläsaren, jag kan de vanliga navigeringssätten då får du helt plötsligt ett nytt gränssnitt för din app som du kan se till att få en bra användarupplevelse på. För mig i alla fall så är det jättemotiverande. Jag tycker det är jättekul för det kan ju vara helt förfärligt. Det finns jättemånga roliga exempel. ”Ja men du kan typ hoppa igenom 48 element som bara säger... Bild, bild, bild. Det är ganska svårt att veta vad är det då liksom." Ja men exakt, exakt. Nej men så jag tycker att det känns som att det är ju viktigt utan tvekan men det är också någonting som ja men jag tycker är roligt. Det känns som att man har låst upp en ny liten dimension här i sitt utvecklande och vad man levererar när det gäller bra användarupplevelse. Ja men exakt, man får lite trevliga incitament att bygga saker på mer genomtänkta sätt. Man gjorde första versionen av sin webbapplikation och så är allting en div med olika styling på. Sen kom man på att ha en AHRF, en vanlig länk, för tillgänglighet är faktiskt ganska bra för alla att se att det här är en vanlig länk, den funkar som en vanlig länk, den ser ut som en vanlig länk. Ja men exakt. Alla sådana där grejer. Och den går att navigera. Och har vi gjort det bra och navigerar med skärmläsare så blir det ofta bra att navigera med tangentbordet också. Bara att kunna tabba igenom saker i en vettig ordning är väldigt nyttigt för precis alla. Men just det, jag tror att det är en sån här grej Man tänker knappt på det när man sitter och utvecklar, när man sitter och utvecklar så blir man lite så här hemmablind också. För det är ju så här ... Du är inte nödvändigtvis den tilltänkta målgruppen för den appen du utvecklar, utan du ... Jag ska bara utveckla den. Jag tror att man ... Du har ju säkert använt olika system, även om de är webbaserade, där man bara så här: Men alla de här tangentbords... tabba, att navigera med olika sorters kortkommandon, piltangenter och så vidare. Det bara funkar. Det är ju en trevlig överraskning. Det skulle ju lika gärna kunna vara defaulten. Ja, men exakt. Det borde vara lite jobb att sabba till. Ja, och jag tror att för vår del det som vi försöker bidra med när det gäller utvecklingen är att alla kanske inte ska behöva vara tillgänglighetsexperter experter, för att vi ska kunna leverera ett bra resultat. dels baka in det när det finns och går men också uppmana kanske till att man har det mindsetet men redan när du sitter i lokal utveckling tryck igång skärmläsaren. Jag tror att man behöver gå någon liten crash course i hur skärmläsaren funkar funkar, för den kan vara ganska överväldigande när man sätter igång den. Man har ju hört att när den drar igång på 180 km i timmen så spottar den ur sig information. – Ja visst, det är så proffsen använder den. Ja, och man kan ju ställa in den precis så som man vill. Och sen så, jag tror att en av de viktigaste – nu sitter jag på Mac det är säkert lite olika beroende på vilken och då använder den inbyggda voiceover. Men jag tror att den viktigaste tangenten är kontrolltangenten för den får den att bara vara tyst. Den pausar uppläsningen, så när du sätter igång och du bara vill tänka Då kan man trycka in kontroll innan man gör sin nästa grej. Jag tror att det är nog inte mer än 5–7 stycken kommandon man behöver kunna för att kunna använda den effektivt nog för att fånga mycket av de här de här lågt hängande frukterna. Och då kanske det också är så här ... Gör man det redan i den lokala utvecklingen, då kanske majoriteten av det som finns i nån läskig, lång kravlista – som är två kilometer lång Då kanske majoriteten av det redan är löst. Ja. Och sen kanske man, de här som har lite mindre problem som är lite svårare att upptäcka. De kan man säkert behöva åtgärda ändå när det är någon sorts testprocess eller review senare. Jag tror verkligen att om du knappar runt i det du utvecklar lokalt med tangentbordet och ser till att du kan komma åt allting, Du kan fylla i allting, och öppnas någon modal eller någonting så sitter fokus rätt och du hamnar inte plötsligt bakom modalen. stängs så är du kvar där du var. Du behöver inte navigera genom hela genomhållet igen och att kunna slå igång igång en skärmläsare i 45 sekunder och ja men det känns som att det är en makartjänst för mig mig då mickar det förmodligen hyfsat sans för andra. Och sen så är det ju, Visst, är man proffsanvändare av det här så kan det hända att det finns insikter som man själv inte kan ännu. Jag tror, målet är inte att man ska täcka 100 procent av alla problem som kan uppstå utan det är bara att få de lågt hängande frukterna. Utan att behöva använda. Precis. Ett snabbt och jättestort tack till alla som stöttar oss på Coffee. Du kan bli en av dem genom att surfa in på kobindestreckfi.com/kodsnack och slänga iväg antingen en engångssumma eller ett månadsvis stöd. Stöder du oss på nivån kaffedrickare? Fem euro eller mer i månaden så får du ett gäng trevliga klistermärken i brevlådan. Stödjer du oss på nivån Barista för 10 euro euro mer i månaden, så får du dessutom, förutom klistermärkena, Stort tack precis här. Tusen tack till: Michelle, Albin Groen, Anders Legell, Brother, Ingo och Tobbe Lundberg. Alla ni som stödjer oss hjälper till att göra podden möjlig. Och ju fler ni blir desto bättre podd kan vi göra. Ibland har vi sponsorer i podden. det är faktiskt ert stöd som gör att vi börjar kunna täcka kostnaderna för podden varje månad. Vill du stödja oss på andra sätt så går det naturligtvis utmärkt att recensera podden i din poddspelare. Betyg eller en stjärna, oavsett om det är Spotify, Apple Spodcaster eller någon helt annan app. Eller berätta helt enkelt om ett avsnitt för någon som du tror skulle gilla podden. och just nu har vi precis släppt ett helt nytt sätt att stötta. Vi har ett klistermärke till försäljning. I koffebutiken finns det tre pack klistermärken om livet som agil lokförare. Framimproviserat i en milt urspårad diskussionsstråd häromveckan. Visar ditt stöd för alla safe-utövare där ute och få den där sköna känslan i magen av att bidra till Kodesnacks fortsätta resa. Men kom ihåg. Du är en fantastisk person oavsett om du stöttar oss eller ej. Jag antar att det fortfarande gäller att man får rätt mycket gratis av att använda standardkomponenter också istället för att finna sina egna. Ja, du tänker på inbyggda element. Ja, men precis. Det känns som en sådan här grej som fortfarande driver mig in i mina massor om flöden. Gör inte din egen ersättning för en knapp eller något i onödan. utan se till att det verkligen behövs och då har du rätt mycket att implementera om det ska bli lika tillgängligt som en standard. Om du går div-hållet, försöker återskapa. Nej men så är det ju definitivt, det finns ju många inbyggda element som är mer semantiska som man kan luta sig mot och så, Men sen är det ju lite så, ja det beror ju på. När det kommer till de här tillgänglighetskraven och just WCAG kanske specifikt då, så jobbar man ju i olika nivåer. då är det A, A, A, A, A, A och AAA Jag tror om jag inte minns fel här får kanske rätta – nån får rätta mig om jag har fel – men jag tror att den här nivån som man ska uppnå är dubbel-A, det kan hända att det skiljer sig lite beroende på vilket typ av problem det är men trippel-A är den högsta ambitionsnivån. Jag menar, det kan man ju lika gärna sikta på då om det känns orimligt. Jag har kollat lite på WCAG några gånger och det känns som att den högsta nivån kan vara ganska utmanande ganska ofta, har jag för mig. Men jag tror det är säkert att ha en balans där, så att man inte liksom... Men A var väl ofta ganska rimlig. Man kan säga så här, det här förstår jag dels vad jag ska göra och varför och dels hur jag kommer dit. Och sen dubbel-A, det här är samma fast mer ambitiöst på något sätt. Och sen strippel-A såhär, nu kan det bli mycket. Ja, men exakt. Jag tror att det som du säger stämmer ju till 100% att återuppfinna inte hjulet, om man inte måste. När det kommer till de komponenterna som vi levererar så försöker vi ju inte återuppfinna hjulet. Även om det är en komponent som inte nödvändigtvis går att bara bygga. Den finns inte i browsern. Det kanske är nån lite mer interaktiv komponent som kräver.. Nu finns det ju liksom ett input-fält för datum men vi kanske behöver ha ett sätt att liksom man ska kunna ange en range av datum och vi vill ha det som en liksom en bra upplevelse som man får om man ska boka en flygbiljett eller hotellnatt eller nåt sånt. Och då måste man ju gå lite utanför vad som som finns inbyggt och det som vi försöker tänka på där, som jag väl kanske skulle uppmana ifall det är någon annan som sitter med liknande utmaningar. även om det är så att man... Det här finns kanske en färdig komponent för i något ofter shelf-bibliotek ute i ekosystemet. så försöker vi ändå säga: ja det kanske är rimligt för oss att bara gå på den lösningen Men sättet vi tänker på det då är att sätta ett eget interface av hur ska API:t se ut. Du kommer säkert inspireras av hur det ser ut där. Men även om det är näst intill en 1:1 mätning så är det en explicit. Vi lägger in det för att då blir det inte ett implicit beroende på just den komponenten. utan då skulle vi ju sedan kunna se så här: vill vi bygga den custom, eller behöver vi bygga den custom? Eller kommer det en ny aktör, eller något nytt bibliotek som funkar ännu bättre? Så det är väl en av de nyckelstrategierna som vi försöker tillämpa Vad det än är för komponent så är liksom API:et – det är lite heligt. Det försöker vi se till att vi har en uppfattning om hur vi, Och där är det ju såklart liksom Det är svårt att säkerställa att det blir så, men är det intuitivt, Är det flexibelt? Och flexibelt så menar jag bara är det flexibelt för att vi kanske vill ändra våran lösning under huven? På sikt då? Precis, jag har en kollega som jobbar rätt mycket med våra komponenter. Vi har ett litet sådant projekt också. Han har sagt exakt samma grej, vi ska se till att slå in det, för vi använder ett designbibliotek nu ganska mycket. Men hans ambition är att allting som vi har som gemensamma komponenter ska vara inslaget precis så. Vi vill inte bli beroende av det biblioteket, för just nu sitter vi stenhårt fast i det en del, framförallt i en del äldre projekt. Katastrof, försöka uppdatera en mailbud. Exakt! Och jag menar även om du tar den approachen så kanske majoriteten av biblioteket ändå använder någonting sånt färdigt. Men då är det i alla fall, förlitar du dig helt och hållet på deras API, då sitter du ju lite i händerna på dem också. Nu har vi gjort en ny Major Uppdatering som breakar en massa grejer. Då har man åtminstone en chans att motverka det. Kan vi då, om vi nu inte bara kan byta komponent i samband med det kan vi åtminstone se till att vårt API, som vi tillhandahåller, går att mappa om till vad som än är ändrat? Så det tycker jag är, ja men det är typ en key takeaway i sammanhanget. Och sen när det gäller lite grann så som vi snackade om med hur vi försöker snappa upp behoven ifrån organisationen. Så jag tror ju, Och där har vi i samband med UX också det som är intressant med våra täta samarbeten är att man kommer ifrån olika perspektiv. Från kodsidan så har vi ett visst perspektiv och särskilt när det gäller versionshanterade koder. Det finns vissa spelregler helt enkelt. Jamen precis. På designsidan så kanske det inte riktigt har varit lika känsligt med sånt. Utan då har vi behövt närma oss varandra och synka sinsemellan. så vi kan inte springa före alla gånger på designsidan eller göra en ändring för det är inte så det funkar på kodsidan. Nej, precis. Men sen så tror jag att en annan grej som vi försöker vara i synk kring, det är ju att man vill ju att det Det ska vara konsekvent och därmed så vill man ju att det ska finnas vissa konstraints kanske, så att det inte är så att vi kan göra på helt olika sätt. Ja, det där är intressant. Men jag tycker, personligen så tycker jag att, Alltså, under de här åren så har man konsumerat ganska mycket innehåll från ekosystemet, diverse thought leaders och så vidare. Min uppfattning är att den här flexibiliteten behöver vara lite större än vad man tror ändå. Ja, någonstans är det ju alltid någonting. ”Ja men det är så trist när du sitter där i din app och så är det så här ... Jag behöver måla lite utanför linjerna, men det går inte. Då får jag bara kasta ut allt och göra det helt från scratch. Ja men precis, det blir ju inte hållbart det heller. Nej, men så att på så sätt så ser vi att en viss flexibilitet behöver ändå finnas i alla komponenter Så sättet vi ser det på är att det är lite mer high level komponenter Det är lite mer low level komponenter. Och det finns ju en herrans massa namn på såna typer av... Om det är atomic design eller vad som helst. Vi försöker tänka lite enklare på det, att bara såhär, En high level komponent det är ett lite mer specifikt användar... liksom ett use case. man kan använda det med ett begränsat API. Det är ganska mycket opinions inbakade. men det gör ju också att det är ganska flexibelt för oss att se till att det fortsätter att funka utan större ändringar och sen vartefter vi märker att för då kan vi lösa kanske 80% av ett visst behov. Sen så kommer vi till de andra behoven. Och då kan vi ju utifrån det vi vet då så kan vi börja bryta ner den till lite mera Loevel-komponenter. och då kanske man kan... Då kommer ofta de här insikterna om API-design. Hade vi tagit det här valet, så hade vi ju kanske kunnat stödja utan att man går alltför långt ner i framtida behov inte vet att vi har. Vissa sådana där grejer blir ändå tydliga. Rent intuitivt så känns det som att det här valet hade varit flexibelt, även om vi ser framför oss så att vi vill göra lite annorlunda också i framtiden. Men om man säger high level i det här fallet, är det typ en sådan avancerad datumväljare som vi pratade om innan? Är det en high level, eller? Det är svårt med om man drar gränserna. Jag skulle se det som, tänk dig tabeller. Vi har inte supermånga tabeller ännu i biblioteket. Jag bara tar det som ett exempel. För där kan man se framför sig att en Low level-versioner av sådana komponenter kan ju mappa väldigt nära hur det funkar i HTML så att du jobbar med Rose och Header och olika typer av celler och så vidare men en high level komponent kanske tar en lista av data som den kan mappa om till det där under huven. och för ganska många ljuscases så räcker det. Och då är det ganska nice att skicka in datan som du kanske bara måste skruva lite grann på så att det passar. Och sen så får du en tabell. Och istället för att, ja visst, då ska jag göra typ 88 rader kod här för att bara göra min tabell med, liksom mappa igenom saker och så vidare. Det är väl ett exempel. Ett annat exempel är att när man jobbar med inmatningsfält i formulär så består ju de under huven av ganska ... alltså de är ju rätt nära elementen i browsern, som input och så vidare. Vi har till exempel en komponent som är en textfield då och då kombinerar ju den själva input-fältet med ett sätt att sätta en label på den och ett eventuellt valideringsfel så sköter ju den om kopplingarna där sinsemellan under huven så att labeln blir associerad med inputfältet och valideringsfelet också utan att du som konsument behöver liksom såhär, men hur var det nu? Guide by ska vi, sådana saker. så det är det jag tänker på. Men det är ju jag tror att vi har stött på många gånger att man bara säger – är det här en higher level abstraction? Till slut kanske man hamnar i någon atomic design ändå. Kanske både och, det är en ständig utmaning att få till den där balansen. Ja men det här kan ju vara en jättefin komponent. Jag behöver skicka in 300 saker till den för att den ska funka. Kan jag tänka om i det här så jag slipper det? Men då kanske man på en sån high level, och det är ju också en, jag vet inte vem det var som hade ett sånt talk någon gång men att de pratade just om API-design på en konferens. man har ju sett exempel på en react-komponent då som liksom har typ 38 props för att man har byggt på vartefter. Japp just det, vi måste stödja det här också. Då är det ju bättre att separera det till helt olika komponenter. Så att det blir lättare att underhålla över tid. Så det är väl lite av de tankarna. Mycket av det är common sense. Men delar av det har man absorberat under de här åren som ändå stötts lite mot det här även om det inte varit ens huvudsakliga arbetsuppgift. Det finns ju ett stort värde också i att få, alltså sånt som du säger, common sense grejer, att få dem uttalade och utskrivna. Det är ju en väldigt stor nytta i sig. Annars är det ju någon i teamen som tycker att något lite annorlunda är, ja men det här är väl kommet sen. Och sen så har man plötsligt dragit iväg på två spår igen. fast det inte var avsikten. Nej, och en utmaning är ju att som jag nämnde där, vi två som är utvecklade i teamet just nu har ju jobbat med det här innan så frågan är vad som är liksom inne i våran ryggmärg, och vad som... Jag tror att det kan finnas ... en utmaning är ju att försöka få ner det här – på ett enkelt och överskådligt sätt. Det här är ett mindset som vi tillämpar. Jag vet inte var gränsen går, var lämnar det ena hjärnhalvan på oss två och var möter det nån dokumentationssida. ”där har vi säkert ett jobb att göra.” Om man ser till framtiden och att man skulle onboarda någon ny, någon försvinner och så vidare. så försöka de grundprinciperna som man på något sätt lutar sig mot nu nu som säkert kan ändras också såklart. men det här är det vi förhåller oss till nu. istället för att ha en uppsättning regler regler som blir omfattande och komplicerade och granulära så är det så här: Vi försöker ha några grundläggande principer som vi tänker på när vi tar fram komponenter och vad vi än tar fram egentligen. Ja visst, och lyckas man få ner sånt i text eller bilder, då har man ju något som är väldigt nyttigt. Som du sa innan, allt man levererar är inte bara komponenter utan informationen runtomkring kan ju vara supervärdefull. Även om den kan vara svår att få fatt i ibland. Det är ju också en intressant grej för att ibland våra utvecklingsteam så sitter majoriteten av dem just nu och jobbar i React-applikationen. Och det har ju då pragmatiskt varit våran... Alltså det var så det började och det är fortfarande så. Det betyder ju att jobbar man i något annat än React och jobbar man i mobilappen eller jobbar man i något av de andra bolagen som ingår i samma koncern så kan man inte nödvändigtvis ta del av komponenterna. För de är ju rent specifika. Just det. så då blir ju riktlinjer och liksom design tokens, och sånt blir ju desto viktigare så är det ju såklart också jätteintressant att fundera på hur skulle vi kunna brygga gapet mellan olika ramverk och kanske till och med olika plattformar men hittills, teamet har ju varit verksamt i tre kvartal ungefär nu vi har inte känt att det känns inte så pragmatiskt att liksom börja gå utanför till något ramverksagnostiskt när så stor procentandel av allihopa ändå sitter natively med React. Men det är ju definitivt en fråga för nära framtid, förmodligen. Ja, men det är ju som du säger, det är ju en lågt hängande frukt igen. Vad är vettigt att börja med? Var får vi stor utdelning på det? Och det kanske inte är att skriva ett generellt dokument för alla typer av gränssnitt. Nej, men exakt, och håller man sig på webben och och tänker att så här, men hur kan vi stödja? Vi vill ju förmodligen... Vi kanske inte vill, och kommer, jobba med React en massa år fram. Det kanske vi gör. Men då kommer man ju onekligen tänka på sånt som webcomponents. Jaja, visst. Webcomponents, där är det också lite svårt för när man läser om webcomponents där är det också ganska polariserat. – Ja, verkligen! Use the platform-gänget och så hör man FRAMEWORK Authors – det är liksom de två grejerna. Jag tycker det blir lite svårt. Det är därför jag varit lite försiktig med att skynda mig in i det. Vi jobbar ju ändå i huvudsak med React det ju synd om man ska behöva hoppa igenom en massa loopholes för att webbkomponents react ska samspela. – Ja men eller hur. Webcomponents låter ju så bra på pappret men är det så bra i praktiken? Man kommer till alla komplexa detaljer som Shadow of them och hur lirar ramverken och domen egentligen? För många av ramverken går ju liksom en annan väg när det gäller hur de renderar appar? Ja, precis. Som är lite mera, Ja, vad är det man kallar det? Typ Lazy Rendered medans domen traditionellt är eagerly rendered liksom, och då är det så här Samspelar det verkligen? Visst, det kanske är liksom... Jag har nog inte satt mig fullständigt in i det men det är något vi har lust att titta på lite sen. Det kan ju hända att delar av utbudet av komponenter funkar kanon som webbcomponents om de är liksom längre... de är ganska enskilda. Det är liksom ingen komponent som rappar en massa annat utan det kanske är typ en date picker eller en... någonting som är liksom en leafnode typ i hierarkin av alla. Ja, just det. Nej, det känns inte nödvändigtvis som en silver bullet, men vi vill ändå utforska det. För jag tror att tittar man i ekosystemet bara i Sverige av andra designsystem och det gör vi ju liksom själva mycket också. finns ju i Arbetsförmedlingen och SJ har vi inspirerats ganska mycket av. - Ah, så de kan man surfa in och titta på! Jag tror att de relativt nyligen gjort ett omtag på sin SJ Design eller nåt sånt. Så de har gjort ett bra arbete och det kan man hämta mycket inspiration kan man hämta inspiration från. Jag vet inte jag ska inte svära på hur de gör kring det men vissa andra kör ju 100% webcomponents. Jaha, de gör det? funkar säkert jättebra, men jag tror att vi utforskar det i framtiden helt enkelt för att se vad det är. Sen vet jag inte, det är ju liksom inte helt otänkbart att landskapet ändrar sig lite grann heller nu när AI är på stort intåg och utvecklingen går så pass snabbt som den gör. Ja, men precis. Det tyckte du var intressant. Det sa du ju precis innan vi började spela in här. Det kan ju mycket väl komma att påverka vad ni bygger och vad man gör och hur. Och det var en sån grej som jag inte hade slagits av förrän du sa det. Nej, jag vet inte om jag hade slagits av det själv för några veckor sedan heller men alltså vi har pratat lite mer om det, för det har ju säkert inte gått någon förbi att det händer saker på AI och kanske från utvecklarperspektiv så har man ju traditionellt ... eller man har kanske tänkt på men vad betyder det här för mig, vad betyder det här för mitt yrke, men om man bortser från det så tänker jag ju att våra användare som vi bygger tjänster och appar för idag hur ser deras interaktion med de apparna ut i framtiden? Delar av det kommer ju säkert att övergå till att vara nån sorts assistent man kanske pratar och ber om, eller chattar, vissa stora komplexa flöden deklarationer eller du ska ansöka om bolån eller vad det nu är det kan ju vara ganska omfattande och komplexa formulär det kanske är nånting som skulle vara var jättebra som ett chattflöde i framtiden, för då kan du ställa frågor under tiden om det är något som du undrar. men sen tror jag personligen att vi kommer ju säkerligen att ha kvar grafiska gränssnitt för diverse grejer Men det är också så att i våran interna produkt och dess framtid så blir det ju någonting som man har kommit underfund med nu att det här måste vi ju ändå tänka på. Hur ser framtiden ut kring det, och vart är vi på väg? Det finns ju, vad är det de kallar det Computer Vision. Visserligen att datorn tar skärmdumpar och navigerar. Då behöver vi ju ändå ha ett gränssnitt som är bra då, om det är tydligt och tillgängligt. Men exakt, tillgängligheten lönar sig igen. Ja, men exakt. Nej men det är klart att det måste finnas någon aspekt också där det blir andra interaktioner som gör att man kanske vill presentera saker på andra sätt. Det kanske är för ett annat behov av visningskomponenter som kan visas tagna ur sitt sammanhang. Det är inte så att vi har ett jättestort formulär men jag vill presentera resultatet och då har jag resultatkomponenten men jag har inte resten av informationen runtomkring. Man kanske vill integrera inmatningsfält i det här flödet också istället för att allt hela tiden ska vara en fritext åt en GPT-rapper. så känns det som en mix av båda världarna. Men jag tycker det är svårt att veta vart vi är på väg och det blir spännande att se. Och det är väl lite som vi snackade om innan att man får försöka vara snabb på att inte sitta inlåst. Nu jobbar vi med det här i två år, sen ser vi hur det blir när det händer. att man är snabbrörlig och håller örat mot rälsen. Ja, exakt. Det blir nästan mer intressant om man tänker så också. att det kan komma sådana grejer. Det finns fler aspekter att tänka på än bara de som man har framför sig precis nu. Ja, men exakt, och det tror jag gäller om man går in på temat AI och utveckling också att det tycker jag också att det är lite svårt att veta. precis som i webcomponents är det också polariserande åsikter om det. Det är all in eller all out. Vem ska man tro på, har de som är åt ena hållet den andra ett incitament att si eller så – jag själv har använt AI Framför allt, under en längre stund för dokumentation för att hitta ett konsekvent och professionellt språk men också lite blank canvas-grej att man får: vi ska dokumentera en knapp, eller vi ska dokumentera en komponent som gör det här. Ge mig ett utkast och så tar vi det därifrån. Ja, hur ser vi något att börja med? Nej men jag tror att min personliga resa när det gäller AI assisterade utveckling har ju varit så här att man har fått den här wow-faktorn och sen har den på något sätt efterföljts av en, ja, typ att den kör fast och man bråkar med den här AI för att liksom komma framåt. men ju mer man fortsätter, ju mer hallonsignationer och så, blir det. Ja, men exakt. Tycker det var en väldigt bra beskrivning. Men den har ju kommit i omgångar också. Nu finns det ju bättre integration mellan en AI-agent och en editor. Och det har också blivit en wow faktor. men det känns också som att man kommer till... Man förstår ju att när den har den här chain of thought-grejen grejen att den kan prompta sig själv prova outcomes och så vidare. så förstår man ju att resultatet blir mer träffsäkert. men det känns ju nånstans också som i slutändan att hur de fungerar gissar sig ändå till vad som är rimligt att göra härnäst. så det känns som att hittills har jag fått några såna där wow-faktorer men ändå känt i slutändan av, när det gått två dagar den lilla honeymoonfacen är över då stöter man på de här friktionerna där det liksom tar stopp. Ja men exakt, det tar stopp på ungefär samma stil som sist. Fast på en lite annan... Jag känner mig väldigt mycket så också. Och samtidigt så pratar jag med folk Ja men med jämna mellanrum som verkligen har... Det känns som att de verkligen har hittat arbetssätt ihop med AI som verkligen funkar för dem och de blir genuint mycket snabbare på att göra saker och jobba på det sättet. På det sättet kanske det är ett sätt som inte alls passar mig för att jag är gammaldags och vill sitta och titta på koden utan att bli störd av förslag mitt i. Nej men, det är en av de grejerna som jag tycker är tråkigast med det. Jag tror också att i någon grad så kommer väl det här... Man kommer väl nästan vara så illa tvungen att använda det för att behålla en viss produktivitet. sen så tror jag inte att man behöver förlita sig på det helt och hållet. Nej, det är ju frågan. Precis. Det är frågan. Vem vet. Men jag tänker så för min del ... Jag jobbar ju i VIM och jag tycker det gäller NEOVIM specifikt. Jag älskar det att skriva. Jag tycker det i sig är så kul. men den... jobbar i terminalen, då är det inte nödvändigtvis så att det är där ny funktionalitet kring det här kommer först. Och då blir man sådär, ska jag testa någon nyhet? Det tar jag för att prova. Jag tror jag delar din åsikt där, att jag vill ju sitta utan distraktioner och bara få göra det som... För det ger mig glädje. Ja och samtidigt så är det ju onekligen så att när jag har Copilot påslagen i Visual Studio Code... Jag vill ju kanske egentligen inte ha så mycket av intelligensen. Men däremot att den ibland funkar som en väldigt mycket smartare autokomplettering. Ja, spara tid helt enkelt. sparar man ju lite tid då och då, och hjälper med att avsluta en grej och samtidigt hålla en tanke i huvudet. Så det är väldigt balansgång. Det är både störande och lite hjälpsamt samtidigt. Ja, men exakt. Det är intressant. Det kan vara mycket frustrerande också. ja visst, jag menar på mina mer cyniska humör så kan jag tänka mig att om tillräckligt många går tillräckligt hårt in på AI i utvecklingen så kan vi vara några andra som sitter i ett hörn och känna storkovan på att vi skriver väldigt pålitliga små saker med minsta möjliga kod som är hantverksmässigt skriven. Det är mycket mer förutsägbart. Jo men precis, det är väl också en av aspekterna, både när det gäller att producera kod kanske är en aspekt i sig men, se alla de här bildgenereringarna. Det är ju inte så att du får samma resultat när du ställer samma fråga. Det blir ju lite svårt att veta vad som kommer ut. Det kommer säkert funka, men det är där i den balparken. Ja, men precis. Det är som att prata med någon slags drömgenerator. Det händer något i en dröm och så tror man att det är samma och så har plötsligt allting runt omkring ändrats. Nej, exakt, exakt. Men jag tror alltså... det kommer väl att vara viktigt att fortsätta vara nyfiken på det i alla fall så att man liksom inte frånskriver det helt och hållet. Nej, men precis. Använda det till en rimlig grad där det känns som att det gynnar en och inte att man till slut bara sitter där... Vem vet vart vi är påväg. Vi stämmer av igen om två år och ser vad som faktiskt hände. Är det något mer vi borde få med innan vi avslutar för idag? Jätteintressant. Jag tror inte det. Jag tror att vi har varit inom det mesta som jag har i tankarna. Jag tror att det finns några länkar Vi kanske skulle kunna lägga in i någon beskrivning för ett avsnitt. Jag lägger in massor med länkar inklusive till SJs designsystem också. Jag tycker att det är trivsamt att de har gjort en sajt för sitt designsystem som bara visar komponenter men den känns samtidigt 100% SJ. Så de har lyckats få till en enhetlig känsla på det på ett ganska stiligt sätt. Det är också så här ... Det är lite power move att lägga sitt ansiktssystem publikt. Vi hade säkert också kunnat tänka oss att göra det i framtiden, Men vi har inte vågat göra det ännu. Det har inte funnits tillräckligt skyltfönstervänligt material kanske. Nej, jag kan helt förstå resonemanget. Men som sagt, vi länkar in sånt också om du kommer på några fler grejer som vi borde länka med så tar vi med dem också. som folk massvis tittar på. Jättebra. Ja men då så, tack så jättemycket Johan för att du ville vara med. Ja tack för att jag fick vara med. Tack för att just du lyssnar på kodsnack. Om du vill stödja oss, varför inte tipsa en bekant om podden? eller lämna en recension i till exempel iTunes eller nåt annat ställe där det går att sätta betyg på poddar. Du kan också stödja oss genom att köpa oss en kopp kaffe på kofi.kobindelsekfi.com/snack. Alla pengar går direkt till att göra podden bättre och trevligare. Du kan också komma och hänga i vår Slack-kanal. Länk finns på kodsnack.se precis som alla andra länkar och all annan info kopplad till varje avsnitt. Sist men inte minst finns det också en länk till vår spreadjobbutik där du kan köpa tröjor och andra prylar med kodsnacktryck. Återigen, tusen tack för att du lyssnar. Vi hörs. Det kan tyckas vara så, mr Rama. The 9000 Series is the most troviable computer ever made. No 9000 computer has ever made a mistake or distorted information.