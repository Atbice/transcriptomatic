Jag minns att vi hade en QA-person då som ibland gick i taket över det här för att ... Det var såhär, nu har du ju gjort massa ändringar. Hur vet du att det här funkar? Och det här smögs alltid med, liksom lite för cua-personen. Du lyssnar på Developers, podden där du får följa med oss, Sofia och Madde på allt inom mjukvaruutveckling. Vi är stela. Det är bara att säga slut på saker att säga känns det som. Fast vi har massa saker att säga. Men de kanske är rants utanför techvärlden. Eller? tacka våra stjärnsupportrar på Patreon, så snackar vi om vad vi ska snacka om. Jo, jag måste spara luft i mina lungor, för det är så mycket täcknyheter. Jag vet inte hur jag ska orka läsa igenom det här. Okej, men då kör vi och tar och tackar våra skärmsupportrar på Patreon. Det är alltså de som stöttar oss med 100 kronor eller mer per månad som får sitt namn uppläst här. Per Notby, Celie Mjorthall, Stygg hingst och Thomas Nilsson. Tack till er och tack till alla andra som stöttar oss på Patreon och alla andra olika sätt som ni supportar oss. Ja, det var någon som köpte merch häromdagen, blev så här glad, när det droppar in lite då och då. Och ibland ser jag någon på jobbet som har vår Merch, som inte går fram och skryter om det varje dag. Utan bara så här, jag har er Merch. Det är nice. Nej, men låt oss hoppa in i nyheter. Du har använt Create React App, eller hur? Ja. Jag vet ju det. Det vet du att jag har. Men det kanske inte är någon som har gjort det. Om man är ganska ny kanske man redan vet att man inte bör bör använda CreateReactAp eller om man inte är frontenutvecklare. Eller om man inte är frontenutvecklare men vad ska vi säga då. CreateReactAp var. Jag vet inte för att det fanns. Det kom nog precis när jag började jobba med React så att det kändes som en game changer men jag vet inte hur pass mycket game changer det var. kom 2016 och det tog bort mycket av krånglet med att hålla på med all boilerplate kod för att konfigurera ett helt Reactprojekt, du vet Webpack Configs och Babelkonfigs. Det var ju nice, för att där är vissa saker i CreateTract-app som inte kommer med automatiskt till exempel serviciderendering och lite sånt som vi då behövde i den applikationen. Men det är jobbigt att underhålla det också. Det tog jättelång tid. Det tog bort mycket av helvetet som innebär att jobba med frontend. Ge er inte in i det, för det är inte så jättemycket bättre nu. Jag kan inte spöa på den rant:en, men det var i alla fall... jag skulle säga att det var synonymt med att starta ett React-projekt. Ska du starta ett projekt självklart använder du CreateReactApp för att sätta upp allting och jag ser det fortfarande i dag när folk lämnar in sin kod till tech-intervjuer, att folk fortfarande använder det. Det är sådan vana man har. Även nu, alltså med vitt och sådant? Om man börjar där det kom en... Det är det här jag ska gå in på, som med tjafset. Åh, alltid kul med tjafs. Ja, så det har varit tjafs. Som du säger,project direkt ups har inte haft stöd för allting som är mer modern webb i dag. Så det är inte chockerande att det läggs ner. Men det hände ett drama under 72 timmar efter att de offentliggjorde att det verkligen ska läggas ner helt. Så jag ska sammanfatta dramat. React-teamet gjorde ett blogginlägg där de uppmanade utvecklare att överge CreateRactApp och att man ska gå över till NextGS Beact Router eller till och med bygga ett eget ramverk från grunden. Det är de här sakerna du kan göra. Men jag vet att de har varit så här: Håll inte på att bygga från grunden. Så de har väldigt: Använd NEXTJS. Jag tror att du har sett det på hemsidan när man går in så är det: Använd NEXTJS, det kanske de också rekommenderar. Men och nästan ingen nämnde, alltså det heter vitt. Men de flesta tror jag säger vitt. Folk som inte snackar franska. Någon kommer att hata att vi säger vite. Hur säger du det? Jag säger vitt. Du säger vitt. Men jag har läst franska i fyra år. Fancy baguette ... Okej, men vissa kallar det byt. Vitt är jättepopulärt bland reaktutvecklare. Typ alla som körde Creact React Up, som får reda på att det inte var toppen längre Ett alternativ är att du går över till vitt. Det är jätteenkelt. Så att många utvecklare blev väldigt arga och menade att react-teamet var partiska mot vitt och förstår inte hur communityt faktiskt arbetar. De flesta har gått över till vitt i stället för att migrera till Next Yes. Det känns mycket mer, visst det är kanske bra om du ska bygga någonting stort och robust. Det är mycket mer du får på köpet som du kanske inte behöver alltid. Ja, de gick till och med så långt att de anklagade REAC-teamet för att vara köpta av någon som skrev så här. Av Big Framework. Men vad då? Alltså vem ligger bakom Next Sea egentligen? Hosting. De kör Hosting. De bygger Next CS. Nu kan jag vara ute på vatten, så insatt är jag inte eller som har gått in och börjat jobba i Fernixt, IS-projektet och vice versa de är väldigt sammankopplade Det blir väldigt färgat, jag håller faktiskt med om det. Det här twitter-tjafset Höll på i några dagar, och det var ganska underhållande i alla fall när man såg posterna från det. Men till slut lugnade det ner sig och reakt-teamet uppdaterade sitt blogginlägg och hade lite mer balanserade, nyanserade rekommendationer, Så nu är fredagen återställd, men i alla fall lite drama Men jag hoppas att ni har fått budskapet med er sluta använda Createract Up. Det är liksom officiellt dött. Alltid kul med lite drama. Men det var fint att det löste sig att de blev vänner till slut. För oss utvecklare, kanske. Men Amazon... Alla stora företag har jobbat med AI, LLMS, och släppt någonting för att vara relevanta i AI. Amazon har ju inte gjort det. Nej, men de gör ju så mycket annat. Ja, men samtidigt. Som är en av de världsledande cloud providers och sånt. Har du Azure, AVS eller Gorecloud, så håvar du in pengar på att inte göra någonting, i princip. Absolut, de har haft olika typer av LLM-tjänster i det. Men de har ändå inte riktigt varit med i gamet som någon som gör modeller, eller hur? Nej, nej, nej. Jag vet att de har haft Code Whisper. Men ändå. De har ju sin assistent Alexa. och det är väl där man förväntar sig att någon slags utveckling ska ske. Och nu äntligen så har de rullat ut Alexa Plus I alla fall presenterat. Jag tror att man kan signa upp det och det finns olika erbjudanden om du har Prime eller inte. Det är väl spännande. Alltså, alla de här Siri och Alexa är helt värdelösa. Du kan i princip inte göra någonting förutom att sätta på musiken eller släck lampan. Men samtidigt med det sagt så är liksom såhär miljoners miljoner människor som ändå interagerar med Alexa och säger starta musiken eller släck lampan. Jag vet inte vad det kommer att leda till, men det är väldigt många användare som de introducerar features för. Exempel som är helt... Det är ingen som gör så här i verkligheten. Det var typ så här, ja, men nu kan du Använda AI för att beställa en Uber åt din kompis när din kompis kommer till flygplatsen? Gud, vad krångligt scenario. Men det är skitjobbigt att säga det. Men den fattar inte handlingslista. Jag har i alla fall inte lyckats. Vi hoppas att den är bättre. Men jag är väldigt trött på exemplen som ingen i världen någonsin skulle göra. Folk beställer sig nu själv. Liksom inte ett verkligt case, men det visar att de ger sig ändå in i det här. Visual Studio Code känner du till och har använt, kanske? Aldrig hört. Jag vet inte, det vet väl alla vad det är i den här stan, eller? Tror jag nog. Om man inte jobbar med något väldigt obskyrt språk. Men det är en idé som förr används av ... nu vågar jag inte säga det. Det känns som att människor använder Vision Stereo Code. började plugga, vad är skillnaden på Visual Studio och Visual Studio Code. Så sa jag att Visual Studio det är för backend.net och Visual Studio Code är för fronten. så har han sagt det på sin lia och då hade de skrattat åt mig. Nej, det har hon absolut inte sagt. Det var inte en så dum förklaring. Men vad menar de? Hur hade du fel? Nej, jag vet inte. Klart att du kan köra andra saker i Vicious Studio Code också. Men det är hemskt, och du gör inte det. Nej, exakt. Nej, side note i alla fall. Jag avskyr när folk föreslår det. Alltså, förlåt min chef, du är bäst. Intelligent, för jag bara ” behöver du verkligen Intelligent?”. Det går ju att köra i Visual Studio Code. Jag tänker inte sitta med ett Full Fledge-språk när jag har en Full Fledged ID, och sitta i Visual Studio Come med skitförlängningar. Nej, jag är benägen att hålla med. Det är för att vi är färgade av Visual Studio som har allt liksom. Okej, vi har förklarat vad det är nu. På dåligt sätt och folk skrattar säkert antagligen igen. Men, i alla fall. De har ett väldigt populärt tema man kan ha väldigt många olika teman i den här idén som heter Material och det är för Man har upptäckt misstänksam kod, så materialsteam var väldigt populärt tema. Det hade mer än sex miljoner användare och det är inspirerat av Googles material design. Men nu är det alltså helt borta. Vad kan man slänga in för farlig kod där? Ställ inga frågor, säg bara ja. Jag bara funderar, men visst det är klart. Har man ont uppsåt så kan man ju lyckas göra det med det mesta. Det ändrar väl inte bara ... eller? Ändrar man bara färg, “color black”? Det de sa var att det fanns mycket kod som har onödiga beroenden till saker. De körde några Child-processer i VS Code vilket var väldigt märkligt för ett vanligt tema. Äh, jag vet inte. Så det är borta med det. Orange tuva. Jag associerar med orange i alla fall. Det är ett färgglatt tema, men det är lite så här: Det är lite mognare, skulle jag säga. Det är bara skönt för ögonen, det är inte så skrikigt men ändå färgglatt. Om någon vill kan vi göra ett avsnitt om alla teman vi har och alla vår uppsättning. Allting som vi använder. Då får ni önska det, annars kommer jag att tycka att det är pinsamt. också AI stuff. De har släppt en ny version av sin populära LRM version 3.7. Alltså Claude då, eller? Just den här modellen heter Sonnet. Ja, men det gör väl alla. Som används. Jag vet inte om Clard är det fina namnet. Antropic är som OpenAI, och sen har du ChatGPT som är CLAD. Och sen är Sonet själva modellnamnet, som typ 01. Förmodligen. Ja, förmodligen. Jag orkar inte, jag orkar inte tjejgissa saker här, för det blir alltid fel säkert. Men det låter jätterimligt. Det har kommit en ny version av den. Just Sonnet 3.5 har ofta, enligt de flesta benchmarks, toppat ligan i att vara en bra kodassistent och generera kod. Vi ska vara bättre på kodning och specifikt front-und-utveckling, Som en del av det här satsar man också på ett verktyg som heter Cloud Code, som är en AI-agent som konkurrerar med liknande lösningar som Devin och andra AI-verktyg. Är det bara jag som tycker att Clode Code inte var ett bra namn? Det blev lite äckligt. Äckligt? Glad Code. Claude? Ja, jag vet inte. Det låter som en butler. Ja, faktiskt. Nej, jag vet inte. Bara så dåliga produktnamn. Så här, 01, eller vilken modell ska jag använda idag? 01, eller 03 mini, eller 4o, eller det är så dålig produktpresentation. om den bästa modellen för det du vill göra. Det vore asbra. I alla fall, den tidiga versionen Sonet 3.5, den blev jätteframgångsrik och de flesta Ideas med generativt AI-funktioner började använda den, men för GitHub CoPilot användare i och med att de tillät sådana 3.5. Men den här gången så har alla stora utvecklingsverktyg, inklusive Github Copilot, redan lovat stöd för 3.7. På tal om Github Copilot så släpper Github Copilot sin Code Review-funktion. Jag fick mail precis igår, att min Copilot licens har uppgraderats med den här funktionen, för vi betalar för det på jobbet. så det ska bli jätteintressant att testa. föreslår vilka tester du kan ha, den rättar stavfel. Vi som klagade på stavfel för något avsnitt sen. Men ja det är jäkligt coolt. Sen tänker jag att den lär ju inte fatta kontexten särskilt bra. Vad stavfel och liknande och skriver en tester åt den också. Eller bara säger den typ “Du borde testa detta”. För det hade varit sjukt nice om den bara “Du borde testa den här, här har du ett unitest”. Jag vet inte. Vi får testa. Det stod bara att den föreslår tester. Så jag vet inte. en bra purrequest-sammanfattning åt en för att den saknar kontext. Det blir kanske så här: Jag har ändrat detta, jag har ändrat detta. Okej, men det är inte intressant om jag inte vet varför du använder detta. Är man för dålig på att använda bra domänspråk? Ja, det är också ett... Kan man känna att man borde bli bättre på det. Och vidare till Google. Vi måste ju nämna alla stora aktörer innan vi är klara. Google släpper sin kodassistent Gemini Code Assist gratis för privatpersoner. Tidigare så kostade den 22,8 dollar i månaden. Otroligt. Så särkonstigt specifikt. De hoppas väl på att råka in fler användare. Det här har de gjort med alla sina AI-verktyg. Först så ville de att alla skulle betala för det. Men ingen ville betala för det så nu försöker de tvinga oss att använda det i appar istället. För att nu har de sagt "Okej, ingen vill betala för det. Vi vill ju ha folks data". Så låt oss tvinga dem att släppa det fritt. Ja, som sagt. Jag vet inte hur många gånger man har hört att om någonting är gratis, så betalar du ändå någonting och oftast ser din data. Exakt, så vi får se om de hinner ikapp. Copilot och Curser. För företag kostar Germani Code Assist fortfarande dock 54 dollar i månaden. Det är ganska dyrt. Eller vad kostar Copilot? För företag vet jag faktiskt inte. Det är antagligen också dyrare. Din dataprocessas bara på en dedikerad server som de inte har tillgång till. som de inte har tillgång till. De får inte träna på din data. Så där förstår jag att man får betala. Eller vänta, men här står det... Det här är priser i dollar och det kan vara annorlunda på vår marknad men här står det att Gemini Coda Assist kostar 54 och GitHub Copilot Enterprise kostar 39 dollar. så den är dyrare. Men ja, det var nyheterna. Jag kommer tänka på att vi borde tagit upp någonting om allting som varit med Firefox. Har du hört någonting om det? Ja, men jag orkar inte prata mer. Jag dricker vatten så får du berätta. Jag har inte alls förberett någonting, men jag läst lite om dem. De har uppdaterat sina terms and conditions nu. AI-träning eller något kan jag gissa. De har blivit uppköpta också. Men folk har ju slagit bakut nu, och letar efter alternativa browsers. Det finns ju typ Libre Wolf, som är en fork av Firefox, om man nu vill fortsätta använda Firefox, men inte sälja ut sin själ. Brave och en massa obskyra alternativ som jag knappt ens har hört talas om. Det där är tråkigt, för jag har inte hört om dem. Att de erbjuder att du kan betala något och slippa undan det. Jag förstår att folk behöver tjäna pengar. men de kunde haft en modell som betalade 20 spänn i månaden. Så hade nog väldigt många gjort det. Ja kanske. Jag vet inte, jag har inte faktagranskat detta ännu. Men en stor anledning till att de har mindre pengar är för att Google har slutat supporta dem. Google har supportat ganska många rowsers mot att då få ha Google som default-sökmotor, nu när de inte längre får göra det i och med de här lagarna som har trätt i kraft, Så det är EU som har förstört det? De skiter i att supporta för då får de inte ut någonting av det. Så det är vårt fel, européerna? Ja, exakt, skyll på det. Okej, men då ska jag inte säga något. Fan, vad de måste vara trötta på oss, Siv. Från vår vän Kajtan Kazmirsak, vars namn ni har hört många gånger. Han frågar så här: Hur löser man bäst konflikten mellan att vara lite av en scout och alltid lämna koden i bättre skick än när man fann den. fullt förståeligt kanske. En policy om att NPR endast får innehålla lösningen på en feature eller bugg och inget annat. Samtidigt vill man inte att koden ska förfalla för att det inte finns tickets i gira för något litet man precis har hittat. Och att skapa en ticket, får en prioriterad och kanske får återkomma till den senare är rätt omständigt om det handlar om till exempel namnet på en lokal variabel som är felstavat. Det jag reagerade först på var att flera arbetsplatser har en policy där en PR endast får innehålla lösningen och ingenting annat. Jag har aldrig varit med om det. Inte jag heller faktiskt. Jag har inte hört det som att det skulle vara ett problem på det sättet. Att man bara får göra det. Sen kan jag förstå att man inte vill trycka in hur mycket som helst. Man får ha lite sunt förnuft. Ibland blir det att man måste lägga ihop vissa saker, det har jag i alla fall gjort mig skyldig till. Jag har definitivt varit med om att folk diskuterar det här i ett team, men aldrig att det funnits en strikt policy. Jag tycker bara det låter helt sjukt. att man ska behöva göra en ticket av det och få den prioriterad. borde diskutera fram kanske någonting att ta upp på retro. Och säga det här att jag vill kunna lösa små saker, för att jag är helt med på det här scout-tänket. Jag tycker det är klockrent. Ser man någonting som behövs fixas och om det bara är ett stavfel. Eller någon lintgrej som har blivit fel. Då har jag bara gjort det i samma PR. om det är relaterat till det kontexten. Men om man ser att det är en funktion som skulle behöva refaktureras för att den är lite otydlig, man kanske vill bryta upp det jättelånga till lite olika variabler och sånt. Då kanske det är mer, okej, kanske ska jag göra det till eget. Men då hade jag ändå bara gjort det med egen PR och inte skickat in den samtidigt. Det kan bli tjafs så att man är oense. Jag tycker att man ska städa upp när det är ett stavfel, men jag förstår problematiken att du behöver refakturera en funktion eller att du ändrar en massa stavfel. Du ändrar saker som känns små, men i och med att koden inte har tester, så kan du ha faktiskt... introducerar något nytt stavfel och det upptäcks inte förrän du har tryckt ut det. Jag vet inte. man använder Magic Strings. Istället för att du har en konstant eller enum, så jämför du ett strängvärde. Och så har du plötsligt bytt strängvärdet. Och det är ju mycket lättare att detta trillar mellan stolarna om, man bara gör lite under radarn. Det blir ingen spårbarhet och du inte har en ticket att koppla det till. På det sättet. Jag har jobbat med en utvecklare, som jag har väldigt stor respekt för men som var väldigt snabb och typ, upptäckte att shit, det här behöver göras om. för att man behöver underhålla sin kod. Man ser en halvt år senare och bara; vad fan är det jag skrivit? Men som som kände att det var en bra idé och passa på. Och... så försökte vara noga att det skulle vara lätt att reviewa. Men jag minns att vi hade en QA-person då som ibland gick i taket över det här. För att det var så här Nu har du gjort massa ändringar. Hur vet du att det här funkar? Det här smögs alltid med för QA-personen. För att den här utvecklaren visste ju att QA-personer skulle fråga, och så var det ju också störigt för vissa som utvecklare. Ibland kom det en väldigt stor, ”Nej, men det här är bara en refakturering. Jag bara liksom gör om hela strukturen. Sitta och granska det som kollega utan en ticket. Det kunde vara svårt. Ja, men det känns som en större grej. Man kanske kan ha någon slags är det mer än 2 minuters jobb att implementera, och mer än 15 minuter att testa. och jag skulle inte blivit sur om någon utvecklare la upp en ticket och bara drog in den i typ development och körde. Det tycker jag också är nice. Det låter som onödig bromskloss att man ska sitta och prioritera upp det och så vidare och sen prioriteras det inte upp och så glömmer man bort den. Som ändå är så litet att man gör det samman, så bara kör. Enda gången jag skulle vilja lägga det i någon prio-backlog är att om det är ett större arbete. Om det är en dags arbete eller en halv dag, då snackar vi, nej då kan du inte bara smyga in den lite. Ja, precis, för då sitter du ändå och har prioriterat ner nånting annat. Alltså, man får ändå, man behöver ändå vara transparent mot alla i teamet helt okej för pn, men man behöver liksom lyfta det och prata om det och det kan vara typ såhär, och det kan vara sjukt störande som utvecklare. Man är såhär, måste göra det här, det går ganska snabbt, det tar bara en halv dag. Men de vill ändå ha lite koll och förstå vad som händer, och varför ni lägger tid på det här. Ofta brukar man lägga in lite padding för maintenance tasks och sånt, när man gör sprintplanning och sånt. Det håller jag med om. Vad säger du? Jag känner igen ett scenario. Det här stör mig faktiskt väldigt mycket bland saker som stör mig. upp det här någonstans. Så att vi kan göra ett avsnitt om saker som stör mig med andra utvecklare. Säg att det är så här: Det tar 20 % av din sprinttid att göra det här. Eller 50 %. Alltså, men... Och så säger vi att nej, men... eller säger att det här kommer inte att ta så lång tid. Så det de gör i stället är att de tycker att det här är ett rätt roligt arbete. Så de sätter sig på kvällarna och gör det här. Okej. och påstår sen, även om du varit med om det, men jag har varit med om det flera gånger från olika personer. Det är så roligt att de gör det på kvällen. Men det är ändå någon som ska jobba med detta sen och testa det. Granska det. De personerna säger ofta: Det är inga problem för någon. Jag har suttit och gjort det här själv, och hur kan inte alla bara vara tacksamma att jag sitter och gör det här på min fritid. Men jag vill inte ha det så. Jag vill inte att det sitter folk och kodar hela nätterna. att folk ska se att jag gjort det. Det ska inte stressa teamet att här sitter någon och ett hobbyprojekt då det stör mig och definitivt har vi folk som lyssnar som gör så här. Jag tror jag gjort så någon gång också. Jag känner mig smått träffad. Jag är träffad själv också någon gång, men det finns vissa som är väldigt så alltså med större grejer att de inte förstår att det är stort och de insisterar på att Du vet att de låter inte den här purrequesten vara i draft, att så här, för det är fine. Gör det på kvällen, lägg upp en purrequest och skapa en ticket. Så här, lugna ner folk, asså preppa dem lite. Jag vet att det är störigt, men gör det här lilla extraarbetet för folk så att du inte bara trycker in saker. Åtminstone det. Någonting, kommunikation typ. Vad ville du säga? generellt, typ förbättrings-ticket, alltså som man kan då koppla till och att man då, för de flesta verktyg så kan du ju ändå skriva en kommentar till, Alltså kopplingen till din ticket från din PR. För då löser man ju lite det här att man måste gå in och skapa en ticket. Ganska mycket om du bara ska fixa något litet stavfel eller liknande. Eller blir det bara en slasktratt? Nej, stavfel, absolut samma. request? Alltså när det inte är farligast, att man råkar ta sönder något. Jag tycker det ska vara refakturering i PRN, men jättegärna att det är en egen commit. som du kopplar till. Man bara slasktrattar allting. Ja men typ, alltså så här det här är denna sprint. Ens en förbättrings ticket. Hit kan du koppla små grejer. Jag vet inte själv om jag gillar det riktigt, men jag funderar på att det skulle kunna vara en lösning. någonting? Ja, jag vet inte. Men gud vad bajsnödig man ska vara. Man kan inte ens fixa någonting litet utan att man ska skapa en ticket. Men å andra sidan är det inte så jobbigt att göra det. Bara klicka på plus och skriva en titel och varför och vad man fixade. Vissa är supersträckta att du ska skriva given, when, then och typ as a develop. Nej det är det man inte ska skriva. As a customer, are you one to... Refactor, the system. Det jag har haft i andra team är att vi har en feature, eller Epic i hyra som heter technical improvement, depth ideas Kommer du på någonting kan du lägga in en task där för framtida grejer. Eller så när du ser någonting nu, nu, nu. Så har du en feature att lägga den under. Ja, så hade vi också i mitt senaste team. Det kunde vara verkligen högt och lågt. den här artikeln för ett halvt år sedan och det finns bara en titel som är refactor, blablaservice. Vad är det jag vill refaktorera i den? Varför? Och så är det ingen annan som kan plocka upp den. Nej, man ska inte önska att det är mycket man glömmer. Där har vi turen att ha väldigt förstående PO. Men absolut att det ändå ibland dyker upp då man måste prioritera det mot något annat. Men den sista saken jag tänkte på, han nämnde uppdatera paket till exempel. Mycket kan man automatisera. Man kan ha pendabott för att uppdatera paket. Då blir det inte lika mycket att du själv måste hitta tiden och trycka in det. Nu kommer jag ihåg att jag läste någonstans i någon tråd när vi pratade om Linters. Keyeten sa att han hatar Linters och jag blev sådär chockad och bara hur kan man hata Linters. Det är ju ett bra sätt att kunna undvika att man behöver göra sådana reflektureringar. Jag vet att vissa team hos oss, där de får in breaking changes De har en person som är ansvarig att ta hand om breaking change varje vecka. Så att alla vet att den här veckan är det Madeleine som kommer att titta på det. Ja, faktiskt. Det är schysst. Men i allt det här får man ta in hur kritiskt är vårt system. Har du många miljoner användare Går det ner på grund av ett stavfel så förlorar du extremt mycket på det. Då kanske man bör fundera på att ta det i en hand. Ja, eller om det är en bank eller någonting där det kan vara jättestora implikationer om något händer. Andra kritiska system? Det kommer hända fel. Men det kan nog vara skönt om det sker ett fel på grund av ett stavfel man gjorde. det är ändå såhär att du hade en ticket, att du skrev varför du gjorde det, alltså det kan nog kännas lite bättre ändå att man gjorde så pass rätt att man, man bara kunde. Hellre det än att det kommer fram att man smygit om någonting och så har det blivit fel. Då är det ju lite skämmigt, då står man ju där med bypassade policies eller folk som har en buddy som alltid godkänner en stor gest. Det måste vara i skamvrån. Man får fundera på hur viktigt ens system är.