Jag tror verkligen att om du knoppar runt I det du utvecklar lokalt med tangentbordet och ser till att du kan komma åt allting, du kan fylla I allting och du öppnas någon modal eller någonting så sitter fokus rätt och du hamnar inte plötsligt bakom modulen. När den stängs så är du kvar där du var. Du behöver inte navigera genom hela innehållet igen och att liksom bara kunna slå igång en skärmläsare I förtiofem sekunder och bara liksom ja men det känns som att det maker känns för mig då maker det förmodligen hyfsat sens för andra. Målet är inte Det är inte att man ska täcka 100 procent av alla problem som kan uppstå utan det är bara att få de lågt hängande frukterna helt enkelt. Utan att behöva göra det separat. Man det redan I den lokala utvecklingen då kanske majoriteten av det som finns I någon läskig lång kravlista som är 2 kilometer lång. Då kanske majoriteten av det redan är löst. Hej och välkommen till Kodzak. Jag heter Fredrik som vanligt och idag har jag med mig Johan. Hej Johan! Vem är du? Vad gör du? Jag är en utvecklare som jobbar på SBAB till vardags. Där sitter jag sedan relativt nyligen I ett nystartat designsystem team. Jag har varit där I ett antal år nu. Jag tror att vi är inne på det sjunde året. Jag har gjort lite annat under min tid. Jag tror att det är mitt tredje team. Men ja, precis så det är lite det som som vi sitter med och vi jobbar ganska mycket också med tillgänglighet för det kommer ju ett nytt tillgänglighet krav eller tillgänglighetsdirektiv just nu. Just det, så det tar upp väldigt mycket av inte bara vår. Uppmärksamhet utan hela utvecklingsorganisationen. Ni har ett designsystem team nu. Var det så? Ja. Hur kom du till det? Har du varit inne på designspåret och kommit in på det teamet eller kommit från något annat spännande håll? Nja, jag har väl varit intresserad av designspåret lite grann. En gång I tiden för en 15 år sedan så tror jag att jag trädde in I utvecklingsvärlden ifrån att lekt lite grann med design. Jag har nog ändå liksom, det ligger någonstans. I ryggmärgen även om jag inte är designer eller UX:are på det sättet. Jag tror att I de allra flesta tillfällen så tycker jag att den tekniska biten av det är det mest intressanta. Men lite bakgrund kring det är att vi, vi har ju på jobbet och så är vi väl, just nu så är vi cirka 20-tjugofem stycken utvecklingsteam och jag har fått lite siffror här 135 stycken utvecklare och testare. Där jag tror att Så det är ett par stycken. Ja, jag vet inte men majoriteten är utvecklare då. Vi sitter och jobbar på lite olika sätt och det ändrar sig lite över tid också. Men man jobbar ganska autonomt och man jobbar I ganska många olika appar. Vi har haft lite olika sätt hur vi levererar fron-end-applikationer både internt och externt till privata kunder, företagskunder och allting sånt. Det har varit väldigt många appar och de har ju en tendens att bli lite utdaterade. Man kanske kopierar en lösning som man gjorde där. Man in I den nya appen och ser ändringarna där och så blir det ju inkonsekvent till släppt. Det var väl egentligen så det började 2018. Hur många år sedan det nu är? Det börjar bli typ ett komma år sedan. Ja precis jag skulle säga 3. Ja, jag skulle också säga 3. Allt efter mars 2020 är ändå samma år. Ja men exakt, exakt. Nej men så då började vi lite inofficiellt helt enkelt. Ett gäng utvecklare som satt I lite olika utvecklingsteam. Lyckades få att vi kunde sitta typ en eftermiddagveckan eller något sånt och ta och promenera lite grann. Rent från allas eget intresse så att säga? Ja, man hade ju sett det här behovet och sen så tror jag att sedan dess så har våran design och UX avdelning också växt ganska rejält. Men på den tiden så var det inte lika många. Men vi hade ju ändå rätt nära dialog med dem och de såg ju om några det här problemet. Det kändes ju verkligen som att det finns ingen röd tråd någonstans. Nej, inte det. Så då började vi se vad är det vanligaste för vi har inte heller fått någon commitment på att underhålla det här Något strukturerat. Väldigt mycket handlar om formulär. Vi ska samla in data I ansökningsflöden och man ska göra överföringar och allt vad man nu gör. Så vi började I den änden egentligen och bara försöka. Vi vet inte nödvändigtvis vad som är rätt, vad som ser rätt ut. Men det viktigaste är kanske att det ser likadant ut. Vi gjorde ju ett litet bibliotek egentligen som vi distribuerade med en intern NPM Regiesty och sen så visste vi då att ja, men det kan ju, om vi fokuserar mer på API:et. Och inte tänker så mycket på att skylta med några detaljer kring luckanfil så kan vi ju ändå ganska flexibelt uppdaterade över tid när vi vet mer om vad som är rätt visuellt. Så det var så det började och det har ju egentligen hållit på så sedan dess fram till Q2 2024. Så första april där I krokarna så satte vi officiellt igång ett team. Men det här projektet har ju levt, eller projekt, jag vet inte vad man ska kalla det, det har ju levt lite inofficiellt. Så det har ju varit så här periodvis har man hunnit jobba lite mer på det och periodvis har man inte hunnit jobba någonting alls på det. Men det har ju ändå varit I användning hos ett antal team sedan 2018 då. Så då var det det var helt enkelt ett NPM paket med ja men u I komponenter då? Ja, exakt. Ganska begränsad dokumentation I anslutning till det. Så sättet som det skiljer sig idag är ju att vi, det är ju ett helhetsgrepp mer kring, designsystem omfattar ju mer än bara kod och design egentligen också. Man kan ju dra det till att det kan handla om copywriting, bild och alla möjliga grejer. Och det där har vi ju inte riktigt en lösning för ännu, men på sikt så hoppas vi att vi ska kunna centralisera det. Även om vi inte själva står för innehållet nödvändigtvis så ska man inte behöva liksom, ja men vart finns det här? Finns I sjön typ och så får man läsa upp det utan att man mer kanske kan en samlingsplats där man hittar både dokumentation och relevant information som utvecklare och designer men man kanske kan hitta till relaterade resurser också. Även om inte de är skrivna där då. Ja, för det var en intressant grej, kände jag när jag började fundera inför vårt snack. Just det där med hur stort eller litet paraply är ordet designsystem? Det känns som att på ett sätt så kan det bli hur brett som helst nästan. Det finns väldigt mycket nyttigt som man kan baka in den där, som du säger, hur skriver man text? Det kanske inte är första man tänker på, men det är ändå onekligen en grej som dyker upp när det gäller att få saker att se ut och kännas på samma sätt över en massa olika saker man bygger. Jag tror att du och jag jobbar på relativ Liknande utmaningar. Bygger en del användarupplevelser för frontend applikationer. Ja men precis, och ett helt enkelt team som gör saker som Ja men en idealvärd skulle nog se ut att fungera ganska exakt likadant I många fall. Inte alla, men många. Just det här med copy till exempel. Det känns ju som att det beror lite på Jag tror att en intressant grej som vi kanske kan komma in på är hur vi arbetar och samarbetar med vår UX och designvdelning nu och de som är dedikerade resurser I vårt nya team. Men historiskt känns det som att det inte är helt ovanligt att det blir lite vattenfalligt. Vi kanske sitter I en pipeline där man har så mycket I pipelinen att utvecklarna sitter. Då blir det lite så att typ affärsanalytiker och UX:are kanske då springer före på nästa grej. Och så blir det lite mer av en överlämning än vad man kanske skulle önska alla gånger. Då är det ganska klassiskt att man till exempel säger vad händer om det blir fel då? Om man nu försöker skicka in det här och det inte funkar för någon Downstream tjänst där nere. Då är det också så här. Det är ganska vanligt att man inte nödvändigtvis har tänkt på det I typ en designleverans. Då är det ju jättevärdefullt att lite riktlinjer kring det och att vi kan försöka hjälpa till att det ändå blir konsekvent och att man behöver inte vara expert på copywriting utan man kan liksom bara hitta lite resurser och sen räcker det kanske en bra bit på vägen. Man kan fånga en del lågt hängande frukter. Vi kommer framåt utan att vi Fråga någon annan avdelning, hjälp typ. Ja, det är jätteintressant att utmana det där med kommunikationen och flödena av att få saker gjord och ta tid. Som du sa precis I början, det är väldigt lätt att man hamnar I det där läget att ibland blir det lite gjort, och sen går det en jättelång period och ingenting händer för att man har 17 andra saker som kanske både är och framförallt bedöms som viktigare just då. Ja, och det kanske man nu Vi har ju hållit på med det här nu. Vi konstaterade att det var mer än 3 år. Det känns som att få ett commitment på att kunna göra det här också. Där har ju det här tillgänglighetsdirektivet varit Det var ju lite det som fick skjuts I den prioriteringen. För det är ju också så att ett av våra stora fokusområden är just tillgänglighet och försöka dels baka in tillgänglighet där vi kan. Det är då I vårt komponentbibliotek. Sen finns det delar av tillgängligheten om hur ett helt flöde hänger ihop som är svårt att automatisera. Det är en av de grejerna som jag tror fick organisationen att gå med på. Nu startar vi ett team kring det. Jag har nog personligen velat ett team kring det I alla de här åren nu. Nu har det egentligen skett, för det är ju så att tillgänglighet är ju viktigt, men Jag vet inte, man har kanske inte riktigt insett Det eller att man har tänkt att det är viktigt men det måste också konkurrera med andra projekt. I bankvärlden är det massa regulatoriska grejer. Stora systembyten och då är det ibland svårt att liksom ja, det här är viktigt. Ja, tyvärr. Vi hinner inte. Nej precis, det är fortfarande bara näst viktigast. Ja, exakt. Och det kanske är liksom Jag tror att våran, drivet av vår UX-avdelning så har vi ändå Jag tror att det var Jag har skrivit ner lite siffror och lite information här. 2019 började vi jobba lite mer dedikerat med tillgänglighet. Men det blev ju då har vi ju samarbetspartners som är experter på det. Kyl över våra flöden. Då blev det lite mer punktinsatser. Jag tror inte vi lärde oss tillräckligt mycket för att ta det vidare. Man gjorde en review och så åtgärdade man lite fel där. Jag tror inte vi lärde oss mindsetet hur vi ska utveckla tillgängligt. Utan det drevs nog mest enskilda individer, typ av eldsjälar I de olika teamen. Det vi försöker göra nu tillsammans med det här projektet som då drivs parallellt. Tillgänglighetsprojektet egentligen, det är ju att försöka få lite mer långsiktighet I det. Och inte se det som ett projekt som tar slut, utan att vi måste få in det I arbetssätt mer och process. Just det. Ja precis. Själva teamet för designsystemet, hur stort är det ungefär? Ja, vi är samma uppställning sedan start. 2 utvecklare är vi, som har varit med och inofficiellt petat på det här Det som fanns innan. Och sen så är vi faktiskt, ja vi är typ 3 UX:are. En utav våra UX:are är ju en full tidsresurs som är liksom det fortsatta designsystemet. 2 av dom har lite andra åtaganden också. Är vi en produktägare och det tillkommer ju I samband med att vi startade teamet och tycker jag är kanon. För man är inte nödvändigtvis alltid så bra på det som utvecklare kanske. Nej men det är ju det. Man märker skillnaden när man har en bra produktägare på plats. Jaha, oj, vad mycket mer rakt på sak. Tydligt vissa grejer blev. Ja, exakt. Bara att vi håller I rätt riktning. Femmorna som utvecklare känner du kanske likadant, men att det är ganska lätt att ramla ner I kaninhål ibland. Jo jag har gjort det en gång kanske. Ja, jag har nog också kanske gjort det en eller 2 gånger kanske. Sen har vi en teamchef. Vi. Så vi är väl typ 5? Det är ganska roligt eftersom det är ett nystartat team och vi har ju kvar det här som hade tagits fram initialt innan. Men vi har ju inte så mycket Legacy. Det är ju väldigt mycket Greenfield egentligen. Och man får ta reda på ganska intressanta grejer. Vi vet ju att vi vill underlätta för våra utvecklare och designkollegor framför allt. Och det övergripande målet handlar väl om att vi vill bidra. Fiktivutveckling. Sen så vill vi ju göra det här gamla, det som startade initiativet från början. Att se till att det blir en konsekvent användarupplevelse och att vi följer vår branding och att det ska bli lätt att göra rätt på det. Och sen är det ju då tillgänglighet som är. Det som är intressant är ju att vi har ju fått upptäcka hur ska vi jobba I den här konstellationen och med den här produkten, för det blir ju en intern produkt. Ja, visst. Och det är ju väldigt kul eftersom att du har ju dina slutanvändare intill dig. Ja, och så vidare. Så det är väldigt mycket feedback. Men då har vi ju liksom fått prova oss fram och vi jobbar lite grann I kvartal då. Och det känns som att vi provar ett arbetssätt och sen så behåller vi det som känns bra in I nästa kvartal och så kanske vi skruvar på något annat. På senaste kvartalen så har vi I alla fall. Vi jobbar I 2 stycken arbetsmöten per vecka där vi försöker sitta hands on och jobba tillsammans, både utvecklarna och UXa. Det gör att det här samarbetet är mycket tätare än vad det var I åtminstone de teamen jag var med I. Då känns det som att man kan ta vissa beslut som träffar både vår kodbas och vår Figma. Det känns som att det har varit väldigt värdefullt. Men ja, så ser teamet ut. Ja, just det. Det är så ni jobbar. Arbetsmöten, 2 stycken. Och sen så jobbar man mer på varsitt håll resten av Ja, jag tror att det är lite Är ju lite att spegla väl hur utvecklingsteamen jobbar också. Vi jobbar ju inte med de vanliga produkterna på samma sätt så jag kan väl inte svara exakt för hur. Genomsnittsupplevelsen med utvecklingsteam. Men man är ju autonoma, så man får ju liksom, vi vill ju jobba agilt. Alla team har väl I princip någon, sin egen twist på vad det innebär. Det är termier. Vissa kör någon Kamban variant och andra kör sprintar. Visst, det finns alla. Vad som passar just det teamet känner jag igen också. Men hur Vad liksom äger eller Driver eller kontrollerar era team kontra andra team? Jag tänker så här, att ni gör en del komponenter, förstår jag ju. Här kommer en standardkomponent för att göra den här saken. Blir det då att man drar in nya komponenter som tillhörde ett annat team förut, eller hur funkar flödet mellan er och övriga team? Dels så fanns det ett antal komponenter som vi förvaltar vidare och utvecklar. Det andra handlar om att försöka snappa upp vilka behov vi har och att inte nödvändigtvis komma hit allt för långt fram I tiden utan att vi ska vara lyhörda och snabbrörliga. Men komponenter är väl en ganska central del I det. Vi har fokuserat ganska mycket på dokumentationen kring det. Jag tycker personligen att det är lite en first class citisen I den leveransen också. Det finns en hink med komponenter, vars måste jag figur det ut. Utan att man försöker det I åtanke. I och med det så får vi bygga vår egen pipeline med hur vi levererar vår produkt. Vår produkt består ju på kodsidan. Bibliotek som man lyfter in via en pn. Sen så består den I tillägg av dokumentation. Det har ju också varit en annan lite kul grej för det har inte nödvändigtvis funnits en färdig pipeline för det. För de andra teamen har inte riktigt haft det behovet. Där har man ju fått vara med och bygga upp det enligt de behov man har. Det blir lite andra saker att tänka på där med att det här ska ju versionshanteringen och versionshanteringen är ju någonting som är väldigt viktig för att säkerställa. Vi försöker förhålla oss till semantisk versionshantering. Man ska kunna lita på att saker funkar. Om något har breakts ska man få reda på det och kunna ta hänsyn till det. Jag tror att det där är också lite grann I rörelse. Vad är det vi kommer att äga som team? R egentligen. Det finns ganska mycket material som är utspritt på nån kunskapsbank här och sen så finns det något externt CMS där för något ändamål. Jag tror I nuläget så är det mycket fokus på tillgänglighet. Jag tycker att det är lite intressant och spännande. Jag vet inte riktigt exakt hur det kommer se ut. Jag tror att vi kommer försöka se till att lyssna på våra användare och forma det därefter. Det är väl då det blir bäst också. Ja, och tillgängligheten om vi ska gå in lite mer I detalj på det så är ju för de som eventuellt inte vet det då så är det ju en ny lag. Så den trädde I kraft den 28 juni. Det här vet jag att de som har varit drivande, de har ju sagt det. Men förr eller senare så dyker det där datumet upp. För 5 år sedan så kändes det som jättelumt bort. Men nu är det ju all hands on theck. De lagkraven som redan gäller för offentlig sektor, som man har varit inne på myndigheter och sjukvård och så där, så har ju de redan mycket av de här kraven. Nu utökas det till att gälla privata aktörer också. Ja, okej. Så från visst håll kan man se det som en breddning av någonting som redan fanns där. Ja, just det. Sen är det också en gräns Vilka som omfattar är också lite Det är lite luddigt. Här vill jag braskrappa lite grann också. Jag känner att jag har någorlunda koll på det här. Men det känns som att när det gäller alla de här, bara ta av det jag säger men det är passalt. Ja men exakt. Så här funkar det och sen så kanske jag har missat någon paragraf. Nej men allt det här är vår uppfattning utifrån det som vi har hört och sett. Och så där. Vi är inte lagtolkar. Nej jag har försökt koka ner det till pragmatisk. Vad är det som gäller? Just det. Men ja, så nu är det ju ett antal typer av tjänster egentligen som omfattas av det här. På sikt att utökas till flera. Så träffas man inte av det här I nuläget så kommer man säkerligen att göra det inom en snar framtid. Det betyder I praktiken att det finns ju en europeisk standard som är till för tillgänglighet och inkluderande I EU. En utav aspekterna, de allmänna kraven som man omfattas av det är ju de här WCAG som är någon sorts spec som specasar upp. Det ska funka så här helt enkelt. Färgkontraster och allt vad det är. Finns det lite branschspecifika krav som beroende på var man är I för bransch så kan det vara extra saker som man måste tänka på. I vårt fall då som bank så omfattas vi av begripligt språk. Det ska vara lätt att ta till sig innehållet. Det ska åtminstone finnas möjlighet att om någonting står på massa facktermer och så så ska man ju också kunna se det på något sätt som går att begripa även om man inte nödvändigtvis är I finansbranschen. Det är ju faktiskt ett underbart krav. Ja, men jag tycker det Det är också och jag tycker att alltså sen är det ju så att de bästa lösningarna för det här är ju lika tillgängliga för alla redan från början så att det inte blir någonting man bara lägger ett lager på lager. Vill du lite mer tillgänglighet så får du slå på det här läget. Sen är det lite administrativa krav, så omfattas man av det här direktivet så måste man också arbeta med dokumentation och liksom rapportera sina tillgänglighetsbrister. Och då finns det någonting som kallas för en tillgänglighetsteorörelse som man behöver då. Det är typ en listning någonstans på sin sida som hålls uppdaterad på det här är de bristerna som finns, typ förklara varför och länka om det finns något mera tillgängligt alternativ och lite sånt där. Sen tror jag också att man behöver en kommentarfunktion så att användare av din tjänst ska kunna rapportera in det här om de stöter på något. Så det är egentligen lite grann visa. Vi är medvetna om vad vi klarar och inte klarar och att vi jobbar på det. Ja, just det. Ja, precis. Om man nu kommer till vad det får för påföljder ifall man inte uppfyller de här kraven, så tillgänglighetsredogörelsen är nog en ganska viktig del I det. Men vi är medvetna om det och vi är på bollen. Slags relaterad känsla I vissa delar av när GDPR var på tapeten höll på att införa. En grej var att det fanns jättestora strängar påföljder, men det fanns också en ton av att visar du att du jobbar aktivt med det här och rapporterar när ni har problem, så kommer det att visa en rätt anda också. Ja, men exakt. Så åtolkar jag I alla fall. Det känns ju lite som att även om jag tror att man förväntas väl vara compliant med det här när tjugoåttonde juni inträder. Det här är det viktigaste I det här sammanhanget. Vi kan visa att vi har tagit det och att vi håller på med resten. Ja, men exakt. Sen kanske man kan komma till den punkten om vilka omfattas då? Det tycker jag verkar lite svårt. I vissa branscher känns det väldigt tydligt. Typ e-handel är ju en utav dem som omfattas Är rätt lätt att veta om man är e-handel eller inte. Exakt, och banktjänster är också lätt. Men sen är det såhär, elektroniska kommunikationstjänster, och det är också så här, det finns lite exempel. Jag tror vi kan säkert lägga in några bra länkar I beskrivningen också. Det finns ju från Post och telestyrelsen så har de någon sorts introduktion till EU:s tillgänglighetsdirektiv. Säger de elektroniska kommunikationstjänster som till exempel uppkoppling och abonnemang, telefonsamtal, e-post, sms, chatt, videosamtalstjänster. Men det är liksom, det kan säkert vara fler. Ja, jag tänker det. Det kan nog bli ganska brett. Ja, men exakt. Och sen så här streamingtjänster, medietjänster typ. Det är väl en utav dem. Och sen så är det vissa tjänster för persontransporter. Vissa tjänster. Vissa tjänster. Ja, så det lämnar utrymme för tolkning. Banktjänster nämnde vi och e-böcker behöver vara tillgängliga och e-handelstjänster. Det är ju en ganska stor sektor som omfattas. Sen tror jag att det är vissa fysiska Om man har betalningsterminaler eller olika typer av automater så tror jag att de också omfattas. Men för mig att jag läste någonstans att har man liksom en sån fysisk grej ute så tror jag att det finns någon regel kring att om den står där idag så kan den stå kvar tills den är Det känns ju sansat. Man kan säkert försöka utbilda sig om man omfattas sig eller inte. Men jag skulle väl förespråka att man kanske ändå tänker på tillgängligheten. För mig så har det varit lite grann. Jag har inte riktigt varit så bra att tänka på tillgängligheten historiskt. Men ju mer man har fokuserat på det så har det ju låst upp lite Är typ ett nytt gränssnitt I din app. Ja, det är det som är så spännande. När du får in vanan att Jag har kortkommandot för att starta skärmläsaren, jag kan de vanliga navigeringssätten. Då får du helt plötsligt ett nytt gränssnitt för din app som du kan se till att få en bra användarupplevelse på. För mig I alla fall så är det jättemotiverande. Jag tycker det är jättekul att liksom så här För det kan ju vara helt förfärligt. Det finns jättemånga roliga exempel. Du kan typ hoppa igenom förtioåtta element som bara säger bild, bild. Det är ganska svårt att veta vad är det då? Ja men exakt. Så jag tycker att det känns som att det är viktigt utan tvekan, men det är också någonting som jag tycker är roligt. Det känns som att man har låst upp en ny liten dimension här I sitt utvecklande och vad man levererar när det gäller bra användarupplevelse. Ja, men exakt. Man får lite trevliga incitament att bygga Bygga saker på mer genomtänkta sätt Man gjorde första versionen av sin webbapplikation och säger allting är en div, med olika styling på. Sen ska man på att en A HRF, en vanlig länk, ibland är inte bara bra för tillgänglighet. Det är faktiskt ganska bra för alla att se att här är en vanlig länk. Den funkar som en vanlig länk. Den ser ut som en vanlig länk. Alla sådana grejer. Den går att navigera. Har vi gjort det bra att navigera med skärmläsare, så blir det ofta bra att navigera med tangentbordet också. Att kunna tabba igenom saker I en vettig ordning är ju väldigt nyttigt för precis alla. Just det alltså jag tror att det är en sån här grej som man kanske inte ens tänker. Man tänker knappt på det när man sitter och utvecklar. När man sitter och utvecklar så blir man lite såhär hemmablind också. För du är inte nödvändigtvis den tilltänkta målgruppen för den appen du utvecklar. Utan jag ska bara utveckla. Du har säkert använt olika system även om de är webbaserade. Alla de här tangentbords, tabba, att navigera med olika sorters kortkommandon eller piltanter och så vidare. Det bara funkar. Det är ju en trevlig överraskning. Det skulle ju lika gärna kunna vara default. Ja, exakt. Det borde vara lite jobb att sabba till. Jag tror att för vår del så är det som vi försöker bidra med när det gäller utvecklingen. Alla kanske inte ska behöva vara tillgänglighetsexperter för att vi ska kunna leverera ett bra resultat. Dels baka in det när det finns och går, men också uppmana kanske till att man har det mindsetet. Redan när du sitter I lokal Tryck igång skärmläsaren. Jag tror att man behöver gå nån liten crash course I hur skärmläsaren funkar för den kan vara överväldigande när man sätter igång den. Man har ju hört när den drar igång på 180 kilometerh och spottar ur massa information. Ja visst, det är så proffsen använder Man kan ju ställa in den precis så som man vill. Jag tror att en av de viktigaste, nu sitter jag på Mac, det är säkert lite olika beroende på vilken och då använder jag den inbyggda voiceover. Men jag tror att den viktigaste tangenten är kontroll-tangenten. För den får den att bara vara tyst. Den pausar uppläsningen. Så när du sätter igång den och du bara vill få Nu måste jag tänka här. Då kan man alltid trycka in kontroll innan man gör sin nästa grej. Men jag tror att det är nog inte mer än kanske. 5, 6, 7 stycken kommandon man behöver kunna för att kunna använda den effektivt nog för att fånga mycket av de här lågt hängande frukterna. Gör man det redan I den lokala utvecklingen kanske majoriteten som finns I någon läskig lång kravlista som är 2 kilometer lång, kanske majoriteten av det är redan löst. Ja. Sen kanske man, dom här som är lite mindre Problem som är lite svåra att upptäcka kan man säkert behöva åtgärda ändå. Bestprocess eller review liksom senare. Men jag tror verkligen att om du knoppar runt I det du utvecklar lokalt med tangentbordet och ser till att liksom du kan komma åt allting, du kan fylla I allting och du öppnas någon modal eller någonting så sitter fokus rätt och du hamnar inte plötsligt bakom modalen. När den stängs så är du kvar där du var. Du behöver inte navigera genom hela innehållet igen och att liksom bara kunna slå igång en skärmläsare I förtiofem sekunder och bara liksom ja men det känns som att det make känns för mig. För mig då mkar det förmodligen hyfsat sans för andra. Sen så är det ju med också Visst är man proffsanvändare av det Så kan det hända att det finns insikter som man själv inte kan ännu. Målet är inte att man ska täcka 100 procent av alla problem som kan uppstå utan det är bara att få dom lågt hängande frukterna. Hårda att använda. Ett snabbt och jättestort tack till alla som stöttar oss på Kofi! Du kan bli en av dem genom att surfa in på cwbinderstri punkt com snedstreck kodsnack och slänga iväg antingen en engångsumma eller ett månadsvis stöd. Stöder oss på nivån kaffedrickare för 5 euro eller mer I månaden så får du ett gäng trevliga klistermärken I brevlådan. Stöder du oss på nivån Barista för 10 euro eller mer I månaden så får du dessutom förutom klistermärkena. Stort tack precis här. 1000 tack till Michel, Albin Groven, Anders Leell, Brother Inggo och Tobbe Lundberg. Alla ni som stöter oss Hjälper till att göra podden möjlig och ju fler ni blir desto bättre pod kan vi göra. Ibland har vi sponsorer I podden, men det är faktiskt ert stöd som gör att vi börjar täcka kostnaderna för podden varje månad. Vill du stöd oss på andra sätt så går det naturligtvis utmärkt att recensera podden I din poddspelare. Sätt dig betyg eller en stjärna oavsett om det Spotify, Apples Podcastrull eller någon helt annan app. Eller berätta helt enkelt om ett avsnitt för någon som du tror skulle gilla podden. Och just nu har vi precis släppt ett helt nytt sätt att stötta. Vi har ett klistermärke till försäljning. I Kofibutiken finns ett trepack klistermärken om livet som agil lokförare. Framimproviserat I en milt urspårade diskussionstråle häromveckan. Visar dig stöd för alla safe-utövare där ute och får den där sköna känslan I magen av att bidra till Kodennacks fortsatta resa. Men kom ihåg, du är en fantastisk person, oavsett om du stöttar oss eller ej. Nej, och jag antar att det fortfarande Gäller att man får rätt mycket gratis av att använda standardkomponenter också istället för att finna sina egna. Du tänker på inbyggda element. Ja, precis. Det känns som en snygg grej som fortfarande driver för byn I mina. Massor av de flöden med Gör inte din egen ersättning för en knapp eller något I onödan, utan se till att det verkligen behövs. Då har du rätt mycket att implementera om det ska bli lika tillgängligt som en standard. Om det går divhållet. Så är det definitivt. Det finns många inbyggda element som är mer semantiska som man kan luta sig mot. Det beror lite beror lite på när det kommer till de här tillgänglighetskraven och just WCAG kanske specifikt då så jobbar man ju I olika nivåer. Då är det liksom A, A, AAA. Jag tror om jag inte minns fel, någon får rätta mig om jag har fel, men jag tror att den här nivån som man ska uppnå är dubbel A. Det kan hända att det skiljer sig lite beroende på vilket typ av problem det är men trippel A är då den högsta ambitionsnivån. Jag menar, det kan man ju lika gärna sikta på då. Ja, precis. Det är orimligt. Jag har kollat lite på WCAG BCAI några gånger och det känns som att den högsta nivån kan vara ganska utmanande ganska ofta, har jag för mig. Jag tror säkert att du har en balans där, så att man inte liksom Ja, men A var väl ofta ganska rimlig. Man kan säga att det här förstår jag dels vad jag ska göra och varför och dels hur jag kommer dit. Och sen dubbel A var det här är samma, fast mer ambitiöst på något sätt. Och sen så trycker jag och så, nu kan det bli mycket här. Ja men exakt. Jag tror att det som du säger stämmer ju 100 procent att återuppfinna inte hjulet om man inte måste. När det kommer till de komponenterna som vi levererar. Vi försöker inte återvinna hjulet även om det är en komponent som inte nödvändigtvis går att bara bygga. Den finns inte I browsern. Det kanske är någon lite mer interaktiv komponent som kräver. Nu finns det ju liksom ett inputfält för datum, men vi kanske behöver ett sätt att man ska kunna ange en range av datum och vi vill det som är en bra upplevelse som man får om man ska boka en flygbiljett eller hotell natt eller något sånt där. Då måste man ju gå lite utanför vad som finns inbyggt. Det som vi försöker tänka på där och som jag väl kanske skulle uppmana ifall det är någon annan som sitter med liknande utmaningar. Även om det är så att man Det här finns kanske en färdig komponent I något offceelf bibliotek ute I ekosystemet så försöker vi ändå så här ja, det kanske är rimligt för oss att bara gå på den lösningen. Men då sättet vi tänker på det då är att sätta liksom ett eget interface. Hur ska eat se ut? Det kan vi säkert inspireras av hur det ser ut där. Även om det är näst intill en ärtmätning så är det en explicit. Vi lägger in det för att då blir det inte ett implicit beroende på just den komponenten utan då skulle vi kunna se om vi behöver bygga den custom eller kommer det en ny aktör eller något nytt bibliotek som funkar ännu bättre? Det är en av nyckelstrategierna som vi försöker tillämpa. Vad det än är för komponent så är API lite heligt. Det försöker vi se till att vi har en uppfattning om hur vi Där är det ju såklart det är svårt att säkerställa att det blir så. Är det intuitivt, är det flexibelt? Flexibelt så menar jag bara. Är det flexibelt för att vi kanske vill ändra våran lösning under huven på sikt? Precis. Jag har en kollega som Jag jobbar rätt mycket med våra komponenter. Vi har ett litet sånt projekt också. Han har sagt exakt samma grej, vi ska se till att slå in det, för vi använder rätt designbibliotek nu ganska mycket. Men hans ambition är att allting som vi har som gemensamma komponenter ska vara inslaget, så att vi inte blir beroende av det biblioteket. För just nu sitter vi stenhårt fast I det, framför allt I en del äldre projekt. Katastrof att försöka uppdatera en Exakt! Även om du då tar den approachen så kanske majoriteten av biblioteket ändå använder någonting sånt färdigt. Men då är det I alla fall, förlitar du du helt och hållet på deras API, då sitter du ju lite I händerna på dom också när så här, ja men nu har vi gjort en ny Majoruppdatering som bräkar en massa grejer. Då har man åtminstone en chans att Motverka det genom att säga, kan vi då, om vi nu inte bara kan byta komponent I samband med det, kan vi åtminstone se till att vårt API som vi tillhandahåller går att mappa om till vad som än är ändrat. Det är typ en key take away I sammanhanget. Sen när det gäller lite grann som vi snackade om med hur vi försöker snappa upp behoven från organisationen. Jag tror Där har vi ju I samband med UX också, det som är intressant med vårt täta samarbete är att Från olika perspektiv. Från kodsidan har vi ett visst perspektiv och särskilt när det gäller versionshanterade kod. Det finns vissa spelregler helt enkelt. På designsidan så kanske det inte riktigt har varit lika känsligt med sånt. Då har vi behövt närma oss varandra och synka sinsemellan. Vi kan inte springa före alla gånger på designsidan eller bara göra en ändring. För det är inte riktigt så det funkar på kodsidan. Nej precis. Men sen så tror jag Annan grej som vi försöker vara I synk kring. Man vill ju att det ska vara konsekvent och därmed så vill man ju att det ska finnas vissa Constraints kanske. Så att vi kan göra på helt olika sätt. Det där är intressant. Jag tycker personligen så tycker jag att Under de här åren har man både konsumerat ganska mycket innehåll ifrån ekosystemet och ifrån diverse fat leader och så vidare. Min uppfattning är att den här flexibiliteten behöver vara lite större än vad man tror ändå. Ja, någonstans än jag tror. Det är så trist när du sitter där I din app. Jag behöver måla lite utanför linjerna här men det går inte. Då får jag bara kasta ut allt och göra det helt från scratch. Precis, det blir ju inte hållbart det heller. På så sätt ser vi att en viss flexibilitet behöver ändå finnas I alla komponenter. Så vi ser det är att det är lite mer high level komponenter och lite mer low level komponenter. Det finns herrans massa namn på sådana typer Tomic design eller vad som helst. Vi försöker tänka lite enklare på det. En high level komponent är ett lite mer specifikt ljuscase. Man kan använda det med ett ganska begränsat API. Ganska mycket opinions inbakade. Men det gör ju också att det är ganska flexibelt för oss att se till att det fortsätter att funka utan större ändringar. Sen vartefter vi Kan vi lösa kanske 80 procent av ett visst behov. Sen så kommer vi till de andra behoven och då kan vi utifrån det vi vet då så kan vi börja bryta ner den till lite mer eller olevelkomponenter. Då kommer ofta de här insikterna om API-design. Hade vi tagit det här valet så hade vi kanske kunnat stödja utan att man går alltför långt ner I sista behov vi inte vet att vi har. Vissa såna där grejer. Blir ändå tydliga. Rent intuitivt så känns det som att det här valet hade varit flexibelt, även om vi ser framför oss att vi vill göra lite annorlunda också I framtiden. Om man säger high level I det här fallet, är det typ en sån avancerad datumväljare som vi pratade om innan? Är det en high level eller en low? Ja, det är svårt om man drar gränsen. Ja, självklart. Jag skulle se det som, tänk dig på tabeller till exempel. Har inte supermånga tabeller ännu I biblioteket men jag bara tar det som ett exempel. Där kan man se framför sig att en low level version av såna komponenter kan ju mappa väldigt nära hur det funkar I html:en. Du jobbar med rose och header och liksom olika typer av celler och så vidare. Men en high level komponent kanske tar en lista av data som den kan mappa om till det där under huven. Och För ganska många ljus cases så räcker det. Då är det ganska najs att säga. Då kan du använda en komponent, skicka in gatan som du kanske Lite grann på så att det passar och sen så får du en tabell. Istället för att javisst då ska jag liksom göra typ 8 rader kod här för att göra min tabell med att mappa igenom saker och så vidare. Så det är väl ett exempel. Ett annat exempel är kanske att när man jobbar med inmatningsfält I formulär så består ju dom under huven av ganska Alltså dom är ju rätt nära elementen I browsern som input. Vi har till exempel en komponent som är en textfild då och då kombinerar ju den själva inputfältet med en label på den och ett valideringsfel så sköter ju den om kopplingarna där sinsemellan under huven så att labeln blir associerad med inputfältet och valideringsfelet också. Utan att du som konsument behöver liksom såhär, men hur var det nu? Ska den vara area label buy eller area describe by? Såna det liksom. Så det är det jag tänker på. Tror att vi har stött på många gånger att man bara säger ja men är det här en heyer? Slut kanske man hamnar I någon atomicdesign ändå. Ja, kanske både och. Det är en ständig utmaning att få till den där balansen. Här kan jag göra en jättefin komponent. Jag behöver skicka in 300 saker till den för att den ska funka. Kan jag tänka om I det här så jag slipper? Då kanske man på en sån high level, och det är också en Jag vet inte vem det var som hade ett sånt tak någon gång, men som pratade just om OPI-design på någon konferens. Man har ju sett exempel på en rec-komponent som liksom har 38 props för att man har byggt på vartefter. Just det, vi måste stödja det här också. Då är det bättre att parera det till helt olika komponenter. Så att det blir lättare att underhålla över tid. Så det är väl lite av dom tankarna. Mycket av det är common sense. Delar av det har man på något sätt absorberat under de här åren som man ändå stött lite mot det här även om det inte har varit ens huvudsakliga. Arbetsuppgift. Det finns ju ett stort värde också I att få Sånt som du säger, common sense grej, att få dem uttalade och utskrivna, det är ju en väldigt stor nytta I sig, för annars är det någon I team en dag som tycker att något lite annorlunda är, ja, det här är common sense, och så har man dragit iväg på 2 spår igen, fast det inte var avsikten. En utmaning är ju att vi 2 som är utvecklade I teamet just nu har jobbat med det här innan. Frågan är vad som är inne I våran ryggmärg. Jag tror att det kan finnas En utmaning är Är att försöka få ner det här på ett enkelt och överskådligt sätt. Det här är ett mindset som vi tillämpar. För det blir svårt. Jag vet faktiskt inte riktigt var gränsen går. Vart lämnar du typ ena hjärnhalvan på oss 2? Och vart möter det någon dokumentationssida någonstans? Där har vi säkert ett jobb att göra. Om man ser till framtiden. Omborda någon ny eller om någon försvinner och så vidare så försöka liksom de grundprinciperna som man på något sätt lutar sig mot nu som säkert kan ändras också såklart. Men det här är det vi förhåller oss till nu. I för att en uppsättning regler som blir omfattande och komplicerade och grönareära. Vi försöker några grundläggande principer som vi tänker på när vi tar fram komponenter och vad vi än tar fram igen. Lyckas man få ner sånt? I text eller bilder, vilket material det är, då har man något som är väldigt, väldigt nyttigt. Som du sa innan, allt man levererar är inte bara komponenter, utan informationen runtomkring kan ju vara supervärdefull, även om den kan vara svår att få fatt I ibland. Det är ju också en intressant grej, för att ibland våra utvecklingsteam så sitter majoriteten av dem just nu och jobbar. Reatapplikationen. Det har ju då pragmatiskt sett varit vår Det var så det började och det är fortfarande så. Det betyder att jobbar man I något annat än Rea och jobbar man I mobilappen eller jobbar man I något av de andra bolagen som ingår I samma koncern så kan man inte nödvändigtvis ta del av komponenterna. För de är ju lite som Reasspecifika. Just det. Så då blir ju riktlinjer. Design tokens och sånt blir desto viktigare. Sen är det såklart också jätteintressant att fundera på hur skulle vi kunna brygga gapet mellan olika ramverk och kanske till och med olika plattformar. Men hittills, teamet har varit verksamt I 3 kvartal ungefär nu. Så vi har inte känt att det känns inte så pragmatiskt att börja gå utanför till något ramverksagnostiskt när så stor procentandel av allihopa ändå sitter nativevely med rejact. Men det är definitivt en fråga för Nära framtid förmodligen. Ja, det är som du säger, det är lågt hängande frukt igen. Vad är vettigt att börja med? Var får vi stor utdelning på Det kanske inte har skrivit ett generellt dokument för alla typer av gränssnitt. Nej men exakt. Håller man sig på webben och tänker att hur kan vi stödja? Vi vill ju förmodligen, eller vi kanske inte vill och kommer jobba med Rea I en massa år fram. Det kanske vi gör. Men då tänker man på sådant som Web Componance. Där är det också lite svårt för jag tycker att när man läser om webb så är det också ganska polariserat. Use the plattformgänget och så hör man Library eller Framework Auters. Det är liksom de 2. Jag tycker det blir lite svårt för det känns som att liksom, det är därför jag har varit lite försiktig med att skynda mig in I det. Jobbar ändå I huvudsak med react. Då vore det synd om man ska behöva hoppa igenom en massa loophols för att Web Componence och Rea ska samspela. Web Componence låter så bra på pappret men är det så bra I praktiken? Om man kommer till alla komplexa detaljer som Shared och dom och hur lirar ramverken och domen egentligen? Många av ramverken går en annan väg när det gäller hur de renderar appar. Ja, precis. Som är lite mera. Vad är det man kallar det? Typ lacy rändered medans domen traditionellt är igerley rendered. Samspelar det verkligen. Jag har nog inte helt satt mig fullständigt in I det men det är definitivt någonting som vi har Titta på lite sen. Det kan ju hända att delar av utbudet av komponenter funkar kanon som webbkomponntes om de är liksom längre. De är ganska enskilda. Det är liksom ingen komponent som rappar en massa annat. Utan det kanske är typ en dejtpickcker eller någonting som är liksom en leefnode typ I hierarkin av alla. Ja just det. Det känns inte nödvändigtvis som en silver bullet. Men vi vill ändå utforska det. Tittar man I ekosystemet bara I Sverige av andra designsystem, och det gör vi ju själva mycket också. Det finns ju liksom I arbetsförmedlingen och SJ har vi inspirerats ganska mycket av. Så de kan man surfa in och titta på? Ja, SJ har, jag tror att dom relativt nyligen har gjort ett omtag på sin, jag vet inte, det är någon Sii-designer eller något sånt. Så dom har gjort ett bra arbete och det kan man hämta mycket inspiration från. Men tar man vissa andra. Jag ska inte svära på hur de gör kring det men vissa andra kör ju 100 procent webbkomponntes. Jaha, de gör det. Det funkar säkert jättebra men jag tror att vi utforskar I framtiden och se vad det är. Sen vet jag inte, det är ju inte helt otänkbart att landskapet ändrar sig lite grann heller. Nu när AI är på stort intåg och utvecklingen går så pass snabbt som det gör. Ja, men precis, det skulle vara intressant, för det sa du precis innan vi började spela in här att det kan Kan ju mycket väl komma att påverka var ni bygger och vad man gör och hur. Det är en grej som jag inte hade slagits av förrän du svarade. Jag vet inte om jag hade slagits av det själv för några veckor sedan heller. Vi har pratat lite mer om det för det har säkert inte gått någon förbi att det händer saker på AI. Kanske från utvecklareperspektiv så har man ju traditionellt Man har kanske tänkt på vad betyder det här för mig? Det är ju det här för mitt yrke. Men om man bortser från det så tänker jag att våra användare som vi bygger tjänster och appar för idag, hur ser deras interaktion med de apparna ut I framtiden? Delar av det kommer säkert övergå till att vara någon sorts assistent man kanske pratar och ber om eller chattar eller någonting. Vissa sådana här stora komplexa flöden. Deklarationer eller liksom du ska ansöka om bolån eller vad det nu än är. Det kan vara ganska omfattande och komplexa formulär. Det kanske är någonting som skulle vara jättebra som ett chattflöde I framtiden för då kan du ställa frågor under tiden om det är någonting som du undrar. Men sen tror jag personligen att vi kommer säkerligen att kvar grafiska gränssnitt för diverse grejer. Men det är också så att I våran interna produkt och dess framtid så blir det ju någonting som man har kommit underfund med nu att det här måste vi ändå tänka på. Hur ser framtiden ut kring det? Ja just det. Vart är vi på väg? Det finns ju liksom såhär, vad är det dom kallar det? Computer Vision finns ju. Visserligen så är ju det faktiskt Att datorn tar skärmdumpar och faktiskt navigerar. Då behöver vi ju ändå ett gränssnitt som är ju bara bra om det är tydligt och tillgängligt. Ja, men exakt, tillgängligheten lönar sig igen. Det är klart, det måste väl kunna finnas någon aspekt också där det blir andra interaktioner, som gör att man kanske vill presentera saker på andra sätt. Det kanske får ett annat behov av visningskompononenter som kan visas tagna ur sitt sammanhang. Vi har ett jättestort formulär, men jag vill presentera Presenterar resultatet och då har jag resultatkomponenten, men jag har inte resten av informationen runt omkring. Man kanske vill integrera inmatningsfält I det här flödet också, istället för att allt hela tiden ska vara en fritext, typ en GPT-rapper, så känns det som att det kanske är en mix av båda världarna. Men jag tycker det är svårt att veta vart vi är på väg och det är väldigt spännande att se. Det är lite så som vi snackade om innan att man får försöka vara snabb på Inte sitta inlåst I, nu jobbar vi med det här I 2 år och sen så ser vi hur det blir när det är. Just det. Att man är snabbrörlig och håller örat mot rälsen. Ja, exakt. Det blir nästan mer intressant när man tänker sig också. Om man inser att det kan komma sådana grejer. Finns fler aspekter att tänka på än bara de som man har framför sig precis nu? Ja, exakt. Det tror jag väl gäller om man går in på temat med AI utveckling. Precis som med webb componance så är det också ganska polariserande åsikter om det. All-in eller all-out. Vem ska man tro på? Har dom som är åt ena hållet eller andra hållet ett incitament att se si eller så? Javisst. Vi har använt AI framför allt under en längre stund för dokumentation. Hitta ett konsekvent och professionellt språk men också lite blank canvas grej. Vi ska dokumentera en knapp eller vi ska dokumentera en komponent som gör det här. Ge mig ett utkast och så tar vi det Just det är väl något att börja med? Jag tror att min personliga resa när det gäller AI assisterade utveckling har varit att man har fått den här wow-faktorn. Sen har den på något sätt efterföljss av en Den kör fast och man bråkar med AI:n för att komma framåt. Men ju mer man fortsätter, ju mer ute på hallucinationer och så blir det. Ja, men exakt. Lite grann väldigt bra beskrivning. Men den har ju kommit till omgångar också. Nu finns det ju ännu bättre integration mellan en AI-agent och en editor till exempel. Det har också blivit en wow-faktor. Men det känns också som att man kommer till Man förstår ju att när den har den här tjejen av stat-grejen att den kan typ prompta sig själv och prova outcome och så vidare så förstår man ju att resultatet blir mer träffsäkert. Men det känns ju någonstans också som I slutändan att hur de fungerar gissar sig ändå till vad som är rimligt att göra härnäst. Några sådana där wow-faktorer, men ändå känt I slutändan om det har gått 2 dagar, den lilla han amon-Faceren är överallt. Då stöter man på de här friktionerna och där det tar stopp. Ja, exakt. Det tar stopp på ungefär samma stil som sist. Jag känner nog väldigt mycket så också. Samtidigt så pratar jag med folk, ja men vi är en av dem som verkligen har Det känns som att de verkligen Arbetssätt ihop med AI som verkligen funkar för dem, och de blir genuint mycket snabbare på att göra saker, och det kanske är arbetssätt som inte alls passar mig, för att jag är gammaldags och vill sitta och titta på koden utan att bli störd av förslag mitt I. Nej, men man vill ju Det är en utav de grejerna som jag tycker är det tråkigaste med det. Jag vill ju prov, för jag tror också att I någon grad så kommer väl det här Man kommer väl nästan att vara så illa tvungen att använda det för att behålla en viss produktivitet kanske. Sen tror jag inte att man behöver förlita sig på det helt och hållet. Nej det är ju frågan. Precis, det är frågan. Men jag tänker så för min del. Jag jobbar ju I WIMN och jag tycker det gäller neOWIMN specifikt. Jag älskar ju Det att skriva. Jag tycker det I sig är så kul. Men när man jobbar I terminalen så är det inte nödvändigtvis så att det är inte där ny funktionalitet kring det här kommer först. Då blir man så här, okej men ska jag testa någon nyare för att prova. Jag tror jag delade din åsikt. Jag vill ju typ sitta utan distraktioner och bara få in det som För det ger mig glädje liksom. Ja, och samtidigt så är det ju onekligen så att när jag har Copilot påslagen I Visual Studio Code. Jag vill ju kanske egentligen inte så mycket av intelligensen, men däremot att den ibland funkar som en väldigt mycket smartare auto-komplextering. Spara tid helt enkelt. Det sparar man ju lite tid då och då, och hjälper mig att avsluta en grej och samtidigt hålla en tank I huvudet. Så det är väldigt balansgång. Det är både störande och lite hjälpsamt samtidigt. Det kan vara mycket frustrerande också. Ja, visst. Jag menar, på mina mer cyniska humör, så kan jag tänka mig att om tillräckligt många går tillräckligt hårt in på AI-utvecklingen, så kan vi vara några andra som sitter I törn och känna storkoran på att vi skriver väldigt pålitliga små saker med minsta möjliga kod som är hantverksmässigt skriven. Det blir mycket mer förutsägbar. När det gäller att producera kod kanske är en aspekt I sig, men säg alla de här bildgenereringarna. Det är inte som att du får samma resultat eller samma fråga. Det blir ju lite svårt. Vad är det egentligen som kommer ut? Det kommer säkert funka. Men det Det är där I den balparken. Det är som att prata med någon slags drömgenerator. Det händer något I en dröm och så tror man att det här är samma så allting runt omkring en dans. Nej, exakt. Det kommer väl vara viktigt att fortsätta vara nyfiken på det I alla fall. När det använder det till en rimlig grad där det känns som att det gynnar en. Vem vet? Vi stämmer av igen om 2 år och ser vad som faktiskt hände. Något mer vi borde få med innan vi avslutar för idag? Jätteintressant. Jag tror inte det. Jag tror vi har varit inom det mesta som jag har. Jag tror att det finns några länkar som vi kanske skulle kunna lägga in I någon beskrivning. Ja, exakt. Jag lägger ner massor med länkar, inklusive till SJ:s designsystem också. Tycker det är trivsamt att de gjort en sajt för sitt designsystem. Den visar ju bara komponenterna, men den känns samtidigt 100 procent SJ, så de har lyckats få till en enhetlig känsla på det på ett ganska tidigt sätt. Det är också så här, det är lite powermove att lägga sin system publikt. Vi hade säkert också kunnat tänka oss att göra det I framtiden, men vi har inte vågat göra det ännu. Det har inte funnits ett tillräckligt skyltfönstervänligt material kanske. Nej, jag kan helt förstå resonemanget. Men som sagt, vi länkar in sånt också. Om du kommer på några fler grejer, så tar vi med dem också, så folk massvis att titta på. Tack så jättemycket Johan för att du ville vara med! Tack för att jag fick vara med! Tack för att just du lyssnade på kodsnack! Om du vill stödja oss, Eller lämna en recension I t ex ITunes eller något annat ställe där det går att sätta betyg på poddar. Du kan också stödja oss genom att köpa oss en kopp kaffe på Coffe: w w punkt co-bindesefik punkt com snedstreck kodsnack Alla pengar går direkt till att göra podden bättre och trevligare. Du kan också komma och hänga I vår slackkanal, länk finns på kodsnack punkt se precis som alla andra länkar och all annan info kopplat till varje avsnitt. Sist men inte minst finns det också en länk till vår Spredge-butik där du kan köpa tröjor och andra prylar med kodsnackttryckktryck. Återigen, 1000 tack för att du lyssnade. Vi hörs.