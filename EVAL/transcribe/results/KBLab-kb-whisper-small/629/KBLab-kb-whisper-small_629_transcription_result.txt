Jag tror verkligen att om du knappar runt i det du utvecklar lokalt med tangentbordet och ser till att du kan komma åt allting, Du kan fylla i allting och öppnas någon modal eller någonting så sitter fokus rätt och du hamnar inte plötsligt bakom modalen. När den stängs så är du ju kvar där du var. Du behöver inte navigera genom hela rålet igen. Och att liksom bara kunna slå igång en skärmläsare i 45 sekunder och bara liksom... Det känns som att det makartjänst för mig då mekar det förmodligen hyfsat sämst för andra. Målet är inte att man ska täcka 100% av alla problem som kan uppstå utan det är bara att få de lågt hängande frukterna, helt enkelt, utan att behöva göra det separat. Gör man det redan i den lokala utvecklingen, då kanske majoriteten av det som finns i någon läskig, lång kravlista, som är 2 kilometer lång, då kanske majoriteten av det är redan löst. Hej och välkomna till Kodsnack! Jag heter Fredrik, som vanligt, och idag har jag med mig Johan. Hej Johan! Vem är du? Vad gör du? Jag är en utvecklare som jobbar på SBAB till vardags, där sitter jag sedan relativt nyligen i ett nystartat designsystemteam. Men jag har varit där i ett antal år nu. Jag tror att vi är inne på det sjunde året, så jag har gjort lite annat under min tid. min tid. Jag tror att det är mitt tredje team. Ja. Eller jag vet att det blir tredje tiden, det skulle jag kunna säga. Men, ja precis. Så det är lite det som vi sitter med och vi jobbar ganska mycket också med tillgänglighet För det kommer ju ett nytt tillgänglighetskrav, eller tillgänglighetsdirektiv just nu. Just det. Så det tar upp väldigt mycket av inte bara vår uppmärksamhet, utan hela utvecklingsorganisationens egentligen. Ja, så ni har ett designsystem-team nu, var det så? Hur kom du till det? Har du varit inne på designspåret och kommit in på det teamet? Eller kommer från ett annat spännande håll. Jag har väl varit intresserad av designspåret lite grann. En gång i tiden, för 15 år sedan, så tror jag att jag trädde in i utvecklingsvärlden ifrån att ha lekt lite grann med design. Det ligger någonstans i ryggmärgen, även om jag inte är en designer eller uväxlare på det sättet. Jag tror väl att jag tycker ju att i de allra flesta tillfällen så tycker jag att den tekniska biten av det är det mest intressanta. Men lite bakgrund kring det är att vi har ju på jobbet då. Just nu så är vi cirka 20-25 stycken utvecklingsteam och jag har fått lite siffror här, 135 stycken utvecklare och testare. Det är ett par stycken. Ja, och det är, jag vet inte, men majoriteten är ju utvecklare då. Vi sitter och jobbar på lite olika sätt och det ändrar ju sig lite över tid också men man jobbar ju ganska autonomt och man jobbar i ganska många olika appar. haft lite olika sätt, hur vi levererar frontendapplikationer, både internt och externt och till privata kunder, företagskunder och allting sånt. Det har varit väldigt många appar. De har en tendens att bli lite utdaterade. Man kanske kopierar en lösning som man gjorde där och sen klistrar man in det i den nya appen och så gör man ändringarna där. Så här blir det ju inkonsekvent släppt. Det var väl egentligen så det började 2018. Hur många år sedan det nu är? Det börjar väl bli... Precis, jag skulle säga tre. Ja, jag skulle också se det. Mars 2020 är ju ändå samma år. Ja men exakt, exakt. Nej men så då började vi lite inofficiellt helt enkelt. Ett gäng utvecklare som satt i lite olika utvecklingsteam. Vi lyckades få att vi kunde sitta en eftermiddag i veckan eller något sånt och ta det och programmera lite grann. Rent från allas eget intresse, så att säga? Ja, man hade ju sett det här behovet och sedan tror jag att sedan dess så har vår design och UX-avdelning också växt ganska rejält. Men på den tiden så var det inte lika många. Så vi hade ju ändå rätt nära dialog med dem och de såg ju om några det här problemet. Det kändes ju verkligen som att det finns ingen röd tråd någonstans. Nej men då började vi se vad som är det vanligaste. För vi har ju inte heller fått något commitment på att underhålla det här enligt något strukturerat. Så då blev det så här: Väldigt mycket handlar om formulär. Vi ska samla in data i ansökningsflöden och man ska göra överföringar och allt vad man nu gör. Så vi började i den änden egentligen och bara försöka... Vi vet inte nödvändigtvis vad som är rätt. vad som ser rätt ut, men det viktigaste är kanske att det ser likadant ut. Vi gjorde ju ett litet bibliotek egentligen som vi distribuerade med en internt MPM-registry. Och sen så visste vi då att om vi fokuserar mer på API:t och inte tänker så mycket på att skylta med några detaljer kring looken-fil, så kan vi ju ändå ganska flexibelt uppdatera det över tid när vi vet mer om vad som är rätt visuellt. Så det var så det började. Det har egentligen hållit på så sedan dess fram till Q2 i 2024. Så första april där i krokarna så satte vi officiellt igång ett team. Det här projektet har ju levt, eller projekt, jag vet inte vad man ska kalla det. Det har ju levt lite inofficiellt, så det har ju varit så här periodvis har man hunnit jobba lite mer på det och periodvis har man inte hunnit jobba någonting alls på det. Men det har ändå varit i användning hos ett antal team sedan 2018. Så det var helt enkelt ett NPM-paket med UI-komponenter då? Ja, exakt. Ganska begränsad dokumentation i anslutning till det. Sättet som det skiljer sig idag är ju att vi... Det är ju ett helhetsgrepp mer kring, Designsystem omfattar ju mer än bara kod och design egentligen också. Man kan ju dra det till att det kan handla om copywriting, bildmanér och alla möjliga grejer. Och det där har vi ju inte riktigt en lösning för ännu. Men på sikt hoppas vi att vi ska kunna centralisera det. Även om vi inte själva står för innehållet nödvändigtvis så ska man inte behöva liksom, Ja men vart finns det här? Finns i sjön och så får man leta upp det. Utan att man mer kanske kan ha en samlingsplats där man hittar både dokumentation och relevant information som utvecklare och designer. Men man kanske kan hitta till relaterade resurser också, även om inte de är skrivna där. Ja, för det var ju en sån intressant grej kände jag när jag började fundera inför vårt snack. Just det där med hur stort eller litet paraply är ordet designsystem. Det känns som att på ett sätt kan det bli hur brett som helst nästan. Det finns väldigt mycket nyttigt som man kan baka in under det. som du säger. Hur skriver man text? Det kanske inte är det första man tänker på, men det är ändå onekligen en grej som dyker upp när det gäller att få saker att se ut och kännas på samma sätt över en massa olika saker man bygger. Jag tror att du och jag jobbar på relativt liknande utmaningar. Bygger en del användarupplevelser i fronten-applikationer. Ja men precis, och ett helt gäng team som gör saker som... Ja, men i en idealvärld skulle nog CU:n fungera ganska exakt likadant i många fall. Inte alla, men många. Just det här med copy till exempel. Det beror lite på. Jag tror att en intressant grej som vi kanske kan komma in på är hur vi arbetar och samarbetar med vår UX och designavdelning nu. som är faktiskt dedikerade resurser i vårt nya team. men historiskt så känns det som att det inte är helt ovanligt att det blir lite vattenfalligt. Vi kanske sitter i en pipeline där man har så mycket i pipeline att utvecklarna sitter helt fokuserade på det. Och då blir det lite så att affärsanalytiker och UX:are kanske springer före på nästa grej. Och så blir det lite mer av en överlämning än vad man kanske skulle önska alla gånger. Då är det ganska klassiskt att man till exempel säger, vad händer om det blir fel då? Om man nu försöker skicka in det här och det inte funkar för någon downstream-tjänst där nere. Just det. Då är det liksom också så här. Det är ganska vanligt att man inte nödvändigtvis har tänkt på det i en designleverans, Då är det ju jättevärdefullt att ha lite riktlinjer kring det och att vi kan försöka hjälpa till att det ändå blir konsekvent. Man behöver inte vara expert på copywriting, utan man kan hitta lite resurser. Räcker det kanske en bra bit på vägen? Jag tror att man kan nog fånga en del lågt hängande frukter på att vi kommer framåt utan att vi behöver fråga någon annan avdelning om hjälp. Ja, det har varit jätteintressant att utmana det här med kommunikationen och flödena av att få saker gjorda och ta tid. Som du sa precis i början där, det är väldigt lätt att man hamnar i det där läget. Ja, men ibland blir det lite gjort. Och sen går jag i en jättelång period och ingenting händer. Nej. Man har 17 andra saker som både är och framförallt bedöms som viktigare just då. Ja, och det kanske man, nu, vi har ju hållit på med det här nu, vi konstaterade att det var mer än tre år. Det känns som att få ett commitment på att kunna göra det här också. Där har ju det här tillgänglighetsdirektivet varit. Det var det som fick skjuts i den prioriteringen. Det är ju också så att det är ju en utav våra stora fokusområden, är ju just tillgänglighet och försöka dels baka in tillgänglighet där vi kan. om det är i vårt komponentbibliotek. Sen finns det ju delar av tillgängligheten om hur ett helt flöde hänger ihop som är svårt att automatisera. Det är ju en av de grejerna som jag tror fick organisationen att liksom gå med på att Ja, men nu startar vi ett team kring det. Jag har nog personligen velat ha ett team kring det i alla de här åren nu, men nu har det äntligen skett. Det är ju så att tillgänglighet är ju viktigt, men jag vet inte, man har kanske inte riktigt insett det. Eller att man har tänkt att det är viktigt, men det måste ju också konkurrera med andra projekt. I bankvärlden är det en massa regulatoriska grejer och det är kanske stora systembyten och då är det ju ibland svårt att... Det här är viktigt, men tyvärr. Vi hinner inte. Nej, precis. Det är fortfarande bara näst viktigast. Ja, men exakt. Och det kanske är drivet av vår UX-avdelning. Jag tror att vi har skrivit ner lite siffror och information här. 2019 så började vi jobba lite mer dedikerat med tillgänglighet. Men det blev ju, då har vi ju samarbetspartners som är experter på det som kommer in och hjälper oss. Och så gör man en typ av analys och översyn över våra flöden. Men då blev det lite mer punktinsatser. Så jag tror inte vi lärde oss tillräckligt mycket för att ta det vidare nödvändigtvis. Man gjorde en review och så åtgärdade man lite fel där. Jag tror inte vi lärde oss mindsetet hur vi ska utveckla tillgängligt, Utan det drevs nog mest av enskilda individer, typ eldsjälar, i de olika teamen. Så det vi försöker göra nu tillsammans med det här projektet som då drivs parallellt som är tillgänglighetsprojektet egentligen det är ju att försöka få lite mer långsiktighet i det och inte se det som ett projekt som tar slut slut, utan att vi måste få in det i vårt arbetssätt och process. Ja, precis. Det är själva teamet för designsystemet, hur stort är det ungefär? Ja, just nu är vi samma uppställning sedan start. Två utvecklare är vi som har varit med och inofficiellt petat på det här. Det som fanns innan. Och sen så är vi faktiskt, ja vi är typ tre UX:are. En av våra UX:are är ju en fulltidsresurs som fokuserar på designsystemet. Två av dem har lite andra åtaganden också. Sen är vi en produktägare och det tillkom i samband med att vi startade teamet. tycker jag är kanon. Man är inte nödvändigtvis alltid så bra på det som utvecklare kanske. Är du det? Designer. Man märker skillnaden när man har en bra produktägare på plats. Jaha, oj vad mycket mer rakt på sak. Tydligt vissa grejer blev plötsligt. Ja, exakt. Bara att vi håller rätt riktning. För jag menar, som utvecklare, du känner kanske likadant, men att det är ganska lätt att ramla ner i lite såhär kaninhål ibland. Jo, jag har gjort det en gång kanske. Ja, jag har nog också kanske gjort det en eller två gånger kanske. Och sen en teamchef har vi, så vi är väl, vad blir det, typ fem? Ja, men 5-7? Nej men så. Det funkar ganska roligt eftersom det är ett nystartat team och vi har ju kvar det här som hade tagits fram officiellt innan. men vi har ju inte så mycket legacy. Det är ju väldigt mycket greenfield egentligen. Och man får ta reda på ganska intressanta grejer. Vi vet ju att vi vill underlätta för våra utvecklare och designkollegor framför allt. Det övergripande målet handlar om att vi vill bidra till effektivare produktutveckling. Sen så vill vi ju göra den här gamla, det som startade initiativet från början, att se till att det blir en konsekvent användarupplevelse och att vi följer våran branding och att det ska bli lätt att göra rätt på det. Och sen är det ju då tillgänglighet som är. Men det som är intressant är ju att vi har fått upptäcka hur ska vi jobba i den här konstellationen och med den här produkten? För det blir ju en intern produkt och det är ju väldigt kul eftersom du har ju dina slutanvända det intill dig. Ja, superlärande. väldigt mycket feedback, men då har vi ju fått prova oss fram och vi jobbar lite grann i kvartal. Det känns som att vi provar ett arbetssätt och Sen så behåller vi det som känns bra in i nästa kvartal och så kanske vi skruvar på något annat. På senaste kvartalen så har vi i alla fall, vi jobbar i två stycken arbetsmöten per vecka Där vi försöker sitta hands on och jobba tillsammans, både utvecklarna och UXA. Det gör ju att det här samarbetet är mycket tätare än vad det var i, åtminstone de teamen jag var med i innan. Och då känns det som att man kan ta vissa beslut, som träffar både vår kodbas och vår i det här fallet Figma. Och det känns som att det har varit väldigt värdefullt. Men ja, så ser teamet ut. Just det, och det är så ni jobbar. Arbetsmöten, två stycken och sen så jobbar man mer på varsitt håll resten av... Ja, jag tror att det är lite speglar hur utvecklingsteamen jobbar också. Nu jobbar ju inte med de vanliga produkterna på samma sätt så jag kan väl inte svara exakt för hur genomsnittsupplevelsen blir. Men man är ju autonoma, så man får ju liksom, vi vill ju jobba agilt. Alla team har väl i princip sin egen twist på vad det innebär med ceremonier. Vissa kör någon kambandvariant och andra kör sprintar. Det finns alla. Vad som passar just det teamet. Känner jag igen också. Väldigt svag. Precis. Men hur det... Vad, liksom... Äger eller driver eller kontrollerar erat team kontra andra team? Jag tänker såhär, att ni gör en del komponenter, förstår jag ju. Här kommer en standardkomponent för att göra den här saken. Blir det då att man drar in nya komponenter som så att säga tillhörde ett annat team förut? eller hur funkar flödet mellan er och övriga team? Dels fanns det ett antal komponenter som vi förvaltar vidare och vidareutvecklar. Och det andra handlar ju om att försöka snappa upp vilka behov vi har. Och att inte nödvändigtvis committa alltför långt fram i tid utan att försöka vara lyhörda och snabbrörliga. Men komponenter är väl en ganska central del i det. Vi har fokat ganska mycket på dokumentationen kring det också. Jag tycker personligen att det är en first class citizen i den leveransen också. Det är inte bara så att det finns en hink med komponenter, varsågod, that figured out. Utan att man försöker ändå ha det i åtanke. Och i och med det så får vi ju liksom bygga vår egen pipeline med hur vi levererar vår produkt. levererar vår produkt. Vår produkt består ju på kodsidan av bibliotek som man lyfter in via MPM. och sen så består den i tillägg av dokumentation. Det har ju också varit en annan lite kul grej, för det har inte nödvändigtvis funnits en färdig pipeline för det. De andra teamen har inte riktigt haft det behovet. Där har man fått vara med och bygga upp det enligt de behov man har. Det blir lite andra saker att tänka på där. Det här ska ju versionshanteras och versionshanteringen är någonting som är väldigt viktig för att säkerställa att det blir stabilt i längden. Vi försöker förhålla oss till semantisk versionshantering och att man ska kunna lita på att saker och ting funkar. Om någonting har breakat så ska man få reda på det och kunna ta hänsyn till det. Men annars så är det ju, jag tror att det där är också lite grann i rörelse. Vad är det vi kommer att äga som team? Vad är våra produkt-R egentligen? Det finns ju ganska mycket material som är utspritt på någon kunskapsbank här och sen så finns det något externt semi-SDER för något ändamål. I nuläget är det mycket fokus på tillgänglighet, så jag tycker att det är lite intressant och spännande. spännande att jag vet inte riktigt exakt hur det kommer se ut. Jag tror att vi kommer försöka se till att lyssna på våra användare och forma det därefter. Det är väl då det blir bäst också. Ja, och tillgängligheten, om vi ska gå in lite mer i detalj på det, så är det ju, För de som eventuellt inte vet det, så är det ju en ny lag. Så den träder i kraft den 28 juni. Och det här vet jag att de som har varit drivande, De har ju sagt det men förr eller senare så dyker det där datumet upp. För fem år sedan så kändes det som jättelugnt borta. Men nu är det ju all hands on deck. Se till att vi liksom... Och det är väl en... Man kan väl säga att det är en vidareutveckling av de lagkraven som redan gäller för offentlig sektor. Som man har varit inne på, myndigheter och sjukvård och sådär så har ju de redan mycket av de här kraven. Och nu utökas det till att gälla privata aktörer också. också. Så från ett visst håll kan man se det som en breddning av någonting som redan fanns. Ja, och sen är det också en gräns, vilka som omfattas är också lite luddigt. Och här vill jag brasklappa lite grann också. Jag har någorlunda koll på det här men det känns som att när det gäller alla de här, bara ta det jag säger men det är passat så att man påstår att så här funkar det och sen så kanske jag har missat någon paragraf. Allt det här är vår uppfattning utifrån det som vi har hört och sett och sådär. Vi är inte lagtolkade. Nej, jag har försökt koka ner det till pragmatiskt, vad är det som gäller? Men ja, så nu är det ju ett antal typer av tjänster som omfattas av det här och det kommer ju på sikt att utökas till flera. så träffas man inte av det här i nuläget så kommer man säkerligen att göra det inom en relativt snar framtid. Det betyder i praktiken att det finns ju en europeisk standard som är till för tillgänglighet och inkluderande i EU. Och en utav aspekterna, de allmänna kraven som man omfattas av, det är ju de här WCAG som spesar upp. Det ska funka så här helt enkelt. Färgkontraster och allt vad det är. Sen finns det lite branschspecifika krav som beroende på vad man är för bransch så kan det vara extra saker som man måste tänka på. I vårt fall som bank omfattas vi av begripligt språk och det betyder att det ska vara lätt att ta till sig innehållet. innehållet. Det ska åtminstone finnas möjlighet att om någonting står på massa facktermer och så ska man också kunna se det på något sätt som går att begripa även om man inte nödvändigtvis är i finansbranschen. Det är ju faktiskt ett underbart krav. Ja, jag tycker det också. Sen är det ju så att de bästa lösningarna för det här är ju lika tillgängliga för alla redan från början. Det blir någonting man bara lägger ett lager på lager. Vill du ha lite mer tillgängligt för att slå på det här läget? Just det, precis. Är det lite administrativa krav, så omfattas man av det här direktivet så måste man också arbeta med dokumentation och rapportera sina tillgänglighetsbrister. Och då finns det någonting som kallas för en tillgänglighetsgörelse som man behöver ha då. Och det är typ en listning någonstans på sin sida som hålls uppdaterad på. Här är de brister som finns, förklara varför och länka tänka om det finns något mera tillgängligt alternativ och lite sånt där. så tror jag också att man behöver ha en kommentarsfunktion så att användare av din tjänst ska kunna rapportera in det här om de stöter på något. Så det är egentligen lite grann visa, vi är medvetna om vad vi klarar och inte klarar och att vi jobbar på det? Ja, precis. Om man nu kommer till vad det får för påföljder ifall man inte uppfyller de här kraven så tillgänglighetsredogörelsen är nog en ganska viktig del i det. Men vi är medvetna om det och vi... Ja, just det. Vi är på bollen typ. Just det. Lite sådan här... Jag har för mig att det fanns Någon slags relaterad känsla i vissa delar av när GDPR var på tapeten och höll på att införas. Medan en grej var att det fanns jättestora stränga påföljder. Men det fanns också en ton av att visar du att du jobbar aktivt med det här och rapporterar när ni har problem så gäller det att visa en rätt anda också. Ja, men exakt. Så tolkar jag det i alla fall. Det känns ju lite som att även om jag tror att man förväntas vara compliant med det här när 28 juni inträder så går det ju säkert samman, vi har inte hunnit helt enkelt. Ja, men om man kan visa att det här är det viktigaste i det här sammanhanget. Vi kan visa att vi har tagit det och att vi håller på med resten. Ja, men exakt, exakt. Och sen kanske man kan komma till den punkten. Vilka omfattas då? Precis, det tycker jag verkar lite svårt. I vissa branscher känns det väldigt tydligt. typ e-handel, är ju en av dem som omfattas av det här. Ja, det är rätt lätt att veta om han är i hand eller inte. Exakt och banktjänster är också sådant. Det känns också jättelätt. Men sen är det elektroniska kommunikationstjänster och det finns lite exempel. Vi kan säkert lägga in några bra länkar i beskrivningen också. Det finns ju från Telestyrelsen så har de någon sorts introduktion till EUs tillgänglighetsdirektiv. Elektroniska kommunikationstjänster som till exempel Uppkoppling och abonnemang, telefonsamtal, e-post, sms, chatt, videosamtalstjänster. Men det kan säkert vara fler. Ja, jag tänker det. Det kan nog bli ganska brett. Ja men exakt, och sen såhär streamingtjänster, medietjänster typ. Det är väl en utav dem och sen så är det vissa tjänster för persontransporter. Ja, så det lämnar utrymme för tolkning. Banktjänster nämnde vi och så e-böcker behöver vara tillgängliga och e-handelstjänster. Det är ju en ganska stor sektor som omfattas. Sen tror jag att det är vissa fysiska... Alltså om man har betalningsterminaler eller olika typer av automater så tror jag att de också omfattas. men jag för mig att jag läste någonstans, Har man en sån fysisk grej ute så tror jag att det finns någon regel kring att om den står där idag så kan den stå kvar tills den är en viss ålder eller något sådant. Ja, det känns ju sansat. Man kan säkert försöka utbilda sig i om man omfattas eller inte. Eller inte. Men jag skulle förespråka att man kanske ändå tänker på tillgängligheten. Jag vet inte, för mig så har det varit lite grann. Jag har inte riktigt varit så bra på att tänka på tillgängligheten historiskt. Ju mer man har fokuserat på det, så har det ju låst upp lite grann. Det är typ ett nytt gränssnitt i din app. Ja, det är det som är så spännande. När du får in vanan att jag har kortkommandot för att starta skärmläsaren. Jag kan de vanliga navigeringssätten. Då får du helt plötsligt ett nytt gränssnitt för din app som du kan se till att få en bra användarupplevelse på. För mig är det jättemotiverande. Jag tycker det är jättekul. För det kan ju vara helt förfärligt. Det finns jättemånga roliga exempel när det är så här, du kan typ hoppa genom 48 element som bara säger, pill, pill, pill. Det är ganska svårt att veta vad är det då? Ja men exakt. Jag tycker att det känns som att det är viktigt utan tvekan. men det är också någonting som jag tycker är roligt. Det känns som att man har låst upp en ny liten dimension här i sitt utvecklande och vad man levererar när det gäller bra användarupplevelse. Exakt, man får lite trevliga incitament att bygga saker på mer genomtänkta sätt. Man gjorde första versionen av sin webbapplikation och så är allting en div med olika styling på. Man ska komma på att ha en A, HRF, en vanlig länk. Det är inte bara bra för tillgängligheten. Det är faktiskt ganska bra för alla att se att det här är en vanlig länk. Den funkar som en vanlig länk. Den ser ut som en vanlig länk. Alla sådana grejer. Den går att navigera. Har vi gjort det bra att navigera med skärmläsare så blir det ofta bra att navigera med tangentbordet också. Att bara kunna tabba igenom saken i en vettig ordning är ju väldigt nyttigt för precis alla. Ja, men just det. Det är en sån där grej som man kanske inte ens tänker knappt på när man sitter och utvecklar. När man sitter och utvecklar så blir man lite hemmablind också. Du är inte nödvändigtvis den tilltänkta målgruppen för den appen du utvecklar. utan du, jag ska bara utveckla den. Jag tror att man, du har ju säkert använt olika system, även om de är webbaserade, där man bara såhär, men alla de här tangentbords-tabbar att navigera med olika sorters kortkommandon eller piltangenter och så vidare, det bara funkar. Det är ju en trevlig överraskning. Överraskning. Det skulle lika gärna kunna vara defaulten. Ja, exakt. Det borde vara lite jobb att sabba till. Jag tror att för vår del, det som vi försöker bidra med när det gäller utvecklingen är att alla kanske inte ska behöva vara tillgänglighetsexperter för att vi ska kunna leverera ett bra resultat. Dels baka in det när det finns och går, men också uppmana till att man har det mindsetet att redan när du sitter i lokal utveckling, Tryck igång skärmläsaren. Man behöver gå någon liten crash course i hur skärmläsaren funkar, för den kan vara ganska överväldigande när man sätter igång den. Man har ju hört när den drar igång på 180 km i timmen. spottar ur massa information. Ja visst, det är så proffsen använder den. Ja, och man kan ju ställa in den precis så som man vill. Jag tror att en av de viktigaste, nu sitter jag på Mac, det är säkert lite olika beroende på vilken och då använder jag den inbyggda voiceover. Men jag tror att den viktigaste tangenten är kontrolltangenten. För den får den att bara vara tyst. Den liksom pausar uppläsningen. Så när du sätter igång den och du bara vill få... Nu måste jag tänka. då kan man alltid trycka in kontroll innan man gör sin nästa grej. Men jag tror att det är nog inte mer än kanske 5, 6, 7 stycken kommandon. Man behöver kunna för att kunna använda den effektivt nog för att fånga mycket av de här lågt hängande frukterna. Och då kanske det också är så här, gör man det redan i den lokala utvecklingen, då kanske majoriteten av det som finns i någon läskig, lång kravlista, som är 2 kilometer lång, då kanske majoriteten av det är redan löst. Sen kanske de som är lite mindre problem, som är lite svårare att upptäcka De kan man säkert behöva åtgärda ändå när det är någon sorts testprocess eller review senare. Jag tror verkligen att om du knappar runt i det du utvecklar lokalt med tangentbordet och se till att du kan komma åt allting, Du kan fylla i allting och öppnas någon modal eller någonting Så sitter fokus rätt och du hamnar inte plötsligt bakom modalen. När den stängs så är du kvar där du var. Du behöver inte navigera genom hela jollet igen. Och att kunna slå igång en skärmläsare i 45 sekunder och bara liksom "Det känns som att det makesans för mig då makes det förmodligen hyfsat sans för andra". Och sen så är det ju med också, visst är man proffsanvändare av det här så kan det ju hända att det finns insikter som man själv inte kan heller. Men jag tror målet är inte att man ska täcka 100% av alla problem som kan uppstå, utan det är bara att få de lågt hängande frukterna, helt enkelt, utan det går att använda. Ja, precis. Ett snabbt och jättestort tack till alla som stöttar oss på Coffee, du kan bli en av dem genom att surfa in på ko-binde-fi.com/kodsnack och slänga iväg antingen en engångssumma eller ett månadsvis stöd. stöder du oss på nivån kaffedrickare för fem euro eller mer i månaden så får du ett gäng trevliga klistermärken i brevlådan. lådan, stödjer du oss på nivån Barista för 10 euro mer i månaden så får du dessutom, förutom klistermärkena, Ett stort tack, precis här. Tusen tack till Michelle, Albin Groen, Anders Legell, Brother Ingo och Tobbe Lundberg! Alla ni som stöttar oss hjälper till att göra podden möjlig, och ju fler ni blir, desto bättre podd kan vi göra. Ibland har vi sponsorer i podden, men det är faktiskt ert stöd som gör att vi börjar kunna täcka kostnaderna för podden varje månad. Vill du stödja oss på andra sätt, så går det naturligtvis utmärkt att recensera podden i din poddspelare, sätta betyg eller en stjärna, oavsett om det är Spotify, Apples podcaster eller någon helt annan app. Eller berätta helt enkelt om ett avsnitt för någon som du tror skulle gilla podden. och just nu har vi precis släppt ett helt nytt sätt att stötta. Vi har ett klistermärke till försäljning. I Coffee-butiken finns det ett trepack klistermärken om livet som agil lokförare Fram improviserat i en milt urspårad diskussionstråd härom veckan, visar ditt stöd för alla safe-utövare därute och får den där sköna känslan i magen av att bidra till kådesnacks, fortsätta resa. Men kom ihåg, du är en fantastisk person oavsett om du stöttar oss eller ej. Jag antar att det fortfarande gäller att man får rätt mycket gratis av att använda standardkomponenter också istället för att finna sina egna. Ja, du tänker på inbyggda element i det här. Det känns som en sån grej som fortfarande driver förbi mina massor och de flöden. Gör inte din egen ersättning för en knapp eller något i onödan. Utan se till att du verkligen behövs. Då har du rätt mycket att implementera om det ska bli lika tillgängligt som en standard. Om du går DIV-hållet. Nej men så är det definitivt, det finns många inbyggda element som är mer semantiska som man kan luta sig mot. Men sen är det ju lite så, det beror lite på. När jag kommer till tillgänglighetskraven och just WCAG kanske specifikt så jobbar man ju i olika nivåer. Då är det liksom A, AA, A3PLA. Och jag tror, om jag inte minns fel, att någon får rätta mig om jag har fel. Men jag tror att den här nivån som man ska uppnå är dubbel-A. Det kan hända att det skiljer sig lite beroende på vilken typ av problem det är, men Typ La är då den högsta ambitionsnivån. Jag menar, det kan man ju lika gärna sikta på då om man inte vill ha det orimligt. Jag har kollat lite på BCAG några gånger och det känns som att den högsta nivån kan vara ganska utmanande ganska ofta, har jag för mig. Ja, men jag tror säkert att du har en balans där så att man inte liksom... Ja, men A var väl ofta ganska rimlig? Man kan säga att det här förstår jag ju, dels vad jag ska göra och varför och dels hur jag kommer dit. Och sen dubbelav. Det här är samma fast mer ambitiöst på något sätt. Och sen så tripplar jag såhär: Nu, nu, nu kan det bli mycket. Ja, nej men exakt. Jag tror att det som du säger stämmer till hundra procent att liksom, återuppfinn inte hjulet om man inte måste. Jag vet inte, när det kommer till de komponenterna som vi levererar så försöker vi ju inte återuppfinna hjulet. Även om det är en komponent som inte nödvändigtvis går att bara bygga, den finns inte i browsern. Det kanske är en lite mer interaktiv komponent som kräver... Nu finns det ju ett inputfält för datum, men vi kanske behöver ha ett sätt Att man ska kunna ange en range av datum och vi vill ha det som en bra upplevelse. Man får det om man ska boka en flygbiljett eller hotellnatt eller något sånt där. Exakt. Och då måste man ju gå lite utanför vad som finns inbyggt. Och det som vi försöker tänka på där som jag väl kanske skulle uppmana ifall det är någon annan som sitter med liknande utmaningar. Även om det är så att det här finns kanske en färdig komponent för i något Offterself-bibliotek ute i ekosystemet. så försöker vi ändå säga ja, det kanske är rimligt för oss att bara gå på den lösningen. Men sättet vi tänker på det då är att sätta ett eget interface av, ja men hur ska API:t se ut? Och det kan vi säkert inspireras av hur det ser ut där. Även om det nästintill är en etthetmätning, så är det en explicit. Vi lägger in det, för då blir det inte ett implicit beroende på just den komponenten. komponenten, utan då skulle vi ju sen kunna CSR. Men vill vi bygga den kastum eller behöver vi bygga den kastum? Kommer det en ny aktör eller något nytt bibliotek som funkar ännu bättre? Det är väl en av de nyckelstrategierna som vi försöker tillämpa. Vad det än är för komponent så är API:et lite heligt. Det försöker vi se till att vi har en uppfattning om hur vi, och där är det ju såklart, det är svårt att säkerställa att det blir så Men är det intuitivt, är det flexibelt? Och flexibelt så menar jag bara. Är det flexibelt för att vi kanske vill ändra vår lösning under huven på sikt? Precis. Jag har en kollega som jobbar rätt mycket med våra komponenter. ett litet sånt projekt också. Han har ju sagt exakt samma grej: Vi ska se till att slå in det. Vi använder rätt designbibliotek nu, ganska mycket. Men hans ambition är att allting som vi har som gemensamma komponenter ska vara inslaget, precis så. Vi blir inte beroende av det biblioteket, för just nu sitter vi stenhårt fast i det, framförallt i en del äldre projekt. Att det är en katastrof att försöka uppdatera en mig nu. Exakt, och jag menar, även om du då tar den approachen så kanske majoriteten av biblioteket ändå använder någonting sånt färdigt. Men då är det i alla fall, förlitar du dig helt och hållet på deras API, då sitter du lite i händerna på dem också när du säger att nu har vi gjort en ny Major-uppdatering som breakar en massa grejer. Då har man åtminstone en chans att motverka det. Kan vi då, om vi nu inte bara kan byta komponent i samband med det, kan vi åtminstone se till att vårat API som vi tillhandahåller går att mappa om till vad som än är ändrat? Så det tycker jag är typ en key, take away, i sammanhanget. Och sen när det gäller lite grann så som vi snackade om med hur vi försöker snappa upp behoven ifrån organisationen, så jag tror ju ... Och där har vi ju, i samband med UX också, Det som är intressant med vårt täta samarbete är att man kommer från olika perspektiv. Från kodsidan så har vi ett visst perspektiv Särskilt när det gäller versionshanterade kod. Det finns vissa spelregler helt enkelt. På designsidan kanske det inte riktigt har varit lika känsligt med sådant. utan då har vi behövt närma oss varandra och synka sinsemellan, så att vi inte kan springa före alla gånger på designsidan eller göra en ändring. För det är inte riktigt så det funkar på kodsidan. Men sen så tror jag att en annan grej som vi försöker vara i synk kring, är ju att man vill ju att det ska vara konsekvent. Och därmed så vill man ju att det ska finnas vissa konstrains kanske så att det inte är så att vi kan göra på helt olika sätt med olika appar. Det där är intressant ja. Men jag tycker personligen att... Under de här åren har man ändå både konsumerat ganska mycket innehåll från ekosystemet, från diverse thought leaders och så vidare. Min uppfattning är att den här flexibiliteten behöver vara lite snurrig än vad man tror ändå. Ja, någonstans är det ju alltid någonting. Ja, men det är så trist när du sitter där i din app och så är det så här. Jag behöver måla lite utanför linjerna, men det går inte. Då får jag bara kasta ut allt och göra det helt från scratch. Ja men precis, det blir ju inte hållbart det heller. På så sätt så ser vi att en viss flexibilitet behöver ändå finnas i alla komponenter. Sättet vi ser det på är att det är lite mer high level-komponenter och lite mer low level-komponenter. Och det finns ju en herrans massa namn på sådana typer av om det är Atomic Design eller vad som helst. Vi försöker tänka lite enklare på det. Thail är väl komponent. Det är ett lite mer specifikt användar-use-case. Och man kan använda det med ganska begränsat hopp i. Det är ganska mycket opinion inbakade. Men det gör ju också att det är ganska flexibelt för oss Så att se till att det fortsätter att funka utan större ändringar. Sen vartefter vi märker att, för då kan vi lösa kanske 80% av ett visst behov. Sen så kommer vi till de andra behoven. Och då kan vi ju liksom utifrån det vi vet då så kan vi börja bryta ner till lite mer LO-level-komponenter. Och då kanske man kan liksom... Då kommer ofta de här insikterna om API-design som: Hade vi tagit det här valet så hade vi ju kanske kunnat stödja Utan att man går alltför långt ner i samtida behov vi inte vet att vi har. Vissa sådana grejer blir ändå tydliga. Rent intuitivt känns det som att det här valet hade varit flexibelt även om vi ser framför oss att vi vill göra lite annorlunda också i framtiden. Men om man säger high level i det här fallet, är det typ en sån avancerad datumväljare som vi pratade om innan? Är det en high level eller är det en low level? Ja, det är svårt med de man drar, gränserna. Ja, självklart. Jag skulle se det som, tänk dig på tabeller till exempel. Vi har inte supermånga tabeller ännu i biblioteket. Men jag bara tar det som ett exempel. Där kan man se framför sig att en low level, version av sådana komponenter kan mappa väldigt nära hur det funkar i html. så att du jobbar med Rose och header och olika typer av celler och så vidare. Men en high level-komponent kanske tar en lista av data som den kan mappa om till det där under huven. för ganska många ljusgases, så räcker det. Då är det ganska nice att sätta sig. Då kan du använda en komponent, skicka in datan som du kanske måste bara skruva lite grann på så att den passar. Och sen så får du en tabell. Istället för att då ska jag göra 88 rader kod här för att göra min tabell och mappa igenom saker. Så det är väl ett exempel. Ett annat exempel är kanske att när man jobbar med inmatningsfält i formulär formulär så består ju de under huven av ganska. Alltså de är ju rätt nära elementen i browsern, som input och så vidare. Vi har till exempel en komponent som är en textfield då. Och då kombinerar ju den själva inputfältet med ett sätt att sätta en label på den och ett eventuellt valideringsfel. så sköter ju den om kopplingarna där sinsemellan under huven. Så att labeln blir associerad med inputfältet och valideringsfelet också. Utan att du som konsument behöver säga, men hur var det nu? Ska den vara Orea Lable-Bile? Orea Discribe-Bile? Sådana faktorer. Det är det jag tänker på, men det är ju... Jag tror att vi har stött på många gånger att man säger: "Men är det här en higher level abstraction?" Men ja, till slut så kanske man hamnar i någon Atomic-design ändå. Ja, jo men kanske både och. Det är en ständig utmaning att få till den där balansen. Ja, men den här kan jag göra en jättefin komponent. Men jag behöver skicka in 300 saker till den för att den ska funka. Kan jag tänka om i det här så jag slipper. Ja men då kanske man på en sån här high level, och det är ju också en... Jag vet inte vem det var som hade ett sånt tak någon gång, men som pratade just om OPI-design på någon konferens. Man har ju sett exempel på en react-komponent som har typ 38 props. För att man har byggt på vartefter man har kommit. Ja just det, vi måste stödja det här också. Då är det bättre att separera det till helt olika komponenter så att det blir lättare att underhålla över tid. Så det är väl lite av de tankarna. Mycket av det är common sense, men delar av det har man absorberat under de här åren. De här åren som har stött lite mot det här, även om det inte har varit ens huvudsakliga arbetsuppgift. Nej men precis. Sådant som du säger,elst att få de uttalade och utskrivna. Det är ju en väldigt stor nytta i sig. Annars är det ju någon i teamen som tycker att lite annorlunda är väl common sense. Så har man plötsligt dragit iväg på två spår igen, fastän det inte var avsikten. En utmaning är ju att vi två som är utvecklade i teamet just nu har jobbat med det här innan. Frågan är vad som är inne i vår ryggmärg. Jag tror att det kan finnas, en utmaning är ju att försöka få ner det här på ett enkelt och överskådligt sätt. att det här är ett mindset som vi tillämpar. För det blir ju svårt. Jag vet faktiskt inte riktigt var gränsen går. Vart lämnar det ena hjärnhalvan på oss två och vart möter det någon dokumentationssida någonstans? Det har vi säkert ett jobb att göra. Om man ser till framtiden och att man skulle omborda någon ny eller någon försvinner och så vidare. försöka de grundprinciperna som man på något sätt lutar sig mot nu, som säkert kan ändras också såklart. Men det här är det vi förhåller oss till nu. Istället för att ha en uppsättning regler som blir omfattande och komplicerade och grannlära så är det så här. Vi försöker ha några grundläggande principer som vi tänker på när vi tar fram komponenter och vad vi än tar fram egentligen. Ja visst. Och lyckas man få ner sådant i text eller bilder, vilket material det nu är, då har man något som är väldigt nyttigt. Som du sa innan, allt man levererar är inte bara komponenter utan det är det där. Informationen runt omkring kan ju vara supervärdefull. Även om den kan vara svår att få fatt i ibland. Det är ju också en intressant grej. I bland våra utvecklingsteam så sitter majoriteten åt dem just nu och jobbar i Reactapplikationen. Och det har pragmatiskt sett varit vår. Det var så det började och det är fortfarande så. Det betyder ju att jobbar man i något annat än React och jobbar man i mobilappen eller jobbar man i något av de andra bolagen som ingår i samma koncern så kan man inte nödvändigtvis ta del av komponenterna? För de är ju lite så specifika. Så då blir ju riktlinjer och liksom design tokens och sånt blir ju desto viktigare. Sen så är det ju såklart också jätteintressant att fundera på hur vi skulle kunna brygga gapet mellan olika ramverk och kanske till och med olika plattformar. Men hittills, teamet har ju varit verksamt i tre kvartal ungefär nu, så vi har inte känt att det känns inte så pragmatiskt att liksom börja gå utanför till något ramverk. sagnostiskt när så stor procentandel av allihopa ändå sitter natively med react. Men det är ju definitivt en fråga för nära framtid, förmodligen. Ja, det är som du säger, det är lågt hängande frukt igen. Vad är vettigt att börja med? med, var får vi stor utdelning på det? Ja. Och det kanske inte är att skriva ett generellt dokument för alla typer av gränssnitt. Nej men exakt, håller man sig på webben och tänker att hur kan vi stödja, vi kanske inte kommer jobba med Reactive en massa år fram, det kanske vi gör. Då kommer man ju onekligen att tänka på sådant som webcomponents. komponents, jag tycker också, där är det också lite svårt för jag tycker när man läser om webcomponents. Så där är det också ganska polariserande. Man hör liksom... Use the platform-gänget och så hör man Framework Authors. Jag tycker det blir lite svårt för det känns som att det är därför jag har varit lite försiktig med att skynda mig in i det. Jobbar ju ändå i huvudsak med React. Då vore det ju synd om man ska behöva hoppa genom en massa loopholes för att webcomponents och reality ska samspela. Ja men eller hur. Webcomfortions låter ju så bra på pappret, men är det så bra i praktiken? Man kommer till alla komplexa detaljer som tjära och dem. Hur lirar ramverken och domen egentligen? För många av ramverken går ju liksom en annan väg när det gäller hur de renderar appar. Ja, precis. Som är lite mera, vad är det man kallar det, typ såhär Lazy Rendered medan domen traditionellt är Eagarly Rendered. Samspelar det verkligen? Jag har nog inte helt satt mig fullständigt in i det, men det är definitivt någonting som vi har lust att titta på lite sen. Och det kan ju hända att delar av utbudet av komponenter funkar kanon som webcomponents. De är ganska enskilda, det är liksom ingen komponent som rappar en massa annat, utan det kanske är typ en datepicker eller någonting som är liksom en Leaf Node I hierarkin av alla. Ja just det. Nej, det känns inte nödvändigtvis som en silver bullet, men vi vill ändå utforska det. Jag tror att tittar man i ekosystemet bara i Sverige av andra designsystem och det gör vi ju själva mycket också. Det finns ju i Arbetsförmedlingen och SJ har vi inspirerats ganska mycket av. Ah, så dom kan man surfa in och titta på. SJ har, jag tror att de relativt nyligen har gjort ett omtag på sin, det är någon SJ-design eller något sånt. De har gjort ett bra arbete och det kan man hämta mycket inspiration från. Vissa andra, jag ska inte svära på hur de gör kring det, Vissa andra kör ju 100% webcomponents. Jaha, de gör det. Säkert jättebra, men jag tror att vi vill utforska det i framtiden helt enkelt och se vad det är. Sen vet jag inte, det är ju inte helt otänkbart att landskapet ändrar sig lite grann heller nu när AI är på stort intåg och utvecklingen går så pass snabbt som det gör. Ja, men precis. Det tyckte jag var intressant. så sa du precis innan vi började spela in här att det kan ju mycket väl komma och påverka vad ni bygger och vad man gör och det var en sån grej jag inte hade slagits av förrän du sa det. Nej, jag vet inte om jag hade slagit sig av det själv för några veckor sedan heller. Vi har pratat lite mer om det, för det har ju säkert inte gått någon förbi att det händer saker på AI Och kanske från utvecklarperspektiv så har man ju traditionellt, eller man har kanske tänkt på såhär, Men vad betyder det här för mig? Det är det här för mitt yrke. Men om man bortser från det så tänker jag ju liksom att våra användare som vi bygger tjänster och appar för idag, hur ser deras interaktion med de apparna ut i framtiden? Delar av det kommer ju säkert att övergå till att vara någon sorts assistent. man kanske pratar och ber om, eller chattar eller någonting. Så vissa sådana här stora komplexa flöden, deklarationer eller du ska ansöka om bolån eller vad det nu är, Det kan ju vara ganska omfattande och komplexa formulär. Det kanske är något som skulle vara jättebra som ett chattflöde i framtiden. för då kan du ställa frågor under tiden om det är någonting som du undrar. Men sen tror jag personligen att vi kommer ju säkerligen att ha kvar grafiska gränssnitt för diverse grejer. Men det är också så att i våran interna produkt och dess framtid så blir det någonting som man har kommit underfund med nu. Det här måste vi ändå tänka på, hur ser framtiden ut kring det? Vart är vi på väg? Det finns ju, vad är det de kallar det? Computer Vision finns ju. Visserligen är det typ att datorn tar skärmdumpar och navigerar Då behöver vi ändå ha ett gränssnitt. Det är ju bara bra då om det är tydligt och tillgängligt. Exakt, tillgängligheten lönar sig igen. Ja, exakt. Ja, och det är klart. Det måste väl kunna finnas någon aspekt också där det blir andra interaktioner som gör att man kanske vill presentera saker på andra sätt. Det kanske får ett annat behov av visningskomponenter som kan visas tagna ur sitt sammanhang. Det är inte så att vi har ett jättestort formulär, men jag vill presentera resultatet. Och då har jag resultatkomponenten, men jag har inte resten av... Nej, exakt. Informationen runt omkring. Man kanske vill integrera inmatningsfält i det här flödet också istället för att allt hela tiden ska vara en fritext och typ en GPT rapper. så känns det som att det kanske är en mix av båda världarna. Men jag tycker det är svårt att veta vart vi är på väg och det är väldigt spännande att se. Och det är väl lite så som vi snackade om innan, att man får försöka vara snabb på att inte sitta inlåst i liksom, Nu jobbar vi med det här i två år och sen så ser vi hur det blir när det är slut. Utan att man är snabbrörlig och håller örat mot rälsen egentligen. Exakt. Det blir nästan mer intressant, när man tänker så också. Man inser att det kan komma sådana grejer. Det finns fler aspekter att tänka på än dem man har framför sig nu. Ja, nämen exakt, och det tror jag väl gäller om man går in på temat med AI och utveckling också. Det tycker jag också att det är lite svårt att veta. Precis som i webcomponent så är det också ganska polariserande åsikter om det. Det är liksom all in eller all out. Vem ska man tro på? har de som är åt ena hållet det andra hållet ett incitament kanske, att säga si eller så. Ja, visst. Jag själv har ju använt AI, framför allt under en längre stund, för dokumentation. För att försöka hitta ett konsekvent och professionellt språk, men också lite bland canvas-grejer. att man får, vi ska dokumentera en knapp eller vi ska dokumentera en komponent som gör det här. Ge mig ett utkast och så tar vi det därifrån liksom. Ja, just det, det är något att börja med. Jag tror att min personliga resa när det gäller AI-assisterad utveckling har varit så här att man har fått den här wow-faktorn. Och sen har den på något sätt efterföljts av en, ja, tippat så här, den kör fast och liksom man bråkar med den här AI inför att komma framåt. Men ju mer man fortsätter, ju mer ute på hallisolignationer och så, blir det. Ja men exakt, exakt. Det tycker jag är en väldigt bra beskrivning. Men den har ju kommit i omgångar också. Nu finns det ju liksom ännu bättre integration mellan en AI-agent och en editor till exempel. Och det har också blivit en wow-faktor. Men det känns också som att man kommer till. kommer till och man förstår ju att när den när den har den flash är en av sat-grejerna. Den kan prompta sig själv och prova outcomes och så vidare. så förstår man ju att resultatet blir mer träffsäkert, Men det känns ju någonstans också som i slutändan att Hur de fungerar gissar sig ändå till vad som är rimligt att göra härnäst. så det känns som att hittills har jag fått Några sådana där wow-faktorer men ändå känt i slutändan av när det har gått två dagar, den lilla honeymoon-facen är över att såhär, men då stöter man på de här friktionerna och där det tar stopp. Ja, men exakt. Det tar stopp på ungefär samma stil som sist. Fast på en lite annan... Ja, jag känner nog väldigt mycket så också. Samtidigt så pratar jag ju med folk Det känns som att dom verkligen har hittat arbetssätt ihop med AI som verkligen funkar för dom. Dom blir genuint snabbare på att göra saker och jobba på det sättet. Och det kanske är ett sätt som inte alls passar mig för att jag är gammaldags och vill sitta och titta på koden utan att bli störd av förslag mitt i. Eller? Det är händer av de grejerna som jag tycker är tråkigast med det. Jag vill ju prova. Jag tror också att i någon grad så kommer väl det här, man kommer väl nästan att vara så illa tvungen att använda det för att behålla en viss produktivitet kanske. Sen så tror jag inte att man behöver förlita sig på det helt och hållet. Nej, det är ju frågan. Precis, det är frågan. Men jag tänker så för min del, jag jobbar ju i VIM och jag tycker det är LNE och VIM specifikt. Jag älskar ju att skriva. Jag tycker att det i sig är så kul. Men den, om man jobbar i terminalen så, då är det inte nödvändigtvis så att det är inte där ny funktionalitet kring det här kommer först. Och då blir man så här, okej men ska jag testa någon nya, det tar jag för att prova. Men jag tror att jag delar din åsikt. Jag vill sitta utan distraktioner och bara få in det som ger mig glädje. Och samtidigt så är det ju onekligen så att när jag har Copilot påslagen i Visual Studio Code, jag vill ju kanske egentligen inte ha så mycket av intelligensen, men däremot att den ibland funkar som en väldigt mycket smartare autokomplettering. Ja, spara tid helt enkelt. Det sparar man ju lite tid då och då. Hjälper med att avsluta en grej och samtidigt hålla en tanke i huvudet. Så det är en väldigt balansgång. Det är både störande och lite hjälpsamt samtidigt. Ja, exakt. Det är intressant. Men det kan vara mycket frustrerande också. Ja, javisst. Jag menar, på mina mer cyniska humör så kan jag tänka mig att om tillräckligt många går tillräckligt hårt in på AI-utvecklingen Så kan vi vara några andra som sitter i ett hörn och känna storkovan på att vi skriver väldigt pålitliga små saker med minsta möjliga kod som är hantverksmässigt skriven. Du är mycket mer förutsägbar. Jo, precis. Det är väl också en av aspekterna. Både när det gäller att producera kod kanske är en aspekt i sig. Men säg alla de här bildgenereringarna. Det är ju inte som att du får samma resultat. Nej, det är samma fråga. Det blir ju lite svårt liksom. Vad är det egentligen som kommer ut? Det kommer säkert funka, men det är där i den balparken. Ja men precis. Det är som att prata med någon slags drömgenerator. Det händer något i en dröm och så tror man att det här är samma, Och så plötsligt allting runt omkring ändrats. Nej, exakt. Men det kommer väl att vara viktigt att fortsätta vara nyfiken på det i alla fall så att man inte frånskriver det helt och hållet. Använder det till en rimlig grad där det känns som att det gynnar en och inte att man till slut sitter och... Men det kanske, vem vet, vart vi är på väg. Vi stämmer av igen om två år och ser vad som faktiskt hände. Är det något mer vi borde få med innan vi avslutar för idag? Jätteintressant! Nej, jag tror inte det. Jag tror vi har varit inom det mesta som jag har tankarna. Det är väl i så fall, jag tror att det finns några länkar som vi kanske skulle kunna lägga in i någon beskrivning för avsnittet eller så. Ja, exakt. Jag lägger ner massor med länkar, inklusive till SJ:s designsystem också. Jag tycker det är trivsamt att de har gjort en sajt för sitt designsystem som bara visar komponenter, men den känns samtidigt 100% SJ. Det är lite power move att lägga sin system publikt. Vi hade säkert också kunnat tänka oss att göra det i framtiden, men vi har inte vågat göra det ännu. Det har inte funnits ett tillräckligt skyltfönstervänligt material kanske. Jag kan helt förstå resonemanget. Men som sagt, vi länkar in sånt också. Och om du kommer på några fler grejer som vi borde länka med så tar vi med dem också. som folk massvis tittar på. Jättebra. Då så, tack så jättemycket Johan för att du ville vara med! Ja, tack för att jag fick vara med. Tack för att just du lyssnar på Kodsnack. Om du vill stödja oss, varför inte tipsa en bekant om podden? eller lämna en recension i till exempel iTunes eller något annat ställe där det går att sätta betyg på poddar. Du kan också stödja oss genom att köpa oss en kopp kaffe på Coffee, kobindesecfi.com/kodsnack. Alla pengar går direkt till att göra podden bättre och trevligare. Du kan också komma och hänga i vår Slack-kanal. Länk finns på kodsnack.se, precis som alla andra länkar och all annan info kopplat till varje avsnitt. Sist men inte minst finns det också en länk till vår Spreadshopbutik där du kan köpa tröjor och andra prylar med kodsnacktryck. Återigen, tusen tack för att du lyssnar. Vi hörs! Låt mig sätta det så här, mr Raimer. Era 9000 serier är den mest pålitliga datorn någonsin. Ingen 9000 dator har någonsin gjort ett misstag eller förstört information.