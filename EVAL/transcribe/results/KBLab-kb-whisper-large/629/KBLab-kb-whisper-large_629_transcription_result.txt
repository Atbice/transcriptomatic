Jag tror verkligen att om du knappar runt i det du utvecklar lokalt med tangentbordet och ser till att liksom du kan komma åt allting, du kan fylla i allting och du öppnas någon modal eller någonting så sitter fokus rätt och du hamnar inte plötsligt bakom modalen. När den stängs så är du kvar där du var, du behöver inte navigera genom hela innehållet igen. Och att liksom bara kunna slå igång en skärmläsare i 45 sekunder och bara liksom, ja men, det känns som att det makar sänds för mig, då makar det förmodligen hyfsat sänds för andra. Målet är inte att man ska täcka 100% av alla problem som kan uppstå, utan det är bara att få de lågt hängande frukterna helt enkelt, utan att behöva göra det separat. lokala utvecklingen, då kanske majoriteten av det som finns i någon läskig lång kravlista som är två kilometer lång, då kanske majoriteten av det är redan löst. Hej och välkomna till Kodsnack! Jag heter Fredrik, som vanligt, och idag har jag med mig Johan. Hej Johan! Vem är du? Vad gör du? Det är en utvecklare som jobbar på SBAB till vardags. Där sitter jag sedan relativt nyligen i ett nystartat designsystemteam. Men jag har varit där i ett antal år nu. Jag tror att vi är inne på det sjunde året. Så jag har gjort lite annat under min tid. Jag tror att det är mitt tredje team. Eller jag vet att det är mitt tredje team, det skulle jag kunna säga. Men ja, precis. Så det är lite det som vi sitter med och vi jobbar ganska mycket också med tillgänglighet. För det kommer ju ett nytt tillgänglighetskrav eller tillgänglighetsdirektiv just nu. Just det. Så det tar upp väldigt mycket av, inte bara vår uppmärksamhet, utan hela utvecklingsorganisationens egentligen. Ja, så ni har ett designsystemteam nu? Var det så? Hur kom du till det? Har du varit inne på designspåret och kommit in på det teamet eller kommit från något annat spännande håll? Nja, alltså jag har väl varit intresserad av designspåret lite grann. En gång i tiden för en femton år sedan så tror jag att jag trädde in i utvecklingsvärlden ifrån att ha lekt lite grann med design. Jag har nog ändå liksom, det ligger någonstans i ryggmärgen, även om jag inte är en designer eller UXare på det sättet då. Så men jag tror väl att jag tycker ju att i de allra flesta tillfällen så tycker jag att den tekniska biten av det är det mest intressanta. Men lite bakgrund kring det är att vi, ja vi har ju på jobbet då så är vi väl, just nu så är vi cirka 20-25 stycken utvecklingsteam och jag har fått lite siffror här, 135 stycken utvecklare och testare där jag tror att... Så det är ett par stycken? Ja, och det är ju, jag vet inte, men majoriteten är ju utvecklare då. Och vi sitter och jobbar på lite olika sätt och det ändrar ju sig lite över tid också, men man jobbar ju ganska autonomt och man jobbar i ganska många olika appar. Vi har haft lite olika sätt hur vi levererar front-end-applikationer, både internt och externt och till privata kunder, företagskunder och allting sånt. Det har varit väldigt många appar och de har ju en tendens att bli lite utdaterade. Man kanske kopierar en lösning som man gjorde där och sen så klistrar man in det i den nya appen och så gör man ändringarna där och så blir det ju inkonsekvent till slut. Så det var väl egentligen så det började, ja 2018, hur många år sedan det nu är, det börjar väl bli, ja, det är väl typ sju år sedan. Ja, precis, jag skulle säga tre. Ja, jag skulle också säga tre. Allt efter mars 2020 är ju ändå samma år. Ja, men exakt, exakt. Nej, men så då började vi lite inofficiellt helt enkelt. Ett gäng utvecklare som satt i lite olika utvecklingsteam. Vi lyckades få att vi kunde sitta typ en eftermiddag i veckan eller något sånt och ta det och programmera lite grann. rent från allas eget intresse så att säga? Ja, man hade ju sett det här behovet liksom och sen så tror jag att sedan dess så har våran design och UX-avdelning också växt ganska rejält. Men på den tiden så var det inte lika många. Så vi hade ju ändå rätt nära dialog med dem och de såg ju, om några, det här problemet. Det kändes ju verkligen som att det finns ingen röd tråd någonstans. Nej, men så då började vi liksom bara se så här, men vad är det vanligaste? Vi har inte heller fått något commitment på att underhålla det här enligt något strukturerat. Nej, just det. Så då blev det så. Men väldigt mycket handlar om formulär. Vi ska samla in data i ansökningsflöden och man ska göra överföringar och allt vad man nu gör. Så vi började i den änden egentligen och bara försöka liksom såhär, vi vet inte nödvändigtvis vad som är rätt, vad som ser rätt ut, men det viktigaste är kanske att det ser likadant ut. Vi gjorde ju ett litet bibliotek egentligen som vi distribuerade med en intern MPM-registry. Och sen så visste vi ju då att det kan ju, om vi fokuserar mer på API-t och inte tänker så mycket på att skylta med några detaljer kring looken-fil, så kan vi ju ändå ganska flexibelt uppdatera det över tid när vi vet mer om vad som är rätt visuellt. Så det var så det började och det har egentligen hållit på så sedan dess fram till... Ja, men Q2 i 2024, så första april där i krokarna så satte vi officiellt igång ett team. Ja. Men det här projektet har ju levt, eller projekt, jag vet inte vad man ska kalla det, det har ju levt lite inofficiellt, så det har ju varit så här, periodvis har man hunnit jobba lite mer på det och periodvis har man inte hunnit jobba någonting alls på det. Men det har ju ändå varit i användning hos ett antal team sedan 2018. Så det var helt enkelt ett NPM-paket med UI-komponenter då? Ja, exakt. ganska begränsad dokumentation i anslutning till det då. Så sättet som det skiljer sig idag är ju att vi, det är ju ett helhetsgrepp mer kring, alltså designsystem omfattar ju mer än bara kod och design egentligen också. Man kan ju dra det till att det kan handla om copywriting, bildmanér och alla möjliga grejer. Och det där har vi ju inte riktigt en lösning för ännu, men på sikt så hoppas vi att vi ska kunna centralisera det. Även om vi inte själva står för innehållet nödvändigtvis så ska man inte behöva liksom, ja men vart finns det här? Ja just det. finns i sjön, typ. Och så får man leta upp det. Utan att man mer kanske kan ha en samlingsplats där man hittar både dokumentation och relevant information som utvecklare och designer. Man kanske kan hitta till relaterade resurser också, även om inte de är skrivna där. Ja, för det var en sån intressant grej kände jag när jag började fundera inför vårt snack. Just det där med hur stort eller litet paraply är ordet designsystem? Det känns som att på ett sätt så kan det bli hur brett som helst nästan. Det finns väldigt mycket nyttigt som man kan baka in under det som du säger. Hur skriver man text? Det kanske inte är det första man tänker på, men det är ändå onekligen en grej som dyker upp när det gäller att få saker att se ut och kännas på samma sätt över en massa olika saker man bygger. Ja, jag tror att du och jag jobbar ju på relativt liknande utmaningar. bygger en del användarupplevelser i fronten-applikationer. Ja, men precis. Och ett helt gäng team som gör saker som... Ja, men en idealvärld skulle nog se ut och fungera ganska exakt likadant i många fall. Inte alla, men många. Nej, men just det här med copy till exempel. Det känns ju som att det beror lite på. Jag tror att en intressant grej som vi kanske kan komma in på är hur vi arbetar och samarbetar med vår UX och designavdelning nu och de som är faktiskt dedikerade resurser i vårt nya team. Men historiskt så känns det som att det inte är helt ovanligt att det blir lite vattenfalligt. Vi kanske sitter i en pipeline där man har så mycket i pipelinen att utvecklarna sitter helt fokuserade på det. Och då blir det lite så att affärsanalytiker och UX-are kanske springer före på nästa grej. grej och så blir det lite mer av en överlämning än vad man kanske skulle önska alla gånger och då då är det just Ganska klassiskt då att man till exempel sa, men vad händer om det blir fel då? Ja, just det. Om man nu försöker skicka in det här och det inte funkar för någon downstream-tjänst där nere. Just det. Då är det liksom också så här, det är ganska vanligt att man inte liksom nödvändigtvis har tänkt på det i typ en designleverans och då är det ju jättevärdefullt att ha lite riktlinjer kring det och att vi kan försöka hjälpa till att det ändå blir konsekvent och att man kan liksom, man behöver inte vara expert på copywriting utan man kan liksom bara, Om man hittar lite resurser och sen räcker det kanske en bra bit på vägen. Jag tror att man kan fånga en del lågt hängande frukter på att vi kommer framåt utan att vi behöver fråga någon annan avdelning om hjälp. Ja, det har varit jätteintressant att utmana det här med kommunikationen och de här flödena av att få saker gjorda och ta tid. Som du sa precis i början där, det är väldigt lätt att man hamnar i det läget att ibland blir det inte gjort och sen går det en jättelång period då ingenting händer för att man har 17 andra saker som kanske både är och framförallt bedöms som viktigare just då. Ja, och det kanske man, alltså nu, vi har ju hållit på med det här nu, vi konstaterade att det var mer än tre år. Ja, precis. Det känns som att få ett commitment på att kunna göra det här också. Där har ju det här tillgänglighetsdirektivet varit. Det var ju lite det som var... Ja, men det var det som fick skjuts i den prioriteringen. För det är ju också så att det är ju en utav våra stora fokusområden är ju just tillgänglighet och försöka dels baka in tillgänglighet där vi kan. Om det är då i vårt komponentbibliotek. Sen finns det ju delar av tillgängligheten om hur ett helt flöde hänger ihop som är svårt att bara automatisera. Det är ju en av de grejerna som jag tror fick organisationen att gå med på att nu startar vi ett team kring det. Jag har nog personligen velat ha ett team kring det i alla de här åren nu. Nu har det äntligen skett, för det är ju så att tillgänglighet är ju viktigt, men jag vet inte, man har kanske inte riktigt insett det. Eller att man har tänkt att det är viktigt, men det måste ju också konkurrera med andra projekt. Och då finns det ju liksom, alltså i bankvärlden så är det ju massa regulatoriska grejer och det är kanske stora systembyten och då är det ju ibland svårt att liksom, ja det här är viktigt, men tyvärr, vi hinner inte. Nej, precis. Det är fortfarande bara näst viktigast. Ja, ja men exakt. Jag tror att drivet av vår UX-avdelning så har vi ändå, jag tror att det var, jag har skrivit ner lite siffror och lite information här. 2019 så började vi jobba lite mer dedikerat med tillgänglighet. Men det blev ju, då har vi ju samarbetspartners som är experter på det som kommer in och hjälper oss och så gör man liksom en typ av analys och översyn över våra flöden. Men då blev det lite mera så här punktinsatser. gjorde någon review och så åtgärdade man lite fel där. Jag tror inte vi lärde oss mindsetet hur vi ska utveckla tillgängligt, utan det drevs nog mest av enskilda individer, typ eldsjälar i de olika teamen. Så det vi försöker göra nu tillsammans med det här projektet som då drivs parallellt som är tillgänglighetsprojektet egentligen, det är ju att försöka få lite mer långsiktighet i det. Och inte se det som ett projekt som tar slut, utan att vi måste få in det i vårt arbetssätt och process. Just det. Ja, precis. Det är själva teamet för designsystemet, hur stort är det ungefär? Ja, vi är alltså då, just nu så är vi två ut, eller just nu, vi är samma uppställning sedan start. Två utvecklare är vi, som har varit med och inofficiellt petat på det här. Det som fanns innan. Och sen så är vi faktiskt... Vi är typ tre UX-are. En av våra UX-are är ju en fulltidsresurs som är fokuserad på designsystemet. Två av dem har lite andra åtaganden också. Sen är vi en produktägare och det tillkom ju i samband med att vi startade teamet och tycker jag är kanon, för man är inte nödvändigtvis alltid så bra på det som utvecklare kanske. Nej men det är ju det, det är ju det. designer. Man märker skillnaden när man har en bra produktägare på plats. Jaha, oj vad mycket mer rakt på sak och tydligt vissa grejer blev plötsligt. Ja, nej men exakt. Och bara liksom att vi håller rätt riktning och inte, ja. För jag menar som utvecklare, du känner, du kanske likadant, men att det är ganska lätt att ramla ner i lite så här kaninhål ibland. Jo, jag har gjort det en gång kanske. Ja, jag har nog också kanske gjort det en eller två gånger. Men, och sen en teamchef har vi. Så vi är väl, ja vad blir det, typ fem. Nummer fem sju. Nej men så, och det funkar ganska, det är ganska roligt för eftersom att det är ett nystartat team och vi har ju inte, vi har ju kvar det här som hade tagits fram inofficiellt innan men vi har ju inte så mycket legacy. Utan det är ju väldigt mycket greenfield egentligen. Och man får ta reda på ganska intressanta grejer. Vi vet ju att vi vill underlätta för våra utvecklare och designkollegor framförallt. Och det övergripande målet handlar väl om att vi vill bidra till att det blir effektivare produktutveckling. Sen så vill vi ju göra den här gamla, det som startade initiativet från början, att se till att det blir en konsekvent användarupplevelse och att vi liksom följer våran branding. Och att det ska bli lätt att göra rätt på det. Och sen är det ju då tillgänglighet som är. Men det som är intressant är ju att vi har ju fått, ja men vi har ju fått liksom upptäcka hur ska vi jobba i den här konstellationen och med den här produkten. För det blir ju en intern produkt. Ja, visst. Och det är ju väldigt kul eftersom att du har ju dina slutanvändare intill dig. Ja, supernära. Det är väldigt mycket feedback, men då har vi fått prova oss framåt. Vi jobbar lite grann i kvartal då. Det känns som att vi provar ett arbetssätt och sen så behåller vi det som känns bra in i nästa kvartal och så kanske vi skruvar på något annat. Men på senaste kvartalen så har vi i alla fall, vi jobbar i två stycken arbetsmöten per vecka där vi försöker sitta hands-on och jobba tillsammans, både utvecklarna och UXA. Och det gör ju att det här samarbetet är mycket tätare än vad det var i åtminstone de teamen jag var med i innan. Och då känns det som att man kan ta vissa beslut som träffar både våran kodbas och våran, i det här fallet, Figma då. Och det känns som att det har varit väldigt värdefullt. Men ja, så ser teamet ut. Just det, och det är så ni jobbar arbetsmöten, två stycken och sen så jobbar man mer? Ja. På varsitt håll, resten av... Ja, jag tror att det är lite... Det är ju lite speglar väl hur utvecklingsteamen jobbar också. Nu har ju jag, vi jobbar ju inte med de vanliga produkterna på samma sätt så jag kan väl inte svara exakt för hur genomsnittsupplevelsen är i våra utvecklingsteam. Men man är ju autonoma, så man får ju liksom, vi vill ju jobba agilt och så alla team har väl i princip någon, sin egen twist på vad det innebär. Ja, såklart. Ceremonier, vissa kör någon kamban-variant och andra kör sprintar. Ja men visst, det finns alla. Vad som passar just det teamet, känner jag igen också. Väldigt så. Ja, men precis. Men vad äger eller driver eller kontrollerar erat team kontra andra team? Jag tänker så här, att ni gör en del komponenter förstår jag ju. Här kommer en standardkomponent för att göra den här saken. Blir det då att man drar in nya komponenter som tillhörde ett annat team förut? Eller hur funkar flödet mellan er och övriga team? Dels fanns det ett antal komponenter som vi förvaltar vidare. Och det andra handlar ju om att försöka snappa upp vilka behov vi har och att inte nödvändigtvis committa alltför långt fram i tid utan att försöka vara lyhörda och snabbrörliga. Men komponenter är väl en ganska central del i det. Vi har fokat ganska mycket på dokumentationen kring det också. Det är en bra grej. Men jag tycker personligen lite grann att det är lite en first class citizen i den leveransen också. Så att det inte bara så här, det finns en hink med komponenter, varsågod, figure it out. Utan att man försöker ändå ha det i åtanke. Och i och med det så får vi ju bygga vår egen pipeline med hur vi levererar vår produkt. Alltså vår produkt består ju på kodsidan av typ bibliotek som man lyfter in via MPM. Just det. Och sen så består den i tillägg av dokumentation. Och det har ju också varit en annan lite kul grej, för det har inte nödvändigtvis funnits en färdig pipeline för det. För de andra teamen har inte riktigt haft det behovet. Så där har man ju fått vara med och bygga upp det enligt de behov man har. Och det blir lite andra saker att tänka på där med att det här ska ju versionshanteras. Och versionshanteringen är ju någonting som är väldigt viktig för att säkerställa att det blir stabilt i längden. Vi försöker förhålla oss till semantisk versionshantering och att man ska kunna lita på att saker och ting funkar. Om någonting har brejkats så ska man få reda på det och kunna ta hänsyn till det. Vad är det vi kommer att äga som team? Vad är våra produkter egentligen? finns ju ganska mycket material som är utspritt på någon kunskapsbank här och sen så finns det någon Något externt CMS där för något ändamål. Jag tror i nuläget så är det mycket fokus på tillgänglighet. Jag tycker att det är lite intressant och spännande att jag vet inte riktigt exakt hur det kommer se ut. Jag tror att vi kommer försöka se till att lyssna på våra användare och formade därefter. Ja, jag vet. Det är väl då det blir bäst också. Ja, och tillgängligheten, om vi ska gå in lite mer i detalj på det, så är det ju, för de som eventuellt inte vet det då, så är det ju en ny lag, så den trädde i kraft den 28 juni. Och det här vet jag att de som har varit drivande, de har ju sagt ja, men förr eller senare så dyker det där datumet upp. För fem år sedan så kändes det som jättelångt bort. Ja, ja, visst, precis. Men nu är det ju all hands on deck för att se till att vi liksom... Och det är väl en... Man kan väl säga att det är väl en vidareutveckling av... de lagkraven som redan gäller för offentlig sektor. Så om man har varit inne på myndigheter och sjukvård och så där, så har ju de redan mycket av de här kraven. Och nu utökas det till att gälla privata aktörer också. Ja, okej. Så från ett visst håll kan man se det som en breddning av någonting som redan fanns? Ja, och sen är det väl, det är också en gräns, alltså vilka som omfattas är också lite, det är lite luddigt och här vill jag brasklappa lite grann också att jag har ju försökt, liksom känner att jag har någorlunda koll på det här. Men det känns som att när det gäller alla de här, bara ta av det jag säger men det är på sats. Ja, men exakt. påstår att så här funkar det och sen så kanske jag missat någon paragraf. Nej, men precis. Allt det här är vår uppfattning utifrån det som vi har hört och sett och sådär. Vi är inte lagtolkare. Nej, jag har försökt koka ner det till pragmatiskt, vad är det som gäller? Just det. Men ja, så nu är det ju ett antal typer av tjänster egentligen som omfattas av det här och det kommer ju på sikt att utökas till flera. säkerligen att göra det inom relativt snar framtid. Och det betyder i praktiken att det finns ju en europeisk standard som är till för tillgänglighet och inkluderande i EU. En av aspekterna, de allmänna kraven som man omfattas av, det är ju de här WCAG som är någon sorts spec för, som specar upp sig här. Det ska funka så här, helt enkelt. Färgkontraster och allt vad det är. Sen finns det lite branschspecifika krav som beroende på vad man är i för bransch så kan det vara extra saker som man måste tänka på. I vårt fall då, som bank så omfattas vi av begripligt språk. Och det betyder ju att det ska vara lätt att ta till sig innehållet. Det ska åtminstone finnas möjlighet att om någonting står på massa facktermer och så, så ska man ju också kunna se det på något sätt som går att begripa, även om man inte nödvändigtvis är i finansbranschen. Det är ju faktiskt ett underbart krav. Ja, jag tycker det också. Sen är det ju så att de bästa lösningarna för det här är ju lika tillgängliga för alla redan från början. Så att det inte blir någonting man bara lägger ett lager på lager. Ja men okej, vill du ha lite mer tillgänglighet får du slå på det här läget. Just det, precis. Och sen är det lite administrativa krav, så omfattas man av det här direktivet så måste man också arbeta med dokumentation och rapportera sina tillgänglighetsbrister. Och då finns det någonting som kallas för en tillgänglighetsredogörelse som man behöver ha då. Och det är typ en listning någonstans på sin sida som hålls uppdaterad på det här är de bristerna som finns, typ förklara varför och länka om det finns något mera tillgängligt alternativ och lite sånt där då. Och sen så tror jag också att man behöver nog ha en kommentarsfunktion så att liksom användare av din tjänst ska kunna rapportera in det här om de stöter på något. Så det är egentligen lite grann visa, vi är medvetna om vad vi klarar och inte klarar och att vi jobbar på det. Ja, precis. Om man nu kommer till vad det får för påföljder ifall man inte uppfyller de här kraven så tillgänglighetsredogörelsen är nog en ganska viktig del i det. Men vi är medvetna om det och vi är på bollen. Jag har för mig att det fanns någon slags relaterad känsla i vissa delar när GDPR var på tapeten och höll på att införas. En grej var att det fanns jättestora stränga påföljder, men det fanns också en ton av att visar du att du jobbar aktivt med det här och rapporterar när ni har problem, så gäller det att visa en rätt anda också. Ja, men exakt. Så tolkar jag det i alla fall. Ja, men precis. Det känns ju lite som att, även om jag tror att man förväntas väl vara compliant med det här när 28 juni inträder så går det ju säkert så här, men vi har inte hunnit helt enkelt. Det här är det viktigaste i det här sammanhanget, vi kan visa att vi har tagit det och att vi håller på med resten. Ja, men exakt, exakt. Och sen så kanske man kan komma till den punkten om så här, vilka omfattas då? Precis. Det tycker jag verkar lite svårt. I vissa branscher så känns det väldigt tydligt. Typ e-handel är ju en av dem som omfattas av det här. Det är lätt att veta om man är i handel eller inte. Exakt och banktjänster är också, det känns också jättelätt. Men sen är det så här, elektroniska kommunikationstjänster, och det är också så här, det finns lite exempel, jag tror vi kan säkert lägga in några bra länkar i beskrivningen också. Ja, det får vi göra. ju från post och telestyrelsen så har de någon sorts introduktion till det här EUs tillgänglighetsdirektiv och då säger de elektroniska kommunikationstjänster som till Exempel, uppkoppling och abonnemang, telefonsamtal, e-post, sms, chatt, videosamtalstjänster. Men det är ju liksom, det kan säkert vara fler. Ja, jag tänker det. Det kan nog bli ganska brett. Ja, men exakt. Och sen så här streamingtjänster, medietjänster typ, det är väl en av dem. Och sen så är det vissa tjänster för persontransporter. Vissa tjänster? Ja. Så vi lämnar utrymme för tolkning. Banktjänster nämnde vi och så e-böcker behöver vara tillgängliga och e-handelstjänster. Det är ju en ganska stor sektor. Ja, verkligen. Sen tror jag att det är vissa fysiska, om man har betalningsterminaler eller olika typer av automater, så tror jag att de också omfattas. för mig att jag läste någonstans att har man liksom en sån fysisk grej ute så tror jag att det finns någon regel kring att den, om den står där idag så kan den stå kvar tills den är en viss ålder eller något sånt. Ja, just det. Det känns ju sansat. Man kan säkert försöka utbilda sig om man omfattas eller inte, men jag skulle väl förespråka att man kanske ändå tänker på tillgängligheten. För jag vet inte, för mig så har det varit lite grann. Jag har inte riktigt varit så bra att tänka på tillgängligheten historiskt, men ju mer man har fokuserat på det så har du ju låst upp lite grann. Det är typ ett nytt gränssnitt i din app. Ja, det är det som är så spännande. Ja, när du får in vanan att liksom, ja men jag kan, jag har kortkommandot för att starta skärmläsaren, jag kan de vanliga navigeringssätten. Då får du helt plötsligt ett nytt gränssnitt för din app som du kan se till att få en bra användarupplevelse på. För mig i alla fall så är det jättemotiverande. Jag tycker det är jättekul att ändå så här, för det kan ju vara helt förfärligt. Det finns jättemånga roliga exempel när det liksom är så här, Ja, men du kan typ hoppa igenom 48 element som bara säger bild, bild, bild. Ja, just det. Ganska svårt att veta vad. Vad är det då liksom? Ja, men exakt. Nej, men så jag tycker att det känns som att det är ju viktigt utan tvekan, men det är också någonting som jag tycker är roligt. Det känns som att man har låst upp en ny liten dimension här i sitt utvecklande och vad man levererar när det gäller bra användarupplevelser. Ja, men exakt. Man får lite trevliga incitament att bygga saker på mer genomtänkta sätt. Ja. Man gjorde första versionen av sin webbapplikation och så är allting en div med olika styling på. Ja, men exakt. kom på att, jag menar att ha en A HRF, en vanlig länk. Det är inte bara bra för tillgängligheten, det är faktiskt ganska bra för alla att se att det här är en vanlig länk, den funkar som en vanlig länk, den ser ut som en vanlig länk. Nej, men exakt. Alla sådana där grejer. Den går att navigera och har vi gjort det bra att navigera med skärmläsare så blir det ofta bra att navigera med tangentbordet också. Bara kunna tabba igenom saker i en vettig ordning är ju väldigt nyttigt för precis alla. Men just det, alltså. Jag tror att det är en sån här grej som man kanske inte ens... Man tänker knappt på det när man sitter och utvecklar och när man sitter och utvecklar så blir man lite så här hemmablind också. För du är inte nödvändigtvis den tilltänkta målgruppen för den appen du utvecklar. Utan du, ja men jag ska bara utveckla den. Ja. Jag tror att man, du har ju säkert använt olika system även om de är webbaserade där man bara säger att alla de här tangentbords, liksom att tabba, att navigera med olika sorters kortkommandon eller piltangenter och så vidare, det bara funkar. Ja. Det är ju en trevlig överraskning. Ja, precis. Och det skulle ju lika gärna kunna vara defaulten. Ja, men exakt. Det borde vara lite jobb att sabba till. Jag tror att för vår del, det som vi försöker bidra med när det gäller utvecklingen är att alla kanske inte ska behöva vara tillgänglighetsexperter för att vi ska kunna leverera ett bra resultat. Dels baka in det när det finns och går, men också uppmana kanske till att man har det mindsetet att så här, men redan när du sitter i lokal utveckling, tryck igång skärmläsaren. Jag tror att man behöver gå någon liten crash course i hur skärmläsaren funkar, för den kan vara ganska överväldigande när man sätter igång den. Man har ju hört när den drar igång på 180 km i timmen och spottar ur massa information. Ja visst, det är så proffsen använder den. Ja, och man kan ju ställa in den precis så som man vill. Jag tror att en av de viktigaste, nu sitter jag på Mac, det är säkert lite olika beroende på vilken och då använder jag den inbyggda voiceover. Men jag tror att den viktigaste tangenten är kontrolltangenten. För den får den att bara vara tyst. Den liksom pausar uppläsningen. Så när du sätter igång den och du bara vill få... Nu måste jag tänka. Då kan man alltid trycka in kontroll innan man gör sin nästa grej. Men jag tror att det är nog inte mer än kanske fem, sex, sju stycken kommandon. Man behöver kunna för att kunna använda den effektivt nog för att fånga mycket av de här lågt hängande frukterna. Och då kanske det också är så här, gör man det redan i den lokala utvecklingen, då kanske majoriteten av det som finns i någon läskig lång kravlista som är två kilometer lång, då kanske majoriteten av det är redan löst. Ja. Sen kanske de här som är lite mindre problem, som är lite svårare att upptäcka, de kan man säkert behöva åtgärda ändå när det är någon sorts testprocess eller review senare. Men jag tror verkligen att om du knappar runt i det du utvecklar lokalt med tangentbordet och ser till att du kan komma åt allting, du kan fylla i allting och öppnas någon modal eller någonting så sitter fokus rätt och du hamnar inte plötsligt bakom modalen. När den stängs så är du kvar där du var, du behöver inte navigera genom hela hållet igen. Och att liksom bara kunna slå igång en skärmläsare i 45 sekunder och bara liksom, ja men, det känns som att det makar sämst för mig, då makar det förmodligen hyfsat sämst för andra. Och sen så är det ju med också, visst, är man proffsanvändare av det här så kan det ju hända att det finns insikter som man själv inte kan ännu. Men jag tror målet är inte att man ska täcka 100% av alla problem som kan uppstå, utan det är bara att få de lågt hängande frukterna. Utan att behöva göra det separat. Ja, precis. Ett snabbt och jättestort tack till alla som stöttar oss på Coffee. Du kan bli en av dem genom att surfa in på kobindestreckfi.com/kodsnack och slänga iväg antingen en engångssumma eller ett månadsvis stöd. Stödjer du oss på nivån kaffedrickare för 5 euro eller mer i månaden så får du ett gäng trevliga klistermärken i brevlådan. Stödjer du oss på nivån Barista för 10 euro eller mer i månaden så får du dessutom, förutom klistermärkena, ett stort tack precis här! Tusen tack till Michel, Albin Groen, Anders Legell, Brother Ingo och Tobbe Lundberg. Alla ni som stöder oss hjälper till att göra podden möjlig och ju fler ni blir desto bättre podd kan vi göra. Ibland har vi sponsorer i podden, men det är faktiskt ert stöd som gör att vi börjar kunna täcka kostnaderna för podden varje månad. Vill du stödja oss på andra sätt så går det naturligtvis utmärkt att recensera podden i din poddspelare. Sätt ett betyg eller en stjärna, oavsett om det är Spotify, Apples podcaster eller någon helt annan app. Eller berätta helt enkelt om ett avsnitt för någon som du tror skulle gilla podden. Och just nu har vi precis släppt ett helt nytt sätt att stötta. Vi har ett klistermärke till försäljning. I koffeibutiken finns ett trepack klistermärken om livet som agil lokförare, framimproviserat i en milt urspårad diskussionstråd häromveckan. Visa ditt stöd för alla safe-utövare där ute och få den där sköna känslan i magen av att bidra till Kodesnacks fortsatta resa. Men kom ihåg, du är en fantastisk person oavsett om du stöttar oss eller ej. Jag antar att det fortfarande gäller att man får rätt mycket gratis att använda standardkomponenter också istället för att finna sina egna. Ja, du tänker på inbyggda element. Ja, men precis. Det känns som en sån grej som fortfarande driver mig in i mina massor, de flödar mig genom hela rummet. Gör inte din egen ersättning för en knapp eller något i onödan, utan se till att det verkligen, verkligen, verkligen behövs och då har du rätt mycket att implementera om det ska bli lika tillgängligt som en standard. Ja, ja, om du går DIV-hållet och försöker återskapa. Nej, men så är det definitivt. Det finns ju många inbyggda element som är mer semantiska som man kan luta sig mot. Men sen är det ju lite så, ja, det beror lite på, när det kommer till de här tillgänglighetskraven och just WCAG, kanske specifikt då, så jobbar man ju i olika nivåer. Då är det liksom A, dubbel-A och trippel-A. Och jag tror, om jag inte minns fel, någon får rätta mig om jag har fel, men jag tror att den här nivån som man ska uppnå är AA. Det kan hända att det skiljer sig lite beroende på vilket typ av problem det är, men TAPLA är då den högsta ambitionsnivån. Och jag menar, det kan man ju lika gärna sikta på då om man... Ja, men precis. Orimligt. Jag har kollat lite på WCAG några gånger och det känns som att den högsta nivån kan vara ganska utmanande ganska ofta, har jag för mig. Ja, men jag tror det är säkert att ha en balans där, så att man inte liksom... Ja, men A var väl ofta ganska rimlig. Man kan säga så här, det här förstår jag ju dels vad jag ska göra och varför och dels hur jag kommer dit. Och sen dubbel A, det här är samma fast mer ambitiöst på något sätt. Och sen trippla av så här, nu, oj, nu kan det bli mycket. Ja, men exakt. Jag tror att det som du säger stämmer ju 100% att återuppfinna inte hjulet om man inte måste. Jag vet inte, när det kommer till de komponenterna som vi levererar så försöker vi ju inte återuppfinna hjulet. Även om det är en komponent som inte nödvändigtvis går att bara bygga. Den finns inte i browsern. Det kanske är någon... Ja, men lite mer interaktiv komponent som kräver... Nu finns det ju liksom ett inputfält för datum, men vi kanske behöver ha ett sätt att man ska kunna ange en range av datum och vi vill ha det som en bra upplevelse som man får om man ska boka en flygbiljett eller hotellnatt eller något sånt där. Exakt. Då måste man ju gå lite utanför vad som finns inbyggt och det som vi försöker tänka på där och som jag väl kanske skulle uppmana ifall det är någon annan som sitter med liknande utmaningar. Även om det är så att det här finns kanske en färdig komponent för i något off the shelf-bibliotek ute i ekosystemet. Så försöker vi ändå säga, ja, det kanske är rimligt för oss att bara gå på den lösningen. Men då sättet vi tänker på det då är att sätta liksom ett eget interface av, ja men hur skap it ser ut? Och det kan vi säkert inspireras av hur det ser ut där, men även om det är nästintill en 1-1-mappning så är det en explicit. Vi lägger in det för att då blir det liksom inte ett implicit beroende på just den komponenten, utan då skulle vi ju sedan kunna se så här, men vill vi bygga den custom, eller behöver vi bygga den custom, eller finns det, kommer det en ny aktör, eller något nytt bibliotek som funkar ännu bättre? Så det är väl en av de nyckelstrategierna som vi försöker tillämpa. Vad det än är för komponent så är API lite heligt. Det försöker vi se till att vi har en uppfattning om hur vi... Och där är det ju såklart liksom, det är svårt att säkerställa att det blir så, men att såhär, är det liksom intuitivt, är det flexibelt? Och flexibelt så menar jag bara, är det flexibelt för att vi kanske vill ändra våran lösning under huven på sikt då? Precis, jag har en kollega som jobbar rätt mycket med våra komponenter. Vi har ett litet sådant projekt också. Han har ju sagt exakt samma grejer, vi ska se till att slå in det. För att vi använder ett designbibliotek nu ganska mycket. Men hans ambition är att allting som vi har som gemensamma komponenter ska vara inslaget. Vi inte blir beroende av det biblioteket, för just nu sitter vi stenhårt fast i det, framförallt i en del äldre projekt. Att det är så här katastrof att försöka uppdatera en mayday. Exakt, och jag menar det skulle väl, även om du då tar den approachen så kanske majoriteten av biblioteket ändå använder någonting sånt färdigt. Men då är det i alla fall, förlitar du dig helt och hållet på deras API, då sitter du lite i händerna på dem också. Nu har vi gjort en ny major-uppdatering som breakar en massa grejer. Då har man åtminstone en chans att motverka det genom att säga, okej, kan vi då, om vi nu inte bara kan byta komponent i samband med det, kan vi åtminstone se till att vårt API som vi tillhandahåller går att mappa om till vad som än är ändrat. Så det tycker jag är typ en key take away i sammanhanget. hur vi försöker snappa upp behoven ifrån organisationen. Jag tror ju, och där har vi ju i samband med UX också, det som är intressant med våra täta samarbete är att man kommer från olika perspektiv. Från kodsidan så har vi ett visst perspektiv och särskilt när det gäller liksom versionshanterade kod som liksom, det finns vissa spelregler helt enkelt. Ja men precis. På designsidan så kanske det inte riktigt har varit lika känsligt med sånt, utan det är liksom, ja men, då har vi liksom behövt närma oss varandra och liksom synka sinsemellan så att vi liksom, vi kan inte springa före alla gånger på designsidan eller liksom bara göra en ändring för det är inte riktigt så det funkar på kodsidan. Man vill ju att det ska vara konsekvent och därmed så vill man ju att det ska finnas vissa constraints kanske så att det inte är så att vi kan göra på helt olika sätt i olika appar. Det där är ju intressant, ja. Men jag tycker personligen så tycker jag att, alltså jag har, under de här åren nu så har man ju ändå både så här, konsumerat ganska mycket innehåll ifrån ekosystemet och ifrån diverse thought leaders och så vidare. Ja, min uppfattning är att den här flexibiliteten behöver vara lite större än vad man tror ändå. Ja, någonstans är det ju alltid någonting. Ja, men det är så trist när du sitter där i din app och så är det så här. Jag behöver måla lite utanför linjerna, men det går inte. Då får jag bara kasta ut allt och göra det helt från scratch. Det blir ju inte hållbart det heller. Nej, men på så sätt så ser vi att en viss flexibilitet behöver ändå finnas i alla komponenter. och sättet vi ser det på är ju typ att det är lite mer high level-komponenter och lite mer low level-komponenter. Och det finns ju en herrans massa namn på sådana typer av, om det är Atomic Design eller vad som helst. Vi försöker tänka lite enklare på det, att bara såhär, en high level-komponent, det är ett lite mer specifikt användar, liksom ett use case. Man kan använda det med ett ganska begränsat API. Det är ganska mycket opinions inbakade. Men det gör ju också att det är ganska flexibelt för oss att se till att det fortsätter att funka utan större ändringar. Och sen vartefter vi märker att, för då kan vi lösa kanske 80% av ett visst behov. Sen så kommer vi till de andra behoven och då kan vi ju liksom utifrån det vi vet då så kan vi börja bryta ner till lite mer eller olevel-komponenter. Och då kanske man kan liksom, då kommer ofta de här insikterna om liksom API-design som, hade vi tagit det här valet så hade vi ju kanske kunnat stödja, Utan att man går alltför långt ner i framtida behov vi inte vet att vi har. Vissa sådana där grejer blir ändå tydliga. Rent intuitivt så känns det som att det här valet hade varit flexibelt även om vi ser framför oss att vi vill göra lite annorlunda också i framtiden. Men om man säger high level i det här fallet, är det typ en sån avancerad datumväljare som vi pratade om innan? Är det en high level eller är det low level? Ja, det är svårt med om man drar gränserna. Ja, självklart. Jag skulle se det som, tänk dig på tabeller till exempel. Vi har inte supermånga tabeller ännu i biblioteket, men jag bara tar det som ett exempel. För där kan man ju se framför sig att en low level version av sådana komponenter kan ju mappa väldigt nära hur det funkar i HTML. Så att du liksom såhär, du jobbar med rose och header och liksom olika typer av celler och så vidare. Men en high level-komponent kanske tar en lista av data som den kan mappa om till det där under huven. Och för ganska många use cases så räcker det. Och då är det ganska nice att så då kan du använda en komponent, skicka in datan som du kanske måste bara skruva lite grann på så att den passar. Och sen så får du en tabell. Och istället för att så, ja visst, då ska jag liksom göra typ 88 rader kod här för att bara göra min tabell med liksom att mappa igenom saker och så vidare. Just det. Så det är väl ett exempel. Annat exempel är kanske att när man jobbar med inmatningsfält i formulär så består ju de under huven av ganska, de är ju rätt nära elementen i browsern som input och så vidare. Vi har till exempel en komponent som är en textfield då. Och då kombinerar ju den själva inputfältet med ett sätt att sätta en label på den och ett eventuellt valideringsfel. Så sköter ju den om kopplingarna där sinsemellan under huven. Så att labeln blir associerad med inputfältet och valideringsfelet också. Utan att du som konsument behöver liksom så här, men hur var det nu? Ska den vara aria labelby eller aria describeby? Man hamnar i någon atomic design ändå. Ja, jo, men kanske både och. Det är en ständig utmaning att få till den där balansen. Ja men det här kan ju vara en jättefin komponent, men jag behöver skicka in 300 saker till den för att den ska funka. Kan jag tänka om i det här så jag slipper det? Men då kanske man på en sån här high level, och det är också en, jag vet inte vem det var som hade ett sånt tak någon gång, men att som pratade just om API-design på någon konferens. Man har ju sett exempel på en react-komponent då som liksom har typ 38 props för att man har byggt på vartefter man har kommit. Ja, just det. Vi måste stödja det här också. Då är det ju bättre att separera det till helt olika komponenter. så att det blir lättare att underhålla över tid. Ja. Så det är väl lite av de tankarna. Mycket av det är ju common sense, men delar av det har man ju liksom på något sätt absorberat under de här åren som man ändå stött lite mot det här. Även om det inte har varit ens huvudsakliga arbetsuppgift då. Alltså sånt som du säger, common sense-grejer, att få dem uttalade och utskrivna, det är ju en väldigt stor nytta i sig, för annars är det ju någon i ett team som tycker att något lite annorlunda är, ja men det här är väl common sense, och sen så har man plötsligt dragit iväg på två spår igen, inte var avsikten. En utmaning är ju att jag, som jag nämnde där, så vi två som är utvecklade teamet just nu har ju jobbat med det här innan, så frågan är vad som är liksom inne i våran ryggmärg och vad som, alltså jag tror att det kan finnas, en utmaning är ju att försöka få ner det här på ett enkelt och överskådligt sätt. Liksom att det här är Det här är ett mindset som vi tillämpar. För det blir ju svårt. Jag vet faktiskt inte riktigt var gränsen går. Vart lämnar det liksom typ ena hjärnhalvan på oss två? och vart möter det någon dokumentationssida någonstans? Där har vi säkert ett jobb att göra. Om man ser till framtiden och att man skulle omborda någon ny, någon försvinner och så vidare, så försöka liksom de grundprinciperna som man på något sätt lutar sig mot nu, som säkert kan ändras också såklart. Men det här är det vi förhåller oss till nu. Istället för att ha en uppsättning regler som blir omfattande och komplicerade och granulära så är det så här, vi försöker ha några grundläggande principer som vi tänker på när vi tar fram komponenter och vad vi än tar fram egentligen. Ja, visst. Och lyckas man få ner sånt i text eller bilder, vilket material det nu är, då har man ju något som är väldigt, väldigt nyttigt. Som du sa innan, allt man levererar är inte bara komponenter. Informationen runt omkring kan ju vara supervärdefull. Även om den kan vara svår att få fatt i ibland. Och det är ju också en intressant grej för att ibland våra utvecklingsteam så sitter majoriteten av dem just nu och jobbar i React-applikationen. Och det har ju då pragmatiskt sett varit våran, alltså det var så det började och det är fortfarande så. Det betyder ju att jobbar man i något annat än React och jobbar man i mobilappen eller jobbar man i något av de andra bolagen som ingår i samma koncern så kan man inte nödvändigtvis ta del av komponenterna för de är ju React-specifika. Ja, så då blir ju riktlinjer och liksom design tokens och sånt blir ju desto viktigare. Och sen så är det ju såklart också jätteintressant att fundera på hur skulle vi kunna brygga liksom gapet mellan olika ramverk och kanske till och med olika plattformar. Hittills, teamet har ju varit verksamt i tre kvartal ungefär nu, så vi har inte känt att det känns inte så pragmatiskt att liksom börja gå utanför till något ramverksagnostiskt när så stor procentandel av allihopa ändå sitter. liksom natively med react. Nej, men det är ju definitivt en fråga för... Alltså nära framtid förmodligen. Ja, men det är som du säger, det är en lågt hängande frukt igen. Vad är vettigt att börja med? Vad får vi stor utdelning på det? Och det kanske inte är att skriva ett generellt dokument för alla typer av gränssnitt. Nej, men exakt. Och ser man det, håller man sig på webben och tänker att så här, men hur kan vi stödja? Vi vill ju förmodligen, eller vi kanske inte vill och kommer jobba med React i en massa år fram. Det kanske vi gör. Men då kommer man ju onekligen att tänka på sånt som web components. Web components, jag tycker också, där är det också lite svårt för jag tycker när man läser en web components så är det också ganska polariserande. Ja, verkligen. Use the platform-gänget och så hör man library eller framework authors. Det är liksom de två lägren. Jag tycker det blir lite svårt, för det känns som att det är därför jag har varit lite försiktig med att skynda mig in i det. För det känns som att vi jobbar ju ändå i huvudsak med React, och då vore det ju synd om man ska behöva hoppa genom en massa loopholes för att webbkomponenterna i React ska samspela. Ja, men eller hur? Komponens låter ju så bra på pappret, men är det så bra i praktiken? Man kommer liksom till liksom alla komplexa detaljer som kär och dom och hur lirar liksom ramverken och domen egentligen. För många av ramverken går ju liksom en annan väg när det gäller hur de renderar appar. Ja, precis. Som är lite mera, ja, vad är det man kallar det? typ såhär lazy rendered medan domen traditionellt är eagerly rendered liksom. Och då är det såhär, samspelar det verkligen? Och så här, visst, det kanske är liksom, jag har nog inte helt satt mig fullständigt in i det, men det är definitivt någonting som vi har lust att titta på lite sen. Och det kan ju hända att delar av utbudet av komponenter funkar kanon som web components om de är liksom längre. De är ganska enskilda. Det är liksom ingen komponent som rappar en massa annat, utan det kanske är typ en datepicker. Eller någonting som är liksom en leafnode typ i hierarkin av alla. Ja, just det. Ja, nej, det känns inte nödvändigtvis som en silver bullet, men vi vill ändå utforska det. För det är ju, jag tror att tittar man i ekosystemet bara i Sverige av andra designsystem och det gör vi ju liksom själva mycket också. Det finns ju liksom i Arbetsförmedlingen och SJ har vi inspirerats ganska mycket av. Så de kan man surfa in och titta på? Ja, SJ har, jag tror att de relativt nyligen har gjort ett omtag på sin, jag vet inte, det är någon sån här SJ-design eller något sånt. Så de har gjort ett bra arbete och det kan man hämta mycket inspiration från. Vissa andra, jag ska inte svära på hur de gör kring det, men vissa andra kör ju 100% webcomponents. Jaha, de gör det? Det funkar säkert jättebra, men jag tror att vi får utforska det i framtiden helt enkelt och se vad det är. Sen vet jag inte, det är ju liksom inte helt otänkbart att landskapet ändrar sig lite grann heller, nu när AI är på stort intåg och utvecklingen går så pass snabbt som det gör. Ja, men precis. Det var intressant, för det sa du ju precis innan vi började spela in här, att det kan ju mycket väl komma att påverka vad ni bygger och vad man gör och hur. Och det var en sån grej som jag inte hade slagits av förrän du sa det. Nej, jag vet inte om jag hade slagits av det själv för några veckor sedan heller, men vi har pratat lite mer om det, för det har ju säkert inte gått någon förbi att det händer saker på AI. Och kanske från utvecklarperspektiv så har man ju traditionellt... Man har kanske tänkt på så här, men vad betyder det här för mig? Det är ju det här för mitt yrke. Men om man bortser från det så tänker jag ju liksom att våra användare som vi bygger tjänster och appar för idag, hur ser deras interaktion med de apparna ut i framtiden? Delar av det kommer ju säkert att övergå till att vara någon sorts assistent man kanske pratar och ber om eller chattar eller någonting. Så vissa sådana här stora komplexa flöden, såhär deklarationer eller liksom du ska ansöka om bolån eller vad det nu är. Det kan ju vara ganska omfattande och komplexa formulär. Det kanske är någonting som skulle vara jättebra som ett chattflöde i framtiden, för då kan du ställa frågor under tiden om det är någonting som du undrar. Men sen tror jag personligen att vi kommer ju säkerligen att ha kvar grafiska gränssnitt för diverse grejer. Men det är också så att i vår interna produkt och dess framtid så blir det ju någonting som man har kommit underfund med nu, att det här måste vi ändå tänka på. Hur ser framtiden ut kring det? Ja, just det. Vart är vi på väg? Och det finns ju liksom så här, vad är det de kallar det? Computer vision finns ju. Visserligen så är ju det faktiskt då typ att datorn tar skärmdumpar och faktiskt navigerar. Och då behöver vi ju ändå ha ett gränssnitt som, det är ju bara bra då om det är tydligt och tillgängligt. Ja men exakt, tillgängligheten lönar sig igen. Ja, men exakt. Ja, och det är klart, det måste väl kunna finnas någon aspekt också där det blir andra interaktioner som gör att man kanske vill presentera saker på andra sätt. Det kanske får ett annat behov av visningskomponenter som kan visas tagna ur sitt sammanhang. Det är inte så att vi har ett jättestort formulär, men jag vill presentera resultatet och då har jag resultatkomponenten, men jag har inte resten av... informationen runt omkring. Om man kanske vill integrera inmatningsfält i det här flödet också, för att istället för att allt hela tiden ska vara en fritext och typ en GPT-wrapper, Så känns det som att det kanske är en mix av båda världarna. Men jag tycker det är svårt att veta vart vi är på väg och det blir väldigt spännande att se. Och det är väl lite så som vi snackade om innan, att man får försöka liksom vara snabb på att inte sitta inlåst i liksom, sen jobbar vi med det här i två år och sen så ser vi hur det blir när det är. Ja, just det. Man är snabbrörlig och håller örat mot rälsen. Ja, exakt. Det blir nästan mer intressant när man tänker så också. inser att det kan komma sådana grejer. Det finns fler aspekter att tänka på än bara de som man har framför sig precis nu. Ja, nej men exakt. Och det tror jag väl gäller om man går in på temat med AI och utveckling också. Där tycker jag också att det är lite svårt att veta. För precis som i webbkomponenter är det också ganska polariserande åsikter om det. Det är liksom all in eller all out. Vem ska man tro på? Har de som är åt ena hållet eller andra hållet ett incitament kanske? Att säga si eller så? Ja, jag själv har ju, vi har ju använt AI, framförallt under en längre stund nu för dokumentation, för att försöka hitta ett konsekvent och professionellt språk, men också lite blankt canvas-grej, att man får, vi ska dokumentera en knapp, eller vi ska dokumentera en komponent som gör det här. Ge mig ett utkast, och så tar vi det därifrån. Och sen har den på något sätt efterföljts av en... Ja, typ att så här... Den kör fast och man bråkar med den här AI för att komma framåt, men ju mer man fortsätter, ju mer ute på signationer och så blir det. Ja, men exakt, exakt. Det tycker jag är en väldigt bra beskrivning. Men den har ju kommit i omgångar också. Ja. Nu finns det ju liksom ännu bättre integration mellan en AI-agent och en editor till exempel. Och det är också blivit en wow-faktor. Men det känns också som att man kommer till, och man förstår ju att när den har den här chain of thought-grejen, att den kan typ prompta sig själv och prova outcomes och så vidare, så förstår man ju att resultatet blir mer träffsäkert. Men det känns ju någonstans också som i slutändan att hur de fungerar gissar sig ändå till vad som är rimligt att göra härnäst så att det känns ju som att hittills så har jag fått Några sådana där wow-faktorer, men ändå känt i slutändan av när det har gått såhär två dagar. lilla honeymoon-fejsen över, att så här, men då stöter man på de här friktionerna och där det liksom tar stopp. Ja, men exakt. Det tar stopp på ungefär samma stil som sist. Fast på en lite annan. Nej, jag känner nog väldigt mycket så också. Samtidigt så pratar jag ju med folk, med jämna mellanrum, det känns som att de verkligen har hittat arbetssätt ihop med AI som verkligen funkar för dem. Och de blir genuint mycket snabbare på att göra saker och jobba på det sättet. Det kanske är ett sätt som inte alls passar mig för att jag är gammaldags och vill sitta och titta på koden utan att bli störd av förslag mitt i. Nej men och man vill ju, alltså det är en utav de grejerna som jag tycker är tråkigast med det. Jag tror också att så här, i någon grad så kommer väl det här, man kommer väl nästan att vara så illa tvungen att använda det för att behålla en viss produktivitet kanske. Sen så tror jag inte att man behöver liksom förlita sig på det helt och hållet. Nej, det är ju frågan. Precis, det är frågan. Vem vet? Men jag tänker så som för min del, jag jobbar ju i VIM och jag tycker det, eller NeoVIM specifikt, och jag älskar ju liksom det att skriva. Jag tycker det i sig är så kul. Men den, liksom när man jobbar i terminalen så, då är det inte nödvändigtvis så att det är inte där ny funktionalitet kring det här kommer först. Och då blir man så här, okej, men ska jag testa någon ny editor här för att prova? Men liksom jag, jag tror jag delar din åsikt där, men jag vill ju typ så här sitta utan distraktioner och bara liksom få göra det som, för det ger mig glädje liksom. Ja, och samtidigt så är det ju onekligen så att när jag har Copilot påslagen i Visual Studio Code, jag vill ju kanske egentligen inte ha så mycket av intelligensen, men däremot att den ibland funkar som en väldigt mycket smartare autokomplettering. Ja, spara tid helt enkelt. sparar mig ju lite tid då och då och hjälper mig att avsluta en grej och samtidigt hålla en tanke i huvudet. Så det är väldigt så balansgång. Det är både störande och lite hjälpsamt samtidigt. Ja, men exakt. Det är intressant. Det kan vara mycket frustrerande också. Ja, visst. På mina mer cyniska humör så kan jag tänka mig att om tillräckligt många går tillräckligt hårt in på AI-utvecklingen Hantverksmässigt skriven. Det blir mycket mer förutsägbar. Jo, nej men precis, för det är väl också en av aspekterna att både när det gäller liksom, ja men att producera kod kanske är en aspekt i sig, men säg alla de här bildgenereringarna. Ja. Det är ju inte som att du får samma resultat när du ställer samma fråga. Så det blir lite svårt att liksom, vad är det egentligen som kommer ut? Det kommer säkert funka, men det är där i den ballparken. Ja, men precis. Det är som att prata med någon slags drömgenerator. Det händer något i en dröm och så tror man att det här är samma och så har plötsligt allting runt omkring ändrats. Nej, exakt. Men jag tror att det kommer väl att vara viktigt att fortsätta vara nyfiken på det i alla fall så att man inte frånskriver det helt och hållet. Så, liksom använda det... Använda det till en rimlig grad där det känns som att det gynnar en och inte att man till slut sitter och... Men det kanske, vem vet? Vem vet vart vi är på väg? Vi stämmer av igen om två år och ser vad som faktiskt hände. Är det något mer vi borde få med innan vi avslutar för idag? Jätteintressant. Ja, nej jag tror inte det. Jag tror vi har varit inom det mesta som jag har tankarna. Det är väl i så fall, jag tror att det finns några länkar som vi kanske skulle kunna lägga in i någon beskrivning. Ja, men exakt. Jag lägger ner in massor med länkar, inklusive till SJs designsystem också. Jag tycker det är trivsamt att de har gjort en sajt för sitt designsystem som bara visar komponenter men den känns samtidigt 100% SJ. Så de har verkligen lyckats få till en enhetlig känsla på det på ett ganska stiligt sätt. Ja men det är också så här, det är lite power move att lägga sin system publikt. Det känns som att vi hade säkert också kunnat tänka oss att göra det i framtiden, men vi har inte vågat göra det ännu. Det har inte funnits ett tillräckligt skyltfönstervänligt material kanske. Nej, jag kan helt förstå resonemanget. Men som sagt, vi länkar in sånt också. Och om du kommer på några fler grejer som vi borde länka med så tar vi med dem också. som folk massvis tittar på. Ja, men då så. Tack så jättemycket Johan för att du ville vara med. Ja, tack för att jag fick vara med. Tack för att just du lyssnar på Kodsnack! Om du vill stödja oss, varför inte tipsa en bekant om podden? eller lämna en recension i t.ex. Itunes eller något annat ställe där det går att sätta betyg på poddar. Du kan också stödja oss genom att köpa oss en kopp kaffe på Coffee, kobinderstreckfi.com/kodsnack. Alla pengar går direkt till att göra podden bättre och trevligare. Du kan också komma och hänga i vår Slack-kanal. Länk finns på kodsnack.se, precis som alla andra länkar och all annan info kopplat till varje avsnitt. Sist men inte minst finns det också en länk till vår Spreadshop-butik där du kan köpa tröjor och andra prylar med kodsnack-tryck. Återigen, tusen tack för att du lyssnar. Vi hörs. Låt mig uttrycka det så här, Mr. Aimer. 9000-serien är den mest tillförlitliga dator som någonsin skapats. Ingen 9000-dator har någonsin gjort ett misstag eller förvrängt information.