Jag minns att vi hade en QA-person då, som ibland gick i taket över det här, för att det var så här: Nu har du ju gjort massa ändringar. Hur vet du att det här funkar? Och det här smögs alltid med lite för kuba-personen. Du lyssnar på Developers, podden där du får följa med oss, Sofia och Madde, på allt inom mjukvaruutveckling. Vi träffar spännande gäster, testar nya teknologier, söker inspiration och tar upp aktuella ämnen. Jag vet inte varför det har blivit så svårt att starta podden. Vi startar så här. Vi är stela. Men det är bara så jag har slitit på saker att säga känns det som. Fast vi har massa saker att säga, men de kanske är rants utanför techvärlden. Eller? Jag vet inte. Jag var så här, du bara frågade, har du något att säga? Ja, men jag hade kalas för min ettåring idag. Det är inte heller så intressant att prata om. Ska vi inte bara hoppa rakt in och tacka våra stjärnsupportrar på Patreons och sen snackar vi om vad vi ska snacka om. Jo, jag måste spara luft i mina lungor för det är så mycket tecknigheter. Jag vet inte ens hur jag ska orka läsa igenom det här. Okej, men då kör vi och tar och tackar våra stjärnsupportrar på Patreon. Det är alltså de som stöttar oss med 100 kronor eller mer per månad som får sitt namn uppläst här. Och det är Alicia, Anders Nylund, Björn Jonsson, Dag Grunell, Kajetan Kasmirsak, Lars Nyström, Molly Haglund, Oskari, Per Nåtby, Selim Hjorthall, Stygg Hest och Tomas Nilsson. Tack så mycket till er och tack till alla andra som stöttar oss på Patreon och på alla andra olika sätt som ni supportar oss. Ja, det var någon som köpte merch häromdagen. blev så här glad när det droppar in lite då och då. Exakt. Och ibland ser jag någon på jobbet som har vår merch. Som inte går fram och skryter om det varje dag. Utan bara såhär: Jo, men jag har er merch. Det är nice. Fint. Nej, men låt oss hoppa in i nyheter. Du har använt Create React App, eller hur? Jag vet ju det. Det vet du att jag har. Men det kanske inte är alla som har gjort det. Ganska ny, så kanske man redan vet att man inte bör använda Createract-appen. Eller om man inte är frontend-utvecklare. Eller Mighty Frontend-utvecklare. Men vad ska vi säga då? Create React-appen var... Jag vet inte, för det kom nog precis när jag började jobba med React. Så det kändes som en game changer, men jag vet inte hur pass mycket game changer det var. Det kom 2016 och det tog bort mycket av krånglet med att hålla på med all boilerplate kod för att konfigurera ett helt react-projekt, du vet webpack, konfigs och babel-konfigs. Du måste. Du har ju ändå haft. Du har väl haft projekt där ni inte har Creative Act Up? när ni fått hålla på med allt jox. Ja, precis. Då var det helt enbyggd webbpack. Det var ju nice, för där är vissa saker i Create Tract App som inte kommer med automatiskt. serverside-rendering och lite sånt som vi behövde i den applikationen. Men det är jobbigt att underhålla det också. Sen kan man ju ejecta sin Creature Active och jada, jada, jada också så att man kan ju komma runt det. Och då hamnar man i något helvete mellanstadies... Ja, det är nästan ännu värre. Jag minns att du har klagat på att vi skulle emigrera till Webpack 5, det tog jättelång tid. Det tog bort mycket av helvetet som innebär av att jobba med front-end. Ge er inte in i det, för det är inte så jättemycket bättre nu, ska jag säga. Men det var i alla fall synonymt med att starta ett projekt. Det var så här, det är självklart att när du... Ska du starta ett React-projekt använder du självklart en React-app för att sätta upp allting. Jag ser det fortfarande idag när folk lämnar in sin kod till techintervjuer, att folk fortfarande använder det. Det är en sån vana man har. Även nu, alltså med vitt och sånt. Ja, jag tror att vissa vet inte. Vissa har inte hört om att... I alla fall, det de inte hört om är att reaktioner slutade rekommendera för ett tag sedan och man slutade mainteina det projektet. Och man började rekommendera. Ja, det är det här som jag ska gå in på, som med tjafset här. Åh, alltid kul med tjafs. Ja, så det har varit tjafs. Som du säger, Creact Wrecked Up har inte haft stöd för allting som är mer modern webb idag. Så det är inte chockerande att det läggs ner. Men det hände ett drama under 72 timmar efter att de offentliggjorde att det verkligen ska läggas ner helt. Så jag ska sammanfatta dramat. React-teamet gjorde ett blogginlägg där de uppmanade utvecklare att överge Create React Up och att man ska gå över till NextJS React Router eller till och med bygga ett eget ramverk från grunden. Inte rekommenderat, men det är de här sakerna du kan göra. Men jag vet att de har varit så här, men håll inte på och bygga det från grunden. så de är väldigt så här, använd typ Nexj. Jag tror att du har sett det kanske på hemsidan när man går in så är det så här Använd NextIS eller Gatsp kanske de också rekommenderar. Men, och nästan ingen nämnde, alltså det heter vitt, men de flesta tror jag säger vitt. Folk som inte snackar franska. Någon kommer hata att vi säger vite, men jag fattar. Hur säger du det? Jag säger vitt. Du säger vitt. Jag har ju läst franska i fyra år, men jag... Jaha, vad bra! Fancy baguette! Ja, okej, men vissa kallar det vitt. I alla fall, vitt är jättepopulärt bland React-utvecklare. Typ alla som körde Create Drakeed App som fick reda på att det inte var toppen längre gick över till vitt. Det var svinenkelt att gå över till det toppen. Men ingen nämnde att ett alternativ är att gå över till vitt. Det är jätteenkelt. Så många utvecklare blev väldigt arga och menade att React-teamet var partiska mot vitt och förstår inte hur communityt faktiskt arbetar. Jag skulle säga att de flesta har ju gått över till vitt istället för att migrera alltid till Nextjes. Det är ju en mycket svårare grej. Det finns mycket mer. Visst, det är kanske bra om du ska bygga någonting stort och robust, men det är mycket mer du får på köpet som du kanske inte behöver alltid. Ja, nej, de gick ju till och med så långt att de anklagade reakt-teamet för att vara köpta av, någon som skrev så, av Big Framework. Men vadå? Eller vem ligger bakom Nexis egentligen? Det är ett företag som heter Vercell. Folk har kanske hört om det i olika sammanhang. De har ju cloud-tjänster. Hostings, vad är det? Hostings. De kör hosting, de bygger Nexeus. Nu kan jag vara ute på utvatten, så insatt är jag inte. Men det är många i React-teamet som har gått in och börjat jobba för NextTS-projektet och vice versa. De är väldigt sammankopplade. Så det blir lite så här... Det blir väldigt färgat. Jag håller faktiskt med om det. Så det här Twitter-tjafset höll på i några dagar och det var ganska underhållande i alla fall när man såg posterna från det. Men till slut lugnade det ner sig och React-teamet uppdaterade sitt blogginlägg och hade lite mer balanserade, nyanserade rekommendationer. inklusive hur man kommer igång med vitt, utan att behöva byta till ett ramverk som NECT-IS. Så nu är freden återställd, men i alla fall lite drama. Men jag hoppas att ni har fått budskapet med er: Sluta använda Create Direct Up. Det är officiellt dött. Alltid kul med lite drama. drama, men det var fint att det löste sig, att de blev vänner till slut. Ja, frid och fröjd på jorden. Nästa grej. Inte så relevant för oss utvecklare kanske, men Amazon, du vet så här, Alla stora företag har jobbat med AI, LLM, släppt någonting för att vara relevanta i AI. Amazon har ju inte gjort det. Nej, men de gör ju så mycket annat. Ja, jag tänker de har ju hela AWES som är typ en av de världsledande cloud providers och sånt. Behöver man verkligen doppa fingrarna i alla syltburkar? Absolut, absolut. Har du Azure AVS eller Google Cloud så håvar du in pengar på att inte göra någonting i princip. Absolut, de har haft olika typer av LLM-tjänster i det. Men de har ändå inte riktigt varit med i gamet som någon som gör modeller, eller hur? Nej, nej, nej. De har haft Code Whisper, men ändå, de har ju sin assistent Alexa och det är väl där man förväntar sig att någon slags utveckling ska ske. Och nu äntligen så har de rullat ut Alexa Plus, eller i alla fall presenterat det. Jag tror att man kan signa upp det och det finns olika erbjudanden, om du har Prime eller inte. Det är väl spännande. Alla de här Siri och Alexa är helt värdelösa. Du kan ju i princip inte göra någonting förutom att sätta på musiken eller släcka lampan. Men samtidigt, med det sagt, så är det miljoners miljoner människor som ändå interagerar med Alexa och säger: starta musiken eller släck lampan. Jag vet inte vad det kommer leda till, men det är väldigt många användare som de introducerar features för. Och det kanske kommer utvecklas och man kommer förstå hur folk använder det mer och mer. Men som vanligt hade de en demo där de visade exempel som är helt... Det är ingen som gör så här i verkligheten. Det var typ så här, Nu kan du använda AI:n för att beställa en Uber åt din kompis när din kompis kommer till flygplatsen? Gud, vad krångligt scenario. Alltså det enda jag vill kunna med typ Siri är öppna min anteckning som heter handlingslista och lägg till smör när jag står med händerna fulla och bakar och insatt smör till slut. Det går, men det är skitjobbigt att säga det. Ja, men den fattar inte handlingslista. Alltså, nej. Jag har i alla fall inte lyckats. Nej, vi hoppas att den är bättre, men jag är väldigt trött på de här exemplen som ingen i världen någonsin skulle göra. Folk beställer sin Uber själv. Inte ett verkligt case, men det visar att de ger sig ändå in i det här. Ja, men. AI-agenter, försöker göra någon slags agent som alla andra håller på med. Vi får se vad som händer där. Någonting som är mer roligt för oss, Visual Studio Code, känner du till och använt kanske? Aldrig hört. Jag vet inte, det är väl så här. Det vet väl typ alla vad det är nästan, eller? Det tror jag nog. Om man inte jobbar med något väldigt obskyrt språk, men det är en ID, används kanske oftast av... Alltså, nu vågar jag inte säga det. Det känns som att flest JavaScript-människor använder Visual Studio Code. Min sambo frågade mig när han började plugga, vad är skillnaden på Visual Studio och Visual Studio Code? Så sa jag typ såhär, ja men Visual Studio det är typ för backend.net och Visual Studio Code är typ för frontend, alltså så om man ska hårdare. Så hade han sagt det på sin LIA och då hade de skrattat åt mig. Och typ såhär, nej det har hon absolut inte sagt. Exakt. Och jag bara så här. Det var väl rimligt för någon som är ganska ny. Det var ju precis när han började plugga, det var väl inte så dum förklaring eller? Men vad menar de? Hur hade du fel? Ja, nej, jag vet inte. Såklart du kan köra andra saker i Vicious Studio Code också. Ja, men det är hemskt och det gör inte det. Nej, exakt. Nej, sign-out i alla fall. Jag avskyr när folk föreslår det. Alltså, förlåt min chef, du är bäst, men jag var så här: Behöver du verkligen vad jag skulle ha? Intelligy, för jag var: Behöver du verkligen Intelliger? Det går ju att köra i Visious Studio Code. Jag tänker inte sitta med ett full-fledged språk när jag har en full-fledged ID och sitta i Visual Studio Coal med skitextensions. Nej, jag är benägen att hålla med. Ja, det är för att vi är färgade av Visual Studio som har allt. Okej, vi har förklarat vad det är nu, på ett dåligt sätt, och folk skrattar säkert antagligen igen. Men i alla fall, de har ett väldigt populärt tema. Man kan ha väldigt många olika teman i den här ID:n, som heter Material. Och det är för att man har upptäckt misstänksam kod. Så material theme var ett väldigt populärt tema. Det hade mer än 6 miljoner användare och är inspirerat av Googles material design. Men nu är det alltså helt borta. Men vadå? Alltså teman, det är ju typ bara lite Jason. Vad kan man slänga in för farlig kod där i? Ställ inga frågor. Säg bara ja. Nej, nej, men jag bara funderar. Men visst, det är klart, har man ont uppsåt så kan man ju lyckas göra det med det mesta. Jag är så oskyldig och naiv. Hur skulle man kunna göra det i ett tema? Ja, bra fråga. Jag har aldrig byggt ett tema. Någon som har byggt ett tema vet ju såklart vad det är. Men den ändrar väl inte bara... Eller? Ändrar man bara färg? För det de sa var att det fanns mycket kod som har onödiga beroenden till saker. De körde några Child-processer i VS Code, vilket var väldigt märkligt för ett vanligt tema. Jag vet inte, så det är i alla fall borta. Då kan jag tipsa om världens bästa tema som jag använder på rubbet och det är ju Nord. Jag tycker det är så snyggt. "Just det, det använder du." Jag använder typ sublime, coffee eller nåt sånt där. Brun, orange, tuva. Lite sublime associerar jag med orange i alla fall. Det är ett färgglatt tema, men det är lite mognare, skulle jag säga. Det är bara skönt för ögonen, det är inte så skrikigt men det är ändå färgglatt. Om någon vill så kan vi göra ett avsnitt om alla teman vi har och alla vår uppsättning och allting som vi använder. Men då får ni önska det, för annars kommer jag tycka det är pinsamt. Anthropic, också AI-stuff. De har släppt en ny version av sin populära LLM, version 3.7. Alltså klåd då, eller? Just den här modellen heter Sonet. Ja, men det gör väl alla kronmodeller? som används... Jag vet inte om CLAR är det fina namnet. Jag fattar inte. Det kanske är som... Anthropic är som OpenAI och sen har du chat-QPT som är Claude och sen är Sonet själva modellnamnet som O1. Förmodligen. Ja, förlåt. Jag orkar inte. Jag orkar inte tjej-gissa saker här, för det blir alltid felsäkert, men det låter jätterimligt. I alla fall, det har kommit en ny version av den och just Sonnet 3.5 har ofta, enligt de flesta benchmarks, toppat ligan i att vara en bra kodassistent och generera kod. Den dök upp i juli 2024, men enligt Anthropics ska 3.7 vara ännu bättre. Inte jättekonstigt att det ska vara bättre, men det ska vara bättre på kodning och specifikt frontend-utveckling. Och som en del av det här så satsar man också på ett verktyg som heter Claude Code som är en AI-agent som konkurrerar med liknande lösningar som typ Devin och andra sådana här AI-verktyg. Är det bara jag som tycker att Claude Coade inte var ett bra namn? Jag tycker inte alls det ligger bra i munnen. Jag är så glad överhuvudtaget. Ja, det blev lite äckligt. Äckligt? Glad kod. Choklad. Ja, jag vet inte. Det låter som en butler, men det är väl okej. Alla de låter lite så. Jag vet inte, det är ingen som har lyckats med ett produktnamn här. Alltså Gemini kanske är det minst äckliga. Våra i chatt-GPT är äckligt. Nej, det är bara så dåliga produktnamn. O1, eller vilken modell ska jag använda idag? 01 eller 03 Mini eller 4O? Det är så dålig produktpresentation. Med det sagt också, de pratar om att: Jag vill veta att det är jobbigt. Du ska inte behöva sitta och välja bland sex modeller, utan de ska automatisera det. När du skriver en prompt så väljer de den bästa modellen för det du vill göra. Det vore asbra. I alla fall, den tidiga versionen Sonnet 3.5 blev jätteframgångsrik. De flesta ID:s med generativa AI-funktioner började använda den. Men för GitHub Copilot, som du använder i Visual Studio, så dröjde det med stödet för det. Då hann andra ID:s som Cursor och Windsurf plocka upp användare i och med att de tillät sådana 3.5. Men den här gången har alla stora utvecklingsverktyg, inklusive GitHop, redan lovat stöd för 3.7. På tal om GitHub Copilot så släpper GitHub Copilot sin Code Review-funktion. Det ska bli spännande, för det har du och jag pratat om. En AI som kanske kan kolla igenom din puller quest. Ja, det är skitbra att kunna ha åtminstone en första granskning, innan man skickar upp den för att ha en peer. Eller hur? Jag har inte testat den. Jag fick mejl igår att min Copilot-licens har uppgraderats med den här funktionen. Vi betalar för det på jobbet. Så det ska bli jätteintressant att testa. Så vad den gör är att den ger feedback på pullrequests, går igenom och hittar uppenbara buggar. Den summerar ändringarna, den föreslår vilka tester du kan ha, den rättar stavfel. Ni som klagade på stavfel för något avsnitt sen. Men ja, det är jäkligt coolt. Sen tänker jag att den lär ju inte fatta kontexten särskilt bra. Alltså själva featuren du implementerar, hur det hänger ihop. Alltså det borde den ju inte kunna. annat sånt här, att det ska vara stavfel och liknande. Skriver den tester åt honom också? Eller bara säger den typ så här, du borde testa detta, för det har varit sjukt nice som den bara, du borde testa det här, här har du ett Unitest. Jag vet inte, vi får testa. Det stod bara att den föreslår tester, så jag vet faktiskt inte. Det är bra för sånt. Ja, nej, men ingen aning. Men det låter ju som ett bra tillägg. Men som du säger, den kanske inte kan skriva en bra purquistsammanfattning åt en för att den saknar kontext. Det blir kanske så här: Jag har ändrat detta, jag har ändrat detta. Okej, men det är inte intressant om jag inte vet varför du ändrar detta. Är det så att man är för dålig på att använda bra domänspråk? Ja, det är också ett... Kan man känna att man borde bli bättre på det? Och vidare till Google. Vi måste ju nämna alla stora aktörer innan vi är klara. Google släpper sin kodassistent Gemini Code Assist gratis för privatpersoner. Tidigare kostade den 22,8 dollar i månaden. Otroligt konstigt. Specifikt. De hoppas väl på att locka in fler användare, det här har de gjort med alla sina AI-verktyg. Först ville de att alla skulle betala för det, men ingen ville betala för det, så nu försöker de tvinga oss att använda det i alla appar istället. för nu var de så här, okej, ingen vill betala för det, vi vill ju ha folks data. Så låt oss bara tvinga dem att använda det och släppa det fritt. Ja, som sagt, jag vet inte hur många gånger man har hört det här med att om någonting är gratis så betalar du ändå någonting och oftast är det din data. Exakt. Vi får se om de hinner ikapp Copilot och Kurser. För företag kostar Geveni Code Assist fortfarande dock 54 dollar i månaden. Det är ganska dyrt. Eller vad kostar Copilot? För företag vet jag faktiskt inte. Det är antagligen också dyrare, för din data processas bara på en dedikerad server som de inte har tillgång till. de får inte träna på din data, så där förstår jag att man får betala. Eller vänta, här står det. Jag vet inte, det här är priser i dollar, det kan vara annorlunda på vår marknad, men här står det att Gemini Code Assist kostar 54 dollar och GitHub Copilot Enterprise kostar 39 dollar. Så den är dyrare. Men ja, det var nyheterna. Tack för den här genomgången. Väldigt bra påläst. Jag slipper läsa nyheter. Varsågod. Jag kom att tänka på att vi borde ha tagit upp någonting om allting som varit med Firefox. Har du hört någonting om det? Ja, men jag orkar inte prata mer. Nej, jag dricker vatten så får du berätta. Jag har inte alls förberett någonting, men jag har läst lite om det. De har ju uppdaterat sina terms and conditions nu. Och i princip första versionen sa ju mer eller mindre Vi kommer samla in all data du matar in i inputfält eller i vad du skriver och vad du surfar i jobbet. De ska väl förmodligen också göra någon form av AI-träning eller något, kan jag gissa. De har ju blivit uppköpta också, så det är ju mer. Men folk har ju slagit bakut nu och letar efter alternativa browsers. Det finns ju typ såhär Libre Wolf till exempel vet jag som är en fork av Firefox. Om man nu vill fortsätta använda Firefox men inte sälja ut sin själ. Sen finns det ju massa andra alternativ. Är man fine med att köra på Chromeum så förespråkar ju både du och jag Arc. Och ja, nej, det finns ju tusentals alternativ. Brave och massa obskyra alternativ som jag knappt ens har hört talas om. Ja, det där är tråkigt, för jag har inte hört om att de erbjuder att du kan betala någonting och få slippa undan det. Jag förstår att folk behöver tjäna pengar. Och som privatperson, jag vill inte heller betala 200 spänn för att använda en browser, men att de kunde haft en modell såhär: betala... 20 spänn i månaden, så hade nog väldigt många gjort det. Ja, kanske. Jag hörde, jag vet inte, jag har inte faktagranskat detta nu, men att en stor anledning att de har mindre pengar är för att Google har slutat supporta dem. Google har ju supportat ganska många rousers mot att då få ha Google som default sökmotor. Nu när de inte längre får göra det i och med de här lagarna som har trätt i kraft så skiter de i att supporta för då får de inte ut någonting av det. Okej, så det är vårt fel. Européerna. Ja, exakt. Skyll på det. Okej, men då ska jag inte säga något. Fan vad de måste vara trötta på oss i USA. Vi fick ju en lyssnarfråga också som vi kan ta och bränna av kanske. Jag tänker, den är inte så jättelång. Det är från vår vän Kajetan Kazmirsak, vars namn jag har hört många gånger. Han frågar så här, hur löser man bäst konflikten mellan att vara lite av en scout och alltid lämna koden i bättre skick än när man fann den. det vill säga fixa eventuella småsaker när man ser dem, uppdatera paket, fixa felstavningar och så vidare. och att bara sträcklösa det som finns i en girartikel och inget annat. Flera arbetsplatser har, fullt förståeligt kanske, en policy om att en PR endast får innehålla lösningen på en feature eller bugg och inget annat. Samtidigt vill man ju inte att koden ska förfalla för att det inte finns Tickets i Gira för något litet man precis har hittat. Och att skapa en ticket, få den prioriterad och kanske få återkomma till den senare är ju rätt omständigt om det handlar om till exempel namnet på en lokal variabel som är felstartat. Har ni råkat ut för det dilemmat? Det jag reagerade först på var att flera arbetsplatser har en policy där en PR endast får innehålla lösningen och ingenting annat. Jag har aldrig varit med om det. Inte jag heller faktiskt. Jag har inte hört det som att det skulle vara ett problem på det sättet. Att man bara får göra det. Sen kan jag ju förstå att man inte vill trycka in hur mycket som helst. Man får ju ha lite sunt förnuft då. Men ibland så är det ju... Ja. Ibland blir det att man måste lägga ihop vissa saker. Det har jag i alla fall gjort mig skyldig till. Ja. Jag har definitivt varit med om att folk diskuterar det här i ett team, men aldrig att det funnits en strikt policy. Jag tycker bara det låter helt sjukt att man ska behöva göra en ticket av det och få den prioriterad och att den ska gå igenom hela den här ordinarie processen. Det känns som någonting man borde diskutera fram. Jag vet inte, kanske någonting att ta upp på ett retro och säga det här att jag vill kunna lösa småsaker. saker. För jag är helt med på det här scouttänket. Jag tycker det är klockrent. Alltså så här, ser man någonting som behöver fixas och om det bara är ett stavfel eller någon lintgrej som har blivit fel eller någonting. Då har jag bara gjort det i samma PR, om det är relaterat till det kontextet. Men om man ser att det kanske är en funktion som skulle behöva refaktureras för att den är lite otydlig, man kanske vill bryta upp det jättelånga till lite olika variabler och sånt. Då kanske det är mer okej. kanske ska göra det eget, men då hade jag ändå bara gjort det i en egen PR och inte skickat in den samtidigt. Ja, det är väl här det kan bli tjaff så att man är oense. Jag tycker att man ska städa upp när det är ett stavfel. Men jag förstår absolut problematiken att du behöver refakturera en funktion. Eller du ändrar kanske massa stavfel. Du ändrar saker som känns små, men i och med att koden inte har tester så kan du ha introducerat något stavfel och det upptäcks inte förrän du har tryckt ut det. Det skulle ju kunna vara till exempel om man använder så här magic strings. Alltså att du, istället för att du har en konstant eller någonting eller en enum så jämför du ett strängvärde. Och så har du plötsligt bytt strängvärdet. Och det är ju mycket lättare att detta trillar mellan stolarna om man bara gör det lite under radarn. Det blir ingen spårbarhet om du inte har en ticket att koppla dig till på det sättet. Jag har jobbat med en utvecklare, som jag har väldigt stor respekt för, men som var väldigt snabb och upptäckte att det här behöver göras om, för att man behöver underhålla sin kod. Man ser en halvt år senare och bara, men vad fan är det jag har skrivit? Men som kände att det var en bra idé att passa på och kanske gjorde en till PR då ens. så försökte jag vara noga med att det skulle vara lätt att code-reviewa. Men jag minns att vi hade en QA-person då, som ibland gick i taket över det här. Det var så här, nu har du gjort massa ändringar. Hur vet du att det här funkar? Och det här smögs alltid med lite för kuba-personen, för att den här utvecklaren visste ju att kuba-personen skulle fråga. Och så var det också störigt för vissa som utvecklare. Ibland kom det en väldigt stor: Nej, men det här är bara en refakturering. Jag bara gör om hela strukturen. Jag gör det mer funktionellt. eller jag vill inte att det ska vara funktionellt, för det är så svårläst. Och då att sitta och granska det som kollega utan en ticket. Alltså det var ändå såhär, det kunde vara svårt. Ja, men det känns som en lite större grej. Man kanske kan ha någon slags, är det mer än två minuters jobb att implementera och mer än 15 minuter att testa, ja då får det bli en ticket av det. Sen vet jag inte, jag har ju ändå varit sprungmaster och jag skulle inte blivit sur om någon utvecklare la upp en ticket och bara drog in den i typ developing och körde. Det tycker jag också är najs. Det låter som onödig bromskloss att man ska sitta och prioritera upp det och så vidare prioriteras det inte upp och så glömmer man bort den. Om det ändå är så litet att man gör det tillsammans, så bara köra. Ja, enda gången jag skulle vilja lägga det i någon prio-backlog är om det är ett större arbete. Ja, om det är en dags arbete eller en halvdag ens, då snackar vi liksom. Nej, då kan du inte bara smyga in den lite så där. Ja, precis, för då sitter du ändå och har prioriterat ner någonting annat. Man behöver ändå vara transparent mot alla i teamet och ha respekt för PO:n vars ansvar är att se till att det mest prioriterade jobbas på. Det är säkert helt okej för P:n, men man behöver lyfta det och prata om det. Och det kan vara sjukt störande som utvecklare. Ni måste göra det här. Det går ganska snabbt. Det tar bara en halv dag, men de vill ändå ha lite koll och förstå vad som händer, och varför ni lägger tid på det här. Ofta brukar man ju lägga in lite padding för typ main tendence tasks och sånt. När man gör sprint planning och sånt. Så jag tycker ändå att utrymmet borde finnas där. Det håller jag med om. Vad tror du? Säger du? Nej, men jag känner igen ett scenario, och det är så här... Det här stör mig faktiskt väldigt mycket bland saker som stör mig. Jag borde skriva upp det här någonstans, så att vi kan göra ett avsnitt om saker som stör mig med andra utvecklare. Säg att det är så här... Ja, men det tar 20 procent av din sprinttid att göra det här. Hennes femtio. och så säger vi att det här tar lite längre tid, är det lugnt att vi lägger in den här backloggen? och den här utvecklaren säger nej, jag vill göra det nu, eller säger det här kommer inte ta så lång tid. Så det de gör istället är att de tycker det här är rätt roligt arbete. Så de sätter sig på kvällarna och gör det här. Och påstår sen, jag vet inte om du har varit med om det, men jag har varit med om det flera gånger, från olika personer. Det är så roligt att de gör det på kvällen. Men det är ändå någon som ska jobba med detta sen och testa det. granskade? Ja, men De personerna är oftast såhär: Det är inga problem för någon och jag har suttit och gjort det här själv. Hur kan inte alla vara tacksamma att jag sitter och gör det här på min fritid? Men jag vill inte ha det så. Jag vill inte att det sitter folk och kodar hela nätterna. Jag har väl gjort det någon gång, men då försöker jag... Jag vill inte att folk ska se att jag har gjort det. Du ska inte stressa teamet att här sitter någon och kodar på kvällarna av intresse. och höll på med ett hobbyprojekt då. Det stör mig. Och definitivt har vi folk som lyssnar som gör så här. Jag tror jag har gjort så någon gång också. Jag känner mig lite smått träffad. Jag är träffad själv också någon gång, men det finns vissa som är större grejer. Så att de inte förstår att det är stort. Och de insisterar på att inte låta den här pulvercoasten vara i draft. För det är fine. Gör det på kvällen. Lägg upp en puller quest och skapa en ticket. Lugna ner folk, preppa dem lite. Jag vet att det är störigt, men gör det här lilla extraarbetet för folk, så att du inte bara trycker in saker. Åtminstone det. Någonting... kommunikation, typ. Men ja, vad ville du säga? Nej, jag ska säga... Tror du det är en bra idé att man har någon generell förbättrings-ticket? Alltså som man kan då koppla till och att man då, för de flesta verktyg så kan du ju ändå skriva en kommentar till, alltså kopplingen till din ticket från din PR. För då löser man ju lite det här att man måste gå in och skapa en ticket. Det är ändå lite extra overhead som blir ganska mycket om du bara ska fixa något litet stavfel eller liknande. Eller blir det bara en slasktratt? Nej, så stavfel. Absolut samma för request. Alltså, som sagt, när det inte är. När det inte är farligast av fel, att man ändå råkar ta sönder något. Jag tycker det ska vara refakturering i PR:en, men jättegärna i en egen committe. Här har jag gjort arbetet och här har jag städat upp. Men prata om man kunde ha en ticket som är generell, som du kopplar till. som bara slasktrattar allting? Ja, men typ. Det här är den här sprintens förbättrings-ticket. Hit kan du koppla smågrejer. Jag vet inte själv om jag gillar det riktigt, men jag funderar på om det skulle kunna vara en lösning. Ja, men är det så smått? Då tycker jag det ska vara kopplat till... Då kan det ändå vara på den original-ticketen. Men absolut, är det någonting så här: och så råkade jag se en helt annan fil, att det var någonting. Ja, jag vet inte. Å ena sidan blir det såhär: Men gud vad bajsnödig man ska vara. Man kan inte ens fixa något litet utan att man ska skapa en ticket. Men å andra sidan är det inte så jobbigt att göra det. Klicka på plus och skriva en titel och vad man fixade. Det beror på hur mycket du ska skriva. Alltså, vissa är ju superstrikt att du ska skriva liksom, given, when, then och typ as a develop, eller nej det är det man inte ska skriva, as a development, as a customer, are you want to, bla bla bla bla. Refactor the system liksom. Det är det som blir så krystat ibland. Det är bajsnödigt. Nej, det får man inte göra. och det jag har haft i andra team är att vi har en feature, eller epic, i Hira, som heter typ technical improvement, dept ideas, Och kommer du på någonting så kan du lägga in en task där. För framtida grejer. Eller så när du ser någonting nu, nu, nu. så har du en feature att lägga den under. Ja, så hade vi också i mitt senaste team. Det här kunde vara verkligen högt och lågt. Ja, man måste rensa ut de här också har jag märkt. Ibland ligger det bara saker som ingen någonsin tar upp. Men jag tycker det är schysst att skriva en rad såhär, för det är för en själv, för man själv minns inte hur man skapade den här artikeln för ett halvt år sedan. Det finns bara en titel som är Refactor Service. Och så bara: vad är det jag vill refakturera i den? Varför? Och så är det ingen annan som kan plocka upp den. Nej, man ska inte önska att det är mycket man glömmer. Alltså, har vi svarat K8-onance? Frågan var ju, har ni råkat ut för det dilemmat? Ja, eller jag har absolut haft diskussioner. Sen har jag, de senaste sju åren har jag jobbat i samma projekt och där hade vi turen att ha väldigt förstående PO. Men absolut att det ändå ibland dyker upp då man måste prioritera det mot något annat. Men en sista sak jag tänkte på kanske, för han nämnde också uppdatera paket till exempel. Mycket kan man ju faktiskt automatisera. Man kan ju ha typ så här, det pendlar bort och sånt för att uppdatera paket. då blir det ju inte lika mycket att du själv måste hitta tiden och trycka in det och så här. Nu kommer jag ihåg att jag läste någonstans i någon tråd när vi pratade om Linters att Katan sa att han hatade Linters. Jag blev chockad. Hur kan man hata Linters? Det är ju ett bra sätt att kunna undvika att man behöver göra sådana reflekteringar. Ja. Nej, men det är mycket som går att automatisera. Är det en breaking change, då får man ha... Jag vet att vissa team hos oss, där de får in breaking changes, De har en person som är ansvarig att ta hand om breaking change varje vecka. Så alla vet att vilken är Madeleine som kommer att titta på det? Ja, faktiskt. Det är rätt schysst. Men jag tänker också i allt det här så får man väl ta in lite så här, hur kritiskt är vårt system? Har du många miljoner användare och går det ner på grund av ett stavfel så är det liksom, du förlorar så extremt mycket på det. Då kanske man bör fundera. Ja, eller om det är en bank eller någonting och sånt där det kan vara jättestora implikationer om någonting händer. Jag har gjort dikter: Kommer hända fel. Men det kan nog vara skönt om det sker ett fel på grund av något stavfel. Du hade en ticket och skrev varför du gjorde det. Det kan nog kännas lite bättre ändå, att man gjorde så pass rätt att man bara kunde. hellre det än att det kommer fram att man har smugit om någonting och så har det blivit fel, då är det ju lite skämmigt, alltså då står man ju där med, ja. Ja, typ att man bypassar the policies eller folk som har en buddy som alltid godkänner en stor gest. Det måste vara ett skamvrån. Ja, man får fundera på hur viktigt ens system är. Ja. Hoppas det var en intressant diskussion i alla fall. Om inte annat så var ju dina nyheter intressanta. Absolut. Men ja, vi hörs nästa vecka då. Det gör vi. Ha det bra allihopa!