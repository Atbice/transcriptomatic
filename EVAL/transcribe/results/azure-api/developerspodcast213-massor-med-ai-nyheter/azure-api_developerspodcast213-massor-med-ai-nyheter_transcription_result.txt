Jag minns att vi hade en kuvarperson då som ibland gick i taket över det här för att det var så här, nu har du gjort massa ändringar, hur vet du att det här funkar? Och det här smögs alltid mer för kuvarpersonen. Du lyssnar på Developers, podden där du får följa med oss, Sofia och Madde, på Allt inom mjukvarutveckling. Vi träffar spännande gäster, testar nya teknologier, söker inspiration och tar upp aktuella ämnen. Nej, jag vet inte, varför har det blivit så svårt att starta podden? Vi startar så här. Vi stelar. Nej, men det är bara så här jag sliter på saker att säga känns det som. Fast vi har en massa saker att säga, men de kanske är så här rants utanför techvärlden. Eller? Ja, nej jag vet inte. Jag var så här, du bara frågar, har du något att säga? Ja, men jag hade kalas för min ettåring idag. Det är inte heller så intressant att prata om. Ska vi inte bara hoppa direkt in och tacka våra stjärnsupportrar på Patreon så sen snackar vi om vad vi ska snacka om? Jo, jo, jag måste spara luft i mina lungor för det är så mycket technyheter att så här, jag vet inte ens hur jag ska orka läsa igenom det här. Okej, men då kör vi och tar och tackar våra stjärnsupportrar på Patreon. Det är alltså de som stöttar oss med hundra kronor eller mer per månad som får sitt namn uppläst här. Och det är Alicia, Anders Nyelund, Björn Jonsson, Dag Grenell, Kajetan Kazmierczak, Lars Nyström, Molly Haglund, Oskari, Per Notby, Selim Hjorthall, Styg Hengst och Thomas Nilsson. Tack så mycket till er och tack till alla andra som stöttar oss på Patreon och på alla andra olika sätt som ni supportar oss. Ja, det var någon som köpte merch häromdagen. Blev så här glad när det droppar in lite då och då. Exakt. Och ibland ser jag någon på jobbet som har vår merch som inte går fram och skryter om det varje dag utan bara så här, ja men jag har er merch. Ja, fint. Nej men låt oss hoppa in i nyheter. Du har använt Create React App, eller hur? Jag vet ju det. Du vet ju att jag har. Men det är kanske inte alla som har gjort det. Om man är ganska ny så kanske man redan vet att man inte bör använda Create React App. Jag vet inte. Eller om man inte är frontend-utvecklare. Eller om man inte är frontend-utvecklare. Men vad ska vi säga då? Create React App var, alltså jag vet inte, för att det fanns, det kom nog precis när jag började jobba med React. Så att det kändes som en game changer, men jag vet inte hur pass mycket game changer det var. Det kom 2016. Och det tog bort mycket av krånglet med att hålla på med all boilerplate-kod för att konfigurera ett helt React-projekt. Du vet så här, webpack-configs och babel-configs. Du har väl haft projekt där ni inte har Create React App? När ni har fått hålla på med allt jox. Ja, precis. Då var det helt envisd webpack. Det var ju nice, för det är vissa saker i Create React App som inte kommer med automatiskt. Till exempel server-side-rendering och lite sånt som vi behövde i den applikationen. Men det är jobbigt att underhålla det också. Sen kan man ju ejecta sin Create React App och göra det, så man kan ju komma runt det. Ja, och då hamnar man i något helvete mellan stadies... Ja, det är nästan ännu värre. Ja, men jag minns att du har klagat på att vi skulle migrera till Webpack 5 och det tog jättelång tid. Men det tog bort mycket av helvetet som innebär att jobba med frontend. Ge er inte in i det, för det är inte så jättemycket bättre nu, ska jag säga. Jag ska börja på den ranten. Men det var i alla fall synonynt med att starta ett React-projekt. Det var självklart att... Ja, det var så man gjorde. Skulle du starta ett React-projekt, självklart använder du Create React App för att sätta upp allting. Jag ser det fortfarande idag när folk lämnar in sin kod till techintervjuer, att folk fortfarande använder det. Det är sån vana man har. Även nu? Alltså med vitt och sånt? Ja, jag tror att vissa vet inte. Vissa har inte hört om att... I alla fall, det de inte har hört om är att React-teamet slutade rekommendera det för ett tag sedan. Det blev väl så här, man slutade maintaina det projektet. Och man började rekommendera... Ja, det är det här som jag ska gå in på, som är tjafset här. Åh, alltid kul med tjafs. Ja, så det har varit tjafs.

Som du säger, create direct app har inte haft stöd för allting som är mer modern webb idag, så det är inte chockerande att det läggs ner. Men det hände ett drama under 72 timmar efter att de offentliggjorde att det verkligen ska läggas ner helt. Så jag ska sammanfatta dramat. React-teamet gjorde ett blogginlägg där de uppmanade utvecklare att överge create direct app och att man ska gå över till Next.js, React-router, eller till och med bygga ett eget ramverk från grunden. Inte rekommenderat, men det är de här sakerna du kan göra. Men jag vet att de har varit så här, men håll inte på att bygga det från grunden. Så de har väldigt så här, använd typ Next.js. Jag tror att du har sett det på hemsidan när man går in, så är det så här, använd Next.js. Är det Gats kanske de också rekommenderar. Men nästan ingen nämnde, det heter vitt, men de flesta tror jag säger vit. Folk som inte snackar franska. Någon kommer hata att vi säger vit. Hur säger du det? Jag säger vitt. Du säger vitt. Men jag har läst franska i fyra år. Next.js är mycket mer, alltså visst, det är kanske bra om du ska bygga någonting stort och robust, men det är mycket mer du får på köpet som du kanske inte behöver alltid. Ja. De gick ju till och med så långt att de anklagade React-teamet för att vara köpta av, någon som skrev så, av Big Framework. Men vadå? Vem ligger bakom Next.js egentligen? Det är ett företag som heter Vercel. Folk som kanske har hört det om det i olika sammanhang, de har ju cloud-tjänster. Ja, hosting. Exakt. De kör hosting, de bygger Next.js. Det är typ så här, nu kan jag vara ute på utvatten och så, men det är många i React-teamet som bidrar, eller som har gått in och börjat jobba i för Next.js-projektet, och vice versa. De är väldigt sammankopplade. Så det blir lite så här, det blir väldigt färgat. Jag håller faktiskt med om det. Så det här Twitter-tjafset höll på i några dagar, och det var ganska underhållande i alla fall, när man såg posterna från det. Men till slut lugnade det ner sig, och React-teamet uppdaterade sitt blogginlägg och hade lite mer balanserade, nyanserade rekommendationer, inklusive hur man kommer igång med vitt, utan att behöva byta till ett ramverk som Next.js. Så nu är freden återställd, men i alla fall, lite drama, men jag hoppas att ni har fått budskapet med er, så sluta använda Create React App, det är officiellt dött. Men alltid kul med lite drama, men det var fint att det löste sig, att de blev vänner till slut. Ja, frid och frid på jorden. Nästa grej, inte så relevant för oss utvecklare kanske, men Amazon. Alla stora företag har jobbat med AI, eller LMs släppt någonting för att vara relevanta i AI. Amazon har ju inte gjort det. Nej, men de gör ju så mycket annat. Ja, de har ju hela AVS som är typ en av de världsledande cloud providers och sånt. Behöver man verkligen doppa fingrarna i alla syltburkar? Absolut, har du Azure, AVS eller Google Cloud så hovrar du in pengar på att inte göra någonting i princip. Absolut, de har haft olika typer av LLM-tjänster i det, men de har ändå inte riktigt varit med i gamet som någon som gör...

modeller eller hur? Jag vet att de har haft Code Whisperer, men ändå, de har ju sin assistent Alexa och det är väl där man förväntar sig att någon slags utveckling ska ske och nu äntligen så har de rullat ut Alexa Plus, eller i alla fall presenterat det, jag tror att man kan sajna upp det och det finns olika erbjudanden om du har Prime eller inte. Det är väl spännande, alla de här Siri och Alexa är ju helt värdelösa, du kan ju i princip inte göra någonting förutom att typ sätta på musiken eller släcka lampan, men samtidigt med det sagt så är det miljoners miljoner människor som ändå interagerar med Alexa och säger starta musiken eller släck lampan. Så att, jag vet inte vad det kommer leda till, men det är väldigt många användare som de introducerar features för och det kanske kommer utvecklas så man kommer förstå hur folk använder det mer och mer. Men ja, som vanligt hade de en demo där de visade helt såhär exempel som är helt, det är ingen som gör såhär i verkligheten, det var typ såhär, nu kan du använda AI för att beställa en Uber åt din kompis när din kompis kommer till flygplatsen. Gud vad krångligt scenario. Alltså det enda jag vill kunna med typ Siri är, öppna min anteckning som heter handlingslista och lägg till smör när jag står med händerna fulla och bakar och inser att smöret är slut typ. Det går, men det är skitjobbigt att säga det. Ja men den fattar inte handlingslista, alltså nej, jag har i alla fall inte lyckats. Nej vi hoppas att den är bättre, men jag är väldigt trött på de här exemplarna som ingen i världen någonsin skulle göra. Folk beställer sin Uber själv, det är inte ett verkligt case, men det visar att de ger sig ändå in i det här, ja men AI-agenter, alltså försöker göra någon slags agent som alla andra håller på med. Vi får se vad som händer där. Någonting som är mer roligt för oss, Visual Studio Code, känner du till och använd kanske? Aldrig hört. Jag vet inte, det vet väl typ alla vad det är nästan, eller? Tror jag nog. Om man inte jobbar med något väldigt obskyrt språk, men det är en ID för, används kanske oftast av, alltså nu vågar inte jag säga det, det känns som att förresten JavaScript-människor använder Visual Studio Code. Alltså min sambo frågade mig när han började plugga, vad är skillnaden på Visual Studio och Visual Studio Code? Så sa jag typ såhär, Visual Studio det är typ för backend.net och Visual Studio Code är typ för frontend, alltså så om man ska hårdra det. Så hade han sagt det på sin lia och då hade de skrattat åt mig. Och typ såhär, nej det har hon absolut inte sagt. Och jag bara såhär, det tyckte jag var väldigt rimligt. För någon som är ganska ny, alltså detta var precis när han började plugga, det var väl inte så dum förklaring eller? Men vad menar de att, eller hur hade du fel? Nej jag vet inte, alltså klart du kan köra andra saker i Visual Studio Code också. Ja, men det är hemskt och det gör inte det. Nej, exakt. Nej, sign out i alla fall. Jag avskyr när folk föreslår det. Alltså, förlåt min chef, du är bäst. Men liksom, han var såhär, nej men behöver du verkligen, vad var det jag skulle ha? IntelliJ för Java. Behöver du verkligen IntelliJ? Det går ju att köra i Visual Studio Code. Och jag bara såhär, jag tänker inte sitta med ett sånt full-fledged språk när jag har en full-fledged ID och sitta i Visual Studio Code med skit-extensions. Nej, jag är benägen att hålla med. Ja, men det är för att vi är färgade av Visual Studio som har allt liksom. Okej, vi har förklarat vad det är nu på dåligt sätt och folk skrattar säkert antagligen igen. Men i alla fall, de har ett väldigt populärt tema. Man kan ha väldigt många olika teman i den här IDen som heter Material. Och det är för att man har upptäckt misstänksam kod. Så Material Theme var ett väldigt populärt tema. Det hade mer än sex miljoner användare och det är inspirerat av Googles Material Design. Men nu är det alltså helt borta. Jaha, men vadå? Alltså, teman, det är ju typ bara lite JSON. Vad kan man slänga in för farlig kod där i? Eller? Ställ inga frågor! Nej, nej, men jag bara såhär funderar. Men visst är det klart, har man ont uppsåt så kan man ju lyckas göra det med det mesta. Jag är så oh...

–skulle gilla mig. Hur skulle man kunna göra det i ett tema? –Ja, bra fråga. Jag har aldrig byggt ett tema. Någon som har byggt ett tema vet ju såklart vad det är. Men det ändrar väl inte bara... Eller ändrar man bara färg? Color, black? För det de sa var i alla fall att... För det de sa var att det fanns mycket kod som har onödiga beroenden till saker. De körde några så här child-processer i VS Code, vilket var väldigt märkligt för ett vanligt tema. Jag vet inte. Det är i alla fall borta. Då kan jag tipsa om världens bästa tema som jag använder på rubbet, och det är ju Nord. Jag tycker det är så snyggt. Ja, just det. Det använder du. Jag använder typ Sublime, nånting koffee eller något sånt där. Det är lite brunt orange, typ. Sublime associerar jag med orange i alla fall. Det är ett färgglatt tema, men det är lite så här... Det är lite mognare, skulle jag säga. Det är bara skönt för ögonen. Det är inte så skrikigt, men det är ändå färgglatt. Om någon vill så kan vi göra ett avsnitt om alla teman vi har och alla vår uppsättning och allting som vi använder. Då får ni önska det, för annars kommer jag tycka det är pinsamt. Entropic, också AI-stuff. De har släppt en ny version av sin populära LLM, version 3.7, som bygger vidare... Alltså Claude då, eller? Just den här modellen heter Sonnet. Ja, men det gör väl alla Claude? Som används... Jag vet inte om Claude är det fina namnet. Jag fattar inte. Det kanske är som... Entropic är som OpenAI, och sen har du ChatGPT som är Claude, och sen är Sonnet själva modellnamnet som typ O1. Förmodligen. Ja, förmodligen. Jag orkar inte tjejgissa i saker här, för det är alltid fel säkert. Men det låter jätterimligt. I alla fall, det har kommit en ny version av den, och just Sonnet 3.5 har ofta enligt de flesta benchmarks toppat ligan i att vara en bra kodassistent och att generera kod. Den dök upp i juli 2024, men enligt Entropic så ska 3.7 vara ännu bättre. Inte jättekonstigt att det ska vara bättre, men det ska vara bättre på kodning och specifikt frontendutveckling. Och som en del av det här så satsar man också på ett verktyg som heter Claude Code, som är en AI-agent som konkurrerar med liknande lösningar som typ Devin och andra såna här AI-verktyg. Är det bara som tycker att Claude Code inte var ett bra namn? Det tyckte jag inte alls, det ligger bara i munnen. Ja, alltså Claude överhuvudtaget. Ja, det blev lite äckligt. Äckligt? Claude Code, ja. Claude. Ja, jag vet inte. Det låter som en butler, men det är väl okej. Ja, faktiskt. Alla de låter lite så. Jag vet inte, det är ingen som har lyckats med ett produktnamn här. Gemini kanske är det minst äckliga. Vadå, är GPT äckligt? Nej, men det är bara så dåliga produktnamn. O1, eller vilken modell ska jag använda idag? O1, eller O3 Mini, eller 4O, eller... Det är så dåligt bara så här, produktpresentation. Med det sagt också, de pratar om att det är jobbigt. Du ska inte behöva sitta och välja bland sex modeller, utan de ska automatisera det. När du skriver en prompt så väljer de den bästa modellen för det du vill göra. Det vore asbra. I alla fall, den tidiga versionen, Sonnet 3.5, den blev jätteframgångsrik. De flesta IDs med generativ AI-funktioner började använda den. Men för GitHub Copilot, som du använder i Visual Studio, så dröjde det med stödet för det. Då hann andra IDs som Cursor och Windsurf plocka upp och använda det, i och med att de tillät Sonnet 3.5. Men den här gången har alla stora utvecklingsverktyg, inklusive GitHub Copilot, redan lovat stöd för 3.7. Tal om GitHub Copilot, så släpper GitHub...

Copilot sin code review funktion. Det ska bli spännande för det har du och jag pratat om. Du vet att en AI som kanske kan kolla igenom din pull request. Ja, det är ju sjukt bra. Alltså kunna ha åtminstone en första granskning innan man skickar upp den för att ha en peer. Eller hur? Jag har inte testat den och jag fick mejl precis typ tror igår att min Copilot licens har uppgraderats med den här funktionen. För vi betalar för det på jobbet. Så det ska bli jätteintressant att testa. Så vad den gör är att den ger feedback på pull requests. Typ går igenom och hittar uppenbara buggar. Den summerar ändringarna. Den föreslår vilka tester du kan ha. Den rättar stavfel. Vi såg klagade på stavfel från något avsnitt sedan. Men ja, det är jäkligt coolt. Sen tänker jag att den lär ju inte fatta kontexten särskilt bra. Alltså själva featuren du implementerar, hur det hänger ihop. Alltså det borde den ju inte kunna. Men allt annat sånt här, att det ska vara stavfel och liknande. Skriver den tester åt den också? Eller bara säger den typ så här, du borde testa detta. För det hade varit sjukt nice om den bara, du borde testa det här. Här har du ett junit test. Jag vet inte, vi får testa. Det stod bara att den föreslår tester. Så jag vet inte. Det kanske inte är bra på sånt. Ja, nej men ingen aning. Men det låter ju som ett bra tillägg. Men som du säger, den kanske inte kan skriva en bra pull request sammanfattning åt den. För att den saknar kontext. Det blir kanske så här, jag har ändrat detta, jag har ändrat detta. Okej, men det är inte intressant om jag inte vet varför du har ändrat detta. Eller så är man för dålig på att använda en bra domänspråk. Ja, det är ju också ett. Kan man känna att man borde bli bättre på det. Ja, och vidare till Google. Vi måste ju nämna alla stora aktörer, eller hur, innan vi är klara. Google släpper sin kodassistent Gemini Code Assist gratis för privatpersoner. Tidigare så kostade den 22,8 dollar i månaden. Otroligt. Specifikt. De hoppas väl på att råka in fler användare. Det här har de gjort med alla sina AI-verktyg. Först så ville de att alla skulle betala för det, men ingen ville betala för det. Så nu försöker de tvinga oss att använda det i alla appar istället. För att nu har de så här, okej, ingen vill betala för det, vi vill ju ha folks data. Så låt oss bara tvinga dem att använda det, typ släppa det fritt. Ja, som sagt, jag vet inte hur många gånger man har hört det här, men om någonting är gratis så betalar du ändå någonting. Och oftast är det din data. Exakt. Ja, nej men så vi får se om de hinner i kapp Copilot och Cursor då. För företag kostar Gemini Code Assist fortfarande dock 54 dollar i månaden. Det är ganska dyrt. Ja. Eller vad kostar Copilot? För företag vet jag faktiskt inte. Det är antagligen också dyrare, för det är typ så här, din data processas bara på en dedikerad server som de inte har tillgång till. De får inte träna på din data, så där förstår jag att man får betala. Eller har vänta, nej men här står det. Jag vet inte, det här är ju priser i dollar, det kan ju vara annorlunda på vår marknad. Men här står det att Gemini Code Assist kostar 54 och GitHub Copilot Enterprise kostar 39 dollar. Så den är dyrare. Men ja, det var nyheterna. Tack för den här genomgången. Väldigt bra påläst, jag slipper läsa nyheter. Varsågod. Jag kommer tänka på, vi borde tagit upp någonting om allting som har varit med Firefox. Har du hört någonting om det? Ja, men jag orkar inte prata mer. Nej. Jag dricker vatten så får du berätta. Jag har inte alls förberett någonting, men jag har läst lite om det. De har uppdaterat sina terms and conditions nu. Första versionen sa ju mer eller mindre att vi kommer samla in all data du matar in i inputfält eller i vad du skriver och vad du surfar i rubbet. De ska förmodligen också göra någon form av AI-träning eller något kan jag gissa. De har blivit uppköpta också. Folk har slagit bak ut nu och letar efter alternativa browsers. Det finns ju typ LibreWolf som är en fork av Firefox. Om man nu vill fortsätta.

Firefox, men inte sälja ut sin själ. Sen finns det ju massa andra alternativ. Är man fin med att köra på Chromium så förespråkar ju både du och jag Ark. Och det finns ju tusentals alternativ. Brave och massa obskyra alternativ som jag knappt ens har hört talas om. Ja, men det där är tråkigt för jag har inte hört om att de erbjuder att du kan betala någonting och få slippa undan det. Jag förstår att folk behöver tjäna pengar. Och som privatperson, jag vill inte heller betala 200 spänn för att använda en browser. Men att de kunde ha haft en modell så här betala, jag vet inte, 20 spänn i månaden. Så hade nog väldigt många gjort det. Ja, kanske. Jag hörde, jag vet inte, jag har inte faktagranskat detta nu, men att en stor anledning att de har mindre pengar är för att Google har slutat supporta dem. Google har ju supportat ganska många browsers mot att då få ha Google som default sökmotor. Och nu när de inte längre får göra det, i och med de här lagarna som har trätt i kraft. Så det är ju som har förstört det här. Skiter de i att supporta, för då får de inte ut någonting av det. Okej, så det är vårat fel, européerna. Ja, exakt, skyld på det. Okej, ja men då ska jag inte säga något. Fan vad de måste vara trötta på oss i USA. Vi fick ju en lyssnafråga också som vi kan ta och bränna av kanske. Jag tänker den är inte så jättelång. Det är från vår vän Kajetan Kazmierczak, vars namn jag har hört många gånger. Han frågar så här. Hur löser man bäst konflikten mellan att vara lite av en scout och alltid lämna koden i bättre skick än när man fann den? Det vill säga fixa eventuella småsaker när man ser dem, uppdatera paket, fixa felstavningar och så vidare. Och att bara sticklösa det som finns i en Jira-ticket och inget annat. Flera arbetsplatser har, fullt förståeligt kanske, en policy om att en PR endast får innehålla lösningen på en feature eller bugg och inget annat. Samtidigt vill man ju inte att koden ska förfalla för att det inte finns tickets i Jira för något litet man precis har hittat. Och att skapa en ticket, få den prioriterad och kanske få återkomma till den senare är ju rätt omständigt om det handlar om till exempel namnet på en lokal variabel som är felstat. Har ni råkat ut för det dilemmat? Alltså, det jag bara reagerade först på var att flera arbetsplatser har en policy där en PR endast får innehålla lösningen och ingenting annat. Jag har aldrig varit med om det. Inte jag heller faktiskt. Jag har inte hört det som att det skulle vara ett problem på det sättet att man bara får göra det. Sen kan jag ju förstå att man inte vill trycka in hur mycket som helst, man får ju ha lite sunt förnuft. Men ibland blir det att man måste lägga ihop vissa saker. Det har jag i alla fall gjort mig skyldig till. Ja, definitivt var det med att folk diskuterar det här i ett tid, men aldrig att det har funnits en strikt policy. Jag tycker bara det låter helt sjukt att man ska behöva göra en ticket av det och få den prioriterad och att den ska gå igenom hela den här ordnarprocessen. Det känns som någonting man borde diskutera fram, kanske någonting att ta upp på ett retro och säga det här, att jag vill kunna lösa små saker. För att jag är helt med på det här scout-tänket, jag tycker det är klockrent. Ser man någonting som bör fixas, om det bara är ett stavfel eller någon lintgrej som har blivit fel eller någonting, då har jag bara gjort det i samma PR, om det är relaterat till det här kontextet. Men om man ser att det kanske är en funktion som skulle behöva refaktoreras för att den är lite otydlig, man kanske vill bryta upp det jättelånga till lite olika variabler och sånt, då kanske det är mer okej. Kanske ska göra det lite eget, men då hade jag ändå bara gjort det i en egen PR och inte skickat in den samtidigt. Ja, det är väl här det kan bli köff så att man är oense. Jag tycker att man ska städa upp när det är ett stavfel, men jag förstår absolut problematiken att du behöver refaktorerare i en funktion, eller du ändrar en massa stavfel. Du ändrar saker som känns små, men i och med att den här koden inte har tester så kan du faktiskt introducera något.

stavfel och det liksom upptäcks inte förrän du har tryckt ut det. Det skulle ju kunna vara till exempel om man använder så här magic strings. Istället för att du har en konstant eller någonting i din enum så jämför du ett strängvärde. Och så har du ju plötsligt bytt strängvärdet. Och det är ju mycket lättare att detta trillar mellan stolarna om man bara gör det lite under radarn. Det blir ingen spårbarhet om du inte har en ticket att koppla dig till på det sättet. Nej, för jag har jobbat med en utvecklare som jag har väldigt stor respekt för, men som var väldigt snabb och typ så här upptäckte att shit, det här behöver göras om. För att man behöver underhålla sin kod. Man ser en halvt år senare och bara, men vad fan är det jag har skrivit? Men som kände att det var en bra idé att passa på och kanske gjorde en till PR då ens. Försökte vara ändå så här noga att det skulle vara lätt att code reviewa. Men jag minns att vi hade en QA-person då som ibland gick i taket över det här. För att det var så här, nu har du ju gjort massa ändringar. Hur vet du att det här funkar? Och det här smög sig alltid mer lite för QA-personen. För att den här utvecklaren visste ju att QA-personen skulle frågas. Och så var det också störigt för vissa, som utvecklare, ibland kom det en väldigt stor band. Nej men det här är bara en refakturering, jag bara liksom gör om hela strukturen. Jag gör det mer kanske funktionellt, eller jag vill inte att det ska vara funktionellt för det är så svårläst. Och då att sitta och granska det som kollega utan en ticket. Alltså det var ändå så här, det kunde vara svårt. Ja men det känns som en lite större grej. Man kanske kan ha någon slags, är det mer än två minuters jobb att implementera och mer än femton minuter att testa? Ja då får det bli en ticket av det. Sen vet jag inte, jag har ändå varit Scrum Master och jag skulle inte bli ett sur om någon utvecklare la upp en ticket och bara drog in den i typ developing och körde. Ja det tycker jag också är nice. Det låter som om det är en bromskloss att man ska sitta och prioritera upp det och så vidare. Och sen prioriteras det inte upp och så glömmer man bort den. Ja. Så om det ändå är så litet att man gör det i samband så bara köra liksom. Ja, enda gången jag skulle vilja lägga det i någon prio backlog är om det är ett större arbete. Ja om det är en dags arbete eller en halvdag ens, då snackar vi liksom, nej då kan du inte bara smyga in den lite sådär. Ja precis, för då sitter du ändå och har prioriterat ner någonting annat. Man behöver ändå vara transparent mot alla i teamet och ha respekt för PON vars ansvar är att se till att det mest prioriterade jobbas på. Det är säkert helt okej för PON, men man behöver lyfta det och prata om det. Det kan vara sjukt störande som utvecklare, men ni måste göra det här, det går ganska snabbt, det tar bara en halv dag. Men de vill ändå ha lite koll och förstå vad som händer och varför ni lägger tid på det här. Ofta brukar man ju lägga in lite padding för typ maintenance tasks och sånt. När man gör sprint planning och sånt. Så jag tycker ändå att utrymmet borde finnas där. Det håller vi om. Vad tror du, vad säger du? Jag känner igen ett scenario och det är så här, det här stör mig faktiskt väldigt mycket bland saker som stör mig. Jag borde skriva upp det här någonstans så att vi kan göra ett avsnitt om saker som stör mig med andra utvecklare. Säg att det tar 20% av din sprint tid att göra det här, eller ens 50. Och så säger vi att det här tar lite längre tid, är det lugnt att vi lägger in det här backloggen? Och den här utvecklaren säger nej, jag vill göra det nu. Eller säger, det här kommer inte ta så lång tid. Så det de gör istället är att de tycker att det här är rätt roligt arbete. Så de sätter sig på kvällen och gör det här. Okej. Och påstår sen, jag vet inte om du har varit med om det här, men jag har varit med om det flera gånger från olika personer. Det är så roligt att de gör det på kvällen. Men det är ändå någon som ska jobba med detta sen och testa det. Granska det. De personerna är ofta så här, nej men det är inga problem för någon. Och jag har suttit och gjort det här själv, och hur kan inte alla bara vara tacksamma att jag sitter och gör det här på min fritid? Men jag vill inte ha det så, jag vill inte att det sitter folk och kodar.

Koda hela nätterna, jag har väl gjort det någon gång så här, men då försöker jag liksom, jag vill inte att folk ska se att jag har gjort det. Det ska inte stressa teamet att här sitter någon och kodar på kvällarna av intresse. Du har hållit på med ett hobbyprojekt då. Det stör mig, och definitivt har vi folk som lyssnar som gör så här. Jag tror jag har gjort så någon gång också. Jag känner mig lite smått träffad. Jag är träffad själv också någon gång, men det finns vissa som är väldigt så, alltså med större grejer, att de inte förstår att det är stort och de insisterar på, du vet, de låter inte den här pull-requesten vara i draft. För det är fine, gör det på kvällen, lägg upp en pull-request och skapa en ticket, lugna ner folk, alltså preppa dem lite. Jag vet att det är störigt, men gör det här lilla extraarbetet för folk, så att du inte bara trycker in saker. Åtminstone det, ja. Någonting, ja, bara kommunikation typ. Men ja, vad ville du säga? Jag skulle säga, tror du det är en bra idé att man har någon generell förbättringsticket, som man kan koppla till och att man då, från de flesta verktygen så kan du ändå skriva en kommentar till, alltså kopplingen till din ticket från din PR. För då löser man ju lite det här att man måste gå in och du ska skapa en ticket, det är ändå lite extra overhead som blir ganska mycket om du bara ska fixa något litet stavfel eller liknande. Eller blir det bara en slasktratt? Nej, alltså stavfel absolut, samma pull request. Alltså, som sagt, när det inte är farliga stavfel, att man ändå råkar ta sönder något. Jag tycker det ska vara refakturering i PR-en, men jättegärna att det är en egen commit. Det här har jag gjort arbetet och här har jag städat upp. Absolut, men pratar om att man kunde ha en ticket som är generell, som du kopplar till. Som bara slasktrattar allting? Ja, men typ. Alltså det här är denna sprintens förbättringsticket. Hit kan du koppla små grejer. Jag vet inte själv om jag gillade riktigt nämligen, men jag funderar på att det skulle kunna vara en lösning. Ja, men är det så smått, då tycker jag det ska vara kopplat till, då kan det ändå vara på den original-ticketen. Men absolut, är det någonting så här, så råkade jag se en helt annan fil, att det var någonting. Ja, jag vet inte. Ena sidan blir så här, men gud vad bajsnödig man ska vara. Man kan ju inte ens fixa någonting litet utan att man ska skapa en ticket. Men om andra sidan är det inte så jobbigt att göra det. Bara klicka på plus och skriva en titel och varför man fixade typ. Det beror på hur mycket du ska skriva. Vissa är ju superstrikt att du ska skriva liksom, given when, then och typ as a developer. Nej, det är det man inte ska skriva, as a developer. As a customer you want to bla bla bla bla. Refactor the system liksom. Det är det som liksom... Det är bajsnödigt. Nej, det får man inte göra. Nej, men vad vi har i våra team och det jag har haft i andra team är att vi har en feature eller epic i Jira som heter typ technical improvements, ideas. Och kommer du på någonting så kan du lägga in en task där. Ja, för framtida grejer. Eller så när du ser någonting nu, nu, nu så har du en feature att lägga den under liksom. Ja, så hade vi också mitt senaste team. Där kunde det vara verkligen huggt och lågt. Ja, man måste rensa ut de här också, jag har märkt. För ibland ligger det bara saker som ingen någonsin tar upp. Men jag tycker det är schysst att skriva en rad så här, för det är för en själv. Man själv minns inte, jag har skapat den här tickeln för ett halvt år sedan. Och det finns bara en titel som är så här refactor bla bla bla service. Och så bara, men vad är det jag vill refaktorera i då? Varför? Och så är det ingen annan som kan plocka upp den. Nej, man ska inte önska att det är mycket man glömmer. Alltså har vi svarat Kate Annes? Frågan var ju, har ni råkat ut för det dilemmat? Ja, eller jag har absolut haft det i skolan. Jo, de senaste sju åren har jag jobbat i samma projekt. Och där var vi tyren att ha väldigt förstående PO. Men absolut att det ändå ibland dyker upp då man måste...

Hoppa till er det mot något annat. Men den sista saken jag tänkte på kanske, för han nämnde ju också uppdatera paket till exempel. Mycket kan man ju faktiskt automatisera. Man kan ju ha typ så här, det pendlar bort och sånt för att uppdatera paket. Då blir det ju inte lika mycket att du själv måste hitta tiden och trycka in det. Nu kom jag ihåg att jag läste någonstans i någon tråd när vi pratade om linters att Keitan sa att han hatade linters. Jag blev så här chockad, hur kan man hata linters? Det är ju ett bra sätt att kunna undvika att man behöver göra sådana refaktureringar. Ja, men det är mycket som går att automatisera. Är det en breaking change, ja men då får man ha, jag vet att vissa team hos oss där de får in breaking changes, de har typ en person som är ansvarig att ta hand om breaking change varje vecka så att alla vet att den här veckan är det Madeleine som kommer. Breaking change duty. Ja, faktiskt. Men det är skysst. Men jag tänker också, i allt det här så får man väl ta in lite så här, hur kritiskt är vårat system? Alltså har du många miljoner användare och att gå det ner på grund av ett stavfel så är det liksom, du förlorar så extremt mycket på det. Så kanske man bör fundera på att ha lite hängare. Eller någonting liksom och sånt där, det kan vara jättestora implikationer om någonting händer. Ja, andra kritiska system. Det kommer hända fel, men det kan nog vara skönt om det sker ett fel på grund av något stavfel man gjorde. Du hade en ticket att du skrev varför du gjorde det. Det kan nog kännas lite bättre ändå, att man gjorde så pass bara rätt att man bara kunde. Hellre det än att det kommer fram att man har smugit om någonting och så har det blivit fel. Då är det ju lite skämmigt. Alltså då står man ju där med, ja. Typ att man bypassade policies eller folk som är så här, du vet, har en buddy som alltid godkänner eller är en skönsköst. Så är skambron. Ja, men man får fundera på hur viktigt ens system är. Hoppas det var en intressant diskussion i alla fall. Om inte annat så var ju dina nyheter intressanta. Absolut. Men ja, vi hörs nästa vecka då. Det gör vi. Ha det bra allihopa. Hej då. Undertexter från Amara.org-gemenskapen