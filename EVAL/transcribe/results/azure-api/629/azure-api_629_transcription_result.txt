Jag tror verkligen att om du knappar runt i det du utvecklar lokalt med tangentbordet och ser till att du kan komma åt allting, du kan fylla i allting och öppnas någon modal eller någonting så sitter fokus rätt och du hamnar inte plötsligt bakom modalen. När den stängs så är du kvar där du var, du behöver inte navigera genom hela irålet igen och att bara kunna slå igång en skärmläsare i 45 sekunder och bara liksom, det känns som att det är make or sense för mig då är det förmodligen hyfsat sense för andra. Målet är inte att man ska täcka 100% av alla problem som kan uppstå utan det är bara att få de lågt hängande frukterna helt enkelt utan att behöva göra det separat. Gör man det redan i den lokala utvecklingen då kanske majoriteten av det som finns inom en läskig lång kravlista som är två kilometer lång, då kanske majoriteten av det är redan löst. Hej och välkommen till KodSnack. Jag heter Fredrik som vanligt och idag har jag med mig Johan. Hej Johan, vem är du, vad gör du? Jag är en utvecklare som jobbar på SBAB till vardags. Där sitter jag sedan relativt nyligen i ett nystartat designsystemteam. Jag har varit där i ett antal år nu. Jag tror att vi är inne på det sjunde året. Jag har gjort lite annat under min tid, jag tror att det är mitt tredje team. Eller jag vet att det är mitt tredje team. Men ja, precis. Så det är lite det som vi sitter med och vi jobbar ganska mycket också med tillgänglighet. För det kommer ju ett nytt tillgänglighetskrav eller tillgänglighetsdirektiv just nu. Så det tar upp väldigt mycket av inte bara vår uppmärksamhet utan hela utvecklingsorganisationens egentligen. Ja, så ni har ett designsystemteam nu, var det så? Hur kom du till det? Har du varit inne på designspåret och kommit in på det här teamet eller kommit från något annat spännande håll? Jag har väl varit intresserad av designspåret lite grann. En gång i tiden för 15 år sedan så tror jag att jag trädde in i utvecklingsvärlden ifrån att ha lekt lite grann med design. Det ligger någonstans i ryggmärgen även om jag inte är en designer eller UXare på det sättet. Men jag tycker ju att i de allra flesta tillfällen så tycker jag att den tekniska biten är det mest intressanta. Men lite bakgrund kring det är att vi har ju på jobbet och så är vi väl just nu så är vi cirka 20-25 stycken utvecklingsteam. Jag har fått lite siffror här. 135 stycken utvecklare och testare där jag tror att... Så det är ett par stycken? Ja, och jag vet inte men majoriteten är ju utvecklare då. Och vi sitter och jobbar på lite olika sätt och det ändrar ju sig lite över tid också. Men man jobbar ju ganska autonomt och man jobbar i ganska många olika appar. Vi har haft lite olika sätt hur vi liksom levererar front-end-applikationer både internt och externt till privata kunder, företagskunder och allting sånt. Och det har varit väldigt många appar. De har ju en tendens att liksom bli lite utdaterade. Och man kanske kopierar en lösning som man gjorde där och sen så klistrar man in det i den nya appen och ser man ändringarna där och så blir det ju inkonsekvent till slut. Så det var väl egentligen så det började. Ja, 2018, hur många år sedan det nu är? Det börjar ju bli... Ja, det är väl typ sju år sedan. Ja, precis. Jag skulle säga tre. Ja, jag skulle också säga tre. Allt efter mars 2020 är ju ändå samma år. Ja, men exakt, exakt. Nej, men så då började vi lite inofficiellt helt enkelt. Ett gäng utvecklare som satte lite olika utvecklingsteam. Vi lyckades få att vi kunde sitta typ en eftermiddag i veckan eller något sånt då. Ja, men ta det och programmera lite grann. Rent från allas eget intresse så att säga. Ja, man hade ju sett det här behovet liksom. Och sen så tror jag att sedan dess så har vår design- och UX-avdelning också växt ganska rejält. Men på den tiden så var det inte lika många. Men vi hade ju ändå rätt nära dialog med dem och de såg ju om några det här problemet. Det kändes ju verkligen som att det finns ingen röd tråd någonstans. Nej, just det. Nej, men så då började vi liksom bara se så här men vad är det vanligaste? För vi har ju inte heller fått någon commitment på att underhålla det här enligt något strukturerat. Nej, just det. Så då blev det så här, men väldigt mycket handlar om formulär. Vi ska samla in data i ansökningsflöden och man ska göra överföringar och allt vad man nu gör. Så vi började i den änden egentligen och bara försöka liksom så här vi vet inte nödvändigtvis vad som är rätt, vad som ser rätt ut. Men det viktigaste är kanske att det ser likadant ut. Ja, vi gjorde ju ett litet bibliotek egentligen som vi distribuerade med en intern från en NPM registry. Och sen så visste vi ju då att det kan ju, om vi fokuserar mer på API och inte tänker så mycket på att skylta med några detaljer kring luckenfil så kan vi ju ändå ganska flexibelt uppdatera det över tid när vi vet mer om vad som är rätt visuellt. Så det var så det började och det har ju egentligen hållit på så sedan dess fram till Q2 2020.

Så första april där i krokarna så satte vi officiellt igång ett team. Men det här projektet har ju levt, eller projekt, jag vet inte vad man ska kalla det. Det har ju levt lite inofficiellt. Så periodvis har man hunnit jobba lite mer på det och periodvis har man inte hunnit jobba någonting alls på det. Men det har ändå varit i användning hos ett antal team sedan 2018. Så det var helt enkelt ett NPM-paket med UI-komponenter då? Ja, exakt. Ganska begränsad dokumentation i omslutning till det. Sättet som det skiljer sig idag är ju att det är ett helhetsgrepp mer kring. Designsystem omfattar ju mer än bara kod och design egentligen också. Man kan ju dra det till att det kan handla om copywriting, bildmaner och alla möjliga grejer. Och det där har vi ju inte riktigt en lösning för ännu. Men på sikt så hoppas vi att vi ska kunna centralisera det. Även om vi inte själva står för innehållet nödvändigtvis så ska man inte behöva liksom, ja men vart finns det här? Finns i sjön typ. Och så får man leta upp det utan att man mer kanske kan ha en samlingsplats där man hittar både dokumentation och relevant information som utvecklare och designer. Men man kanske kan hitta till relaterade resurser också, även om inte de är skrivna där. Ja, för det var en sån intressant grej kände jag när jag började fundera inför vårt snack. Just det där med hur stort eller litet paraply är ordet designsystem? Det känns som att på ett sätt så kan det bli hur brett som helst nästan. Och det finns väldigt mycket nyttigt som man kan baka in under det där. Som du säger, hur skriver man text? Det är kanske inte det första man tänker på men det är ändå onekligen en grej som dyker upp när det gäller att få saker att se ut och kännas på samma sätt över en massa olika saker man bygger. Ja, och jag tror att du och jag jobbar ju på relativt liknande utmaningar. Bygger en del användarupplevelser i fronten applikationer. Ja men precis, och ett helt gäng team som gör saker som i en ideal värld skulle nog se ut och fungera ganska exakt likadant i många fall. Inte alla, men många. Nej men just det här med copy till exempel, det känns ju som att det beror lite på. Jag tror att en intressant grej som vi kanske kan komma in på är hur vi arbetar och samarbetar med vår UX- och designavdelning nu och de som är faktiskt dedikerade resurser i vårat nya team. Men historiskt så känns det som att det inte är helt ovanligt att det blir lite vattenfalligt. Vi kanske sitter i en pipeline där man har så mycket i pipelinen att utvecklarna sitter helt fokuserade på det. Och då blir det lite så att affärsanalytiker och UXare kanske då springer före på nästa grej. Och så blir det lite mer av en överlämning än vad man kanske skulle önska alla gånger. Och då är det ju ganska klassiskt att man till exempel säger, men vad händer om det blir fel då? Och om man nu försöker skicka in det här och det inte funkar för någon downstreamtjänst där nere. Då är det ganska vanligt att man inte nödvändigtvis har tänkt på det i en designleverans. Och då är det ju jättevärdefullt att ha lite riktlinjer kring det och att vi kan försöka hjälpa till att det ändå blir konsekvent. Och att man behöver inte vara expert på copywriting utan man kan bara hitta lite resurser. Och sen räcker det kanske en bra bit på vägen. Men jag tror att man kan fånga en del lågt hängande frukt där på att vi kommer framåt utan att vi behöver fråga någon annan avdelning hjälp. Ja, det är jätteintressant att utmana det här med kommunikationen och de här flödena och få saker gjorda och ta tid. Som du sa precis i början där, det är väldigt lätt att man hamnar i det där läget att ibland blir det lite gjort och sen går det en jättelång period och ingenting händer för att man har sjutton andra saker som kanske både är och framförallt bedöms som viktigare just då. Ja, och det kanske man, alltså nu, vi har ju hållit på med det här nu. Vi konstaterade att det var mer än tre år. Det känns som att få ett commitment på att kunna göra det här också. Där har ju det här tillgänglighetsdirektivet varit. Det var ju lite det som fick skjuts i den prioriteringen. För det är ju också så att det är en av våra stora fokusområden är ju just tillgänglighet och försöka dels baka in tillgänglighet där vi kan. Om det är då i vårat komponentbibliotek. Sen finns det ju delar av tillgängligheten om hur ett helt flöde hänger ihop som är svårt att bara automatisera. Men det är ju en av de grejerna som jag tror fick organisationen att liksom gå med på att nu startar vi ett team kring det. Jag har nog personligen velat ha ett team kring det i alla de här åren nu. Men nu har det egentligen skett. För det är ju så att tillgänglighet är ju viktigt. Men jag vet inte, man har kanske inte riktigt insett det. Eller att man har tänkt att det är viktigt. Men det måste ju också konkurrera med andra projekt. Och då finns det ju liksom i bankvärlden så är det ju massa regulatoriska grejer. Och det är kanske stora systembyten. Och då är det ju ibland svårt. Ja, men det här är viktigt. Men tyvärr, vi hinner inte. Nej, precis. Det är fortfarande bara näst viktigast. Ja, men exakt.

Jag tror att drivet av vår UX-avdelning har skrivit ner lite siffror och information. 2019 började vi jobba lite mer dedikerat med tillgänglighet. Då har vi samarbetspartners som är experter på det som kommer in och hjälper oss och så gör man en typ av analys och översyn över våra flöden. Men då blev det lite mer punktinsatser. Jag tror inte vi lärde oss tillräckligt mycket för att ta det vidare nödvändigtvis. Man gjorde någon review och så åtgärdade man lite fel där. Men jag tror inte vi lärde oss mindsetet hur vi ska utveckla tillgängligt. Det drevs nog mest av enskilda individer, typ eldsjälar i de olika teamen. Så det vi försöker göra nu tillsammans med det här projektet som drivs parallellt som är tillgänglighetsprojektet egentligen, det är att försöka få lite mer långsiktighet i det och inte se det som ett projekt som tar slut utan att vi måste få in det i vårt arbetssätt mer. Ja, precis. Själva teamet för designsystemet, hur stort är det ungefär? Ja, just nu är vi två, eller just nu, vi har samma uppställning sedan start. Två utvecklare är vi som har varit med och inofficiellt petat på det här, det som fanns innan. Och sen så är vi faktiskt, vi är typ tre UXare. En av våra UXare är ju en fulltidsresurs som är fokuserad på designsystemet. Två av dem har lite andra åtaganden också. Sen är vi en produktägare och det tillkom i samband med att vi startade teamet och tycker jag är kanon. För man är inte nödvändigtvis alltid så bra på det som utvecklare kanske. Nej, men det är ju det, det är ju det. Man märker skillnaden när man har en bra produktägare på plats. Jaha, oj vad mycket mer rakt på sak. Och liksom tydligt vissa grejer blev plötsligt. Ja, exakt. Och bara liksom att vi håller rätt riktning och inte, ja. För jag menar som utvecklare, du känner ju, du kanske likadant, men att det är ganska lätt att ramla ner i lite så här kaninhål ibland. Jo, jag har gjort det en gång kanske. Ja, jag har nog också kanske gjort det en eller två gånger kanske. Men, och sen en teamchef har vi. Så vi är väl, ja vad blir det? Typ fem. Ja, fem, sju. Nej men så, och det funkar ganska, det är ganska roligt för eftersom att det är ett nystartat team och vi har ju inte, vi har ju kvar det här som hade tagits fram inofficiellt innan, men vi har ju inte så mycket legacy. Utan det är ju väldigt mycket liksom, det är ju väldigt mycket greenfield egentligen. Och man får ta reda på ganska intressanta grejer. Ja men vi vet ju att vi vill göra underlätta för våra utvecklare och designkollegor framförallt. Och det övergripande målet handlar väl om att vi vill bidra till att det blir effektivare produktutveckling. Sen så vill vi ju göra den här gamla, det som startade initiativet från början, att se till att det blir en konsekvent användarupplevelse och att vi liksom följer våran branding. Och att det ska bli lätt att göra rätt på det. Och sen är det ju då tillgänglighet som är. Men det som är intressant är ju att vi har ju fått, ja men vi har ju fått liksom upptäcka hur ska vi jobba i den här konstellationen och med den här produkten. För det blir ju en intern produkt. Ja visst. Och det är ju väldigt kul eftersom att du har ju dina slutanvändare in till dig. Ja. Så det är väldigt mycket feedback. Men då har vi ju liksom fått så här prova oss framåt. Vi jobbar lite grann i kvartal då. Och det känns som att vi provar ett arbetssätt och sen så behåller vi det som känns bra in i nästa kvartal. Och så kanske vi skruvar på något annat. Ja just det. Men på senaste kvartalen så har vi i alla fall, vi jobbar i två stycken arbetsmöten per vecka. Där vi försöker alltså sitta hands on och jobba tillsammans både utvecklarna och UX-arna. Och det gör ju att det här samarbetet blir mycket tätare än vad det var i åtminstone de teamen jag var med innan. Och då känns det som att man kan ta vissa beslut som träffar både våran kodbas och i det här fallet Figma då. Och det känns som att det har varit väldigt värdefullt. Men ja, så ser teamet ut. Ja, just det. Och det är så ni jobbar med arbetsmöten. Två stycken och sen så jobbar man mer på varsitt håll resten av... Ja, jag tror att det är lite, det är ju lite speglar väl hur utvecklingsteamen jobbar också. Nu har ju jag, vi jobbar ju inte med de vanliga produkterna på samma sätt så jag har väl, kan väl inte svara exakt för hur genomsnittsupplevelsen är för våra utvecklingsteam. Men man är ju autonoma, så man får ju liksom, vi vill ju jobba agilt. Och så alla team har väl i princip sin egen twist på vad det innebär med ceremonier. Vissa kör någon kanban-variant och andra kör sprintar och ja. Ja men visst, det finns alla. Vad som passar just det teamet känner jag igen också. Ja men precis. Men vad liksom äger eller...

Driver eller kontrollerar era team kontra andra team? Jag tänker så här, att ni gör en del komponenter förstår jag ju. Här kommer en standardkomponent för att göra den här saken. Blir det då att man drar in nya komponenter som tillhörde inom situationstecken ett annat team förut? Hur funkar flödet mellan er och övriga team? Dels så fanns det ju ett antal komponenter som vi då förvaltar vidare och vidareutvecklar. Och det andra handlar ju om att försöka snappa upp vilka behov vi har och att inte nödvändigtvis komma ihåg allt för långt fram i tid utan att försöka vara lyhörda och snabb rörliga. Men komponenter är väl en ganska central del i det. Vi har fokats ganska mycket på dokumentationen kring det också. Jag tycker personligen lite att det är lite en first class citizen i den leveransen också. Så att det inte bara finns en hink med komponenter. Varsågod, let's figure it out. Utan att man försöker ha det i åtanke. Och i och med det så får vi bygga vår egen pipeline med hur vi levererar vår produkt. Vår produkt består ju på koden av typ bibliotek som man lyfter in via NPM. Och sen så består den i tillägg av dokumentation. Och det har ju också varit en annan lite kul grej för det har inte nödvändigtvis funnits en färdig pipeline för det. De andra teamen har inte riktigt haft det behovet. Så där har man ju fått vara med och bygga upp det enligt de behoven man har. Och det blir lite andra saker att tänka på där med att det här ska ju versionshanteras. Och versionshanteringen är ju någonting som är väldigt viktig för att säkerställa att det blir stabilt i längden. Vi försöker ju förhålla oss till semantisk versionshantering och att man ska kunna lita på att saker och ting funkar. Och om någonting har breakats så ska man få reda på det och kunna ta hänsyn till det. Men annars så är det ju, jag tror att det där är också lite grann i rörelse. Vad är det vi kommer att äga som team? Vad är våra produkter egentligen? Och det finns ju ganska mycket material som är utspritt på någon kunskapsbank här och sen så finns det något externt CMS där för något ändamål. Så jag tror i nuläget så är det mycket fokus på tillgänglighet. Så jag tycker att det är lite intressant och spännande att jag vet inte riktigt exakt hur det kommer se ut. Jag tror att vi kommer försöka se till att lyssna på våra användare och forma det därefter. Det är väl då det blir bäst också. Ja, och tillgängligheten, om vi ska gå in lite mer i detalj på det, så är det ju för de som eventuellt inte vet det då så är det ju ett ny lag. Så den trädde vi i kraft den 28 juni. Och det här vet jag att de som har varit drivande, de har ju sagt det, ja men förr eller senare så dyker det där datumet upp. För fem år sedan så kändes det som jättelugnt. Ja, precis. Men nu är det ju all hands on deck för att se till att vi liksom... Och det är väl en, man kan väl säga att det är väl en vidare utveckling av de lagkraven som redan gäller för offentlig sektor. Så man har varit inne på myndigheter och sjukvård och sådär så har ju de redan mycket av de här kraven. Och nu utökas det till att gälla privata aktörer också. Ja, okej. Så från visst håll kan man se det som en breddning av någonting som redan fanns. Ja. Och sen är det väl, det är också en gräns, alltså vilka som omfattas är också lite, det är lite luddigt. Och här vill jag brasklappa lite grann också. Jag har ju försökt, liksom känner att jag har någorlunda koll på det här. Men det känns som att när det gäller alla de här, bara ta av det jag säger men det är pass allt. Jag påstår att så här funkar det och sen så kanske jag har missat någon paragraf. Precis, allt det här är vår uppfattning utifrån det som vi har hört och sett och sådär. Vi är inte lagtolkare. Nej, jag har försökt koka ner det till, så här pragmatiskt, vad är det som gäller? Men ja, så nu är det ju ett antal typer av tjänster egentligen som omfattas av det här. Och det kommer ju på sikt att utökas till flera. Så träffas man inte av det här i nuläget så kommer man säkerligen att göra det inom relativt snar framtid. Och det betyder i praktiken att det finns ju en europeisk standard som är tillgänglig och inkluderande i EU. Och en av aspekterna, de allmänna kraven som man omfattas av, det är ju de här VCAG som är någon sorts spes för, som spesar upp så här, det ska funka så här, helt enkelt. Och färgkontraster och allt vad det är. Sen finns det lite branschspecifika krav som beroende på om man är för bransch så kan det vara extra saker som man måste tänka på. I vårt fall då som bank så omfattas vi av begripligt språk. Och det betyder ju att det ska vara lätt att ta till sig innehållet. Det ska åtminstone finnas möjlighet att om någonting står på massa facktermer och så så ska man ju också kunna se det på något sätt som går att begripa även om man inte nödvändigtvis är i finans.

Det är ju faktiskt ett underbart krav. Ja, jag tycker det också. Sen är det ju så att de bästa lösningarna för det här är ju lika tillgängliga för alla. Så att det inte blir så här någonting man bara lägger lager på lager. Vill du ha lite mer tillgänglighet får du slå på det här läget. Och sen är det lite administrativa krav. Så omfattas man av det här direktivet så måste man också arbeta med dokumentation och rapportera sina tillgänglighetsbrister. Och då finns det någonting som kallas för en tillgänglighetsredogörelse som man behöver ha då. Och det är typ en listning någonstans på sin sida som hålls uppdaterad på det här är de bristerna som finns. Typ förklara varför och länka om det finns något mer tillgängligt alternativ och lite sånt där då. Och sen tror jag också att man behöver nog ha en kommentarsfunktion så att användare av din tjänst ska kunna rapportera in det här om de stöter på något. Så det är egentligen lite grann visa, vi är medvetna om vad vi klarar och inte klarar och att vi jobbar på det. Ja, precis. Och om man nu kommer till vad det får för påföljder ifall man inte uppfyller de här kraven så tillgänglighetsredogörelsen är nog en ganska viktig del i det. Men vi är medvetna om det och vi är på bollen. Lite sån där, jag för mig att det fanns någon slags relaterad känsla i vissa delar av när GDPR var på tapeten och höll på att införas. Det fanns ju jättestora stränga påföljder men det fanns också en ton av att visa att du jobbar aktivt med det här och rapportera när ni har problem. Så det gäller att visa en rätt anda också. Ja, men exakt. Svårt att tolka det i alla fall. Ja, men precis. Det känns ju lite som att även om jag tror att man förväntas väl vara compliant med det här när 28 juni inträder så går det ju säkert så här men vi har inte hunnit helt enkelt. Nej, men om man kan visa att det här är det viktigaste i det här sammanhanget. Vi kan visa att vi har tagit det och att vi håller på med resten. Ja, men exakt. Och sen kanske man kan komma till den punkten om vilka omfattas då. Det tycker jag verkar lite svårt. I vissa branscher så känns det väldigt tydligt. E-handel är ju en av dem som omfattas av det här. Ja, det är rätt lätt att veta om man är e-handel eller inte. Exakt, och banktjänster. Det känns tydligt. Men sen är det så här, elektroniska kommunikationstjänster och det är också så här, det finns lite exempel. Jag tror vi kan säkert lägga in några bra länkar i beskrivningen också. Ja, det får vi göra. Det finns ju från Post och Telestyrelsen så har de någon sorts introduktion till det här tillgänglighetsdirektiv och då säger de elektroniska kommunikationstjänster som till exempel uppkoppling och abonnemang, telefonsamtal, e-post, sms, chatt, videosamtal, tjänster. Men det kan säkert vara fler. Ja, jag tänker det. Det kan nog bli ganska brett. Ja, men exakt. Och sen streamingtjänster, medietjänster typ. Det är väl en av dem. Och sen så är det vissa tjänster för persontransporter. Vissa tjänster. Ja, så det lämnar utrymme för tolkning. Banktjänster nämnde vi och så e-böcker behöver vara tillgängliga och e-handelstjänster. Det är ju en ganska stor sektor som omfattas. Och sen så tror jag att det är vissa fysiska typ, om man har betalningsterminaler eller olika typer av automater, så tror jag att de också omfattas. Men jag för mig att jag läste någonstans att har man en sån fysisk grej ute så tror jag att det finns någon regel kring att om den står där idag så kan den stå kvar tills den är en viss ålder. Ja, det känns ju sansat. Nej, men man kan säkert försöka utbilda sig om man omfattas eller inte. Men jag skulle väl förespråka att man kanske ändå tänker på tillgängligheten. För jag vet inte, för mig så har det varit lite grann jag har inte riktigt varit så bra att tänka på tillgängligheten historiskt, men ju mer man har fokuserat på det så har det ju låst upp lite grann. Det är typ ett nytt gränssnitt i din app. Ja, det är det som är så spännande. När du får in vanan att liksom, ja men jag kan, jag har kortkommandot för att starta skärmläsaren, jag kan de vanliga navigeringssätten. Då är det så här, då får du helt plötsligt ett nytt gränssnitt för din app som du kan se till att få en bra användarupplevelse på. För mig i alla fall så är det jätte motiverande. Jag tycker det är jättekul att liksom så här ändå så här, för det kan ju vara helt förfärligt. Det finns jättemånga roliga exempel när det liksom är så här, ja men du kan typ hoppa igenom 48 element som bara säger bild, bild, bild. Ganska svårt att veta vad är det då liksom. Ja men exakt. Så jag tycker att det känns som att det är viktigt utan tvekan, men det är också någonting som jag tycker är roligt. Det känns som att man har låst upp en ny liten dimension här i sitt utvecklande och vad man levererar.

eller bra användarupplevelse. Ja, men exakt. Exakt. Och man får lite trevliga incitament att bygga saker på mer genomtänkta sätt. Man gjorde första versionen av sin webbapplikation och så är allting en div med olika styling på. Ja, men exakt. Och sen kom man på att ha en A, en vanlig länk, det är inte bara bra för tillgänglighet, det är faktiskt ganska bra för alla att se att här är en vanlig länk, den funkar som en vanlig länk, den ser ut som en vanlig länk. Nej, men exakt. Alla sådana grejer. Och den går att navigera. Och har vi gjort det bra att navigera med skärmläsare så blir det ofta bra att navigera med tangentbordet också. Bara kunna tabba igenom saker i en vettig ordning är ju väldigt nyttigt för precis alla. Just det, alltså jag tror att det är en sån där grej som man kanske inte ens, man tänker ju knappt på det när man sitter och utvecklar, och när man sitter och utvecklar så blir man lite så här hemmablind också. För du är inte nödvändigtvis den tilltänkta målgruppen för den appen du utvecklar, utan du, ja men jag ska bara utveckla den. Jag tror att man, du har ju säkert använt olika system även om de är webbaserade, där man bara säger, men fan, alla de här tangentbords, liksom alltså att tabba, att navigera med liksom olika sorters kortkommandon eller piltangenter och så vidare, det bara funkar. Det är ju en trevlig överraskning. Ja men exakt. Och det är ju liksom, det skulle ju lika gärna kunna vara defaulten. Ja, ja men exakt. Det borde vara lite jobb att sabba till det. Ja, och jag tror att för vår del så är en av våra, det som vi försöker bidra med när det gäller utvecklingen är att alla kanske inte ska behöva vara tillgänglighetsexperter för att vi ska kunna leverera ett bra resultat. Dels baka in det när det finns och går, men också uppmana kanske till att man har det mindsettet, att redan när du sitter i lokal utveckling, tryck igång skärmläsaren. Jag tror att man behöver gå någon liten crash course i hur skärmläsaren funkar, för den kan vara ganska överväldigande när man sätter igång den. Man har ju hört när den drar igång på 180 kilometer i timmen när den liksom spottar ur massa information. Ja visst, det är så proffsen använder den. Ja, och man kan ju ställa in den precis så som man vill. Jag tror att den viktigaste tangenten är kontrolltangenten, för den får den att bara vara tyst. Den liksom pausar uppläsningen. Så när du sätter igång den och du bara vill få så här, nu måste jag tänka här, då kan man alltid trycka in kontroll innan man gör sin nästa grej. Men jag tror att det är nog inte mer än kanske fem, sex, sju stycken kommandon man behöver kunna för att kunna använda den effektivt nog för att fånga mycket av de här lågt hängande frukterna. Och då kanske det också är så här, gör man det redan i den lokala utvecklingen, då kanske majoriteten av det som finns i någon läskig lång kravlista som är två kilometer lång, då kanske majoriteten av det är redan löst. Och sen kanske man, de här som är lite mindre problem, som är lite svårare att upptäcka, de kan man säkert behöva åtgärda ändå när det är någon sorts testprocess eller review senare. Jag tror verkligen att om du knappar runt i det du utvecklar lokalt med tangentbordet och ser till att du kan komma åt allting, du kan fylla i allting och det öppnas någon modal eller någonting så sitter fokus rätt och du hamnar inte plötsligt bakom modalen. När den stängs så är du kvar där du var. Du behöver inte navigera genom hela enrådet igen. Och att bara kunna slå igång en skärmläsare i 45 sekunder och bara det känns som att det makear sens för mig, då makear det förmodligen hyfsat sens för andra. Och sen så är det ju, visst, är man proffsanvändare av det här så kan det ju hända att det finns insikter som man själv inte kan. Men jag tror, målet är inte att man ska täcka 100% av alla problem som kan uppstå, utan det är bara att liksom få de lågt hängande frukterna helt enkelt. Går det att använda? Ja, precis. Ja, jag tror att en av våra, det som vi försöker bidra med när det gäller utvecklingen är att alla kanske inte ska behöva vara tillgänglighetsexperter för att vi ska kunna leverera ett bra resultat. Dels baka in det när det finns och går, men också uppmana kanske till att man har det mindsettet, att redan när du sitter i lokal utveckling, tryck igång skärmläsaren. Jag tror att man behöver gå någon liten crash course i hur skärmläsaren funkar, för den kan vara ganska överväldigande när man sätter igång den. Man har ju hört när den drar igång på 180 kilometer i timmen, när man spottar ur massa information. Ja, visst. Det är så proffsen använder den. Ja, och man kan ju ställa in den precis så som man vill. Jag tror att den viktigaste tangenten är kontrolltangenten, för den får den att bara vara tyst. Den pausar uppläsningen. Så när du sätter igång den och du bara vill få såhär, nu måste jag tänka här, då kan man alltid trycka in kontroll innan man gör sin nästa grej. Men jag tror att det är nog inte mer än kanske fem, sex, sju stycken kommandon man behöver kunna för att kunna använda den effektivt nog för att fånga mycket av de här lågt hängande frukterna. Och då kanske det också är såhär, gör man det redan i den lokala utvecklingen, då kanske majoriteten av det som finns i någon läskig lång kravlista som är två kilometer lång, då kanske majoriteten av det är redan löst. Och sen kanske man, de här som är lite mindre problem, som är lite mindre, som är lite svårare att upptäcka, de kan man säkert behöva åtgärda ändå när det är någon sorts testprocess eller review senare. Men jag tror verkligen att om du knappar runt i det du utvecklar lokalt med tangentbordet och ser till att du kan komma åt allting, du kan fylla i allting och det öppnas någon modal eller någonting så sitter fokus rätt och du hamnar inte plötsligt bakom modalen. När den stängs så är du kvar där du var. Du behöver inte navigera genom hela enrålet igen. Och att bara kunna slå igång en skärmläsare i 45 sekunder och bara, det känns som att det makear sens för mig, då makear det förmodligen hyfsat sens för andra. Och sen så är det ju, med också, visst, är man proffsanvändare av det här så kan det ju hända att det finns insikter som man själv inte kan än. Men jag tror, målet är inte att man ska täcka 100% av alla problem som kan uppstå, utan det är bara att få de lågt hängande frukterna helt enkelt. Går det att använda? Ja, precis. Ett snabbt och jättestort tack till alla som stöttar oss på Ko-fi. Du kan bli en av dem genom att surfa in på ko-fi.com snedstreck kodsnack och slänga iväg antingen en engångssumma eller ett månatligt stöd. Stödjer du oss på nivån Kaffedrickare för 5 euro eller mer i månaden så får du ett gäng trevliga klistermärken i brevlådan. Stödjer du oss på nivån Barista för 10 euro eller mer i månaden så får du dessutom, förutom klistermärkena, ett stort tack precis här. Tusen tack till Michelle, Albin Grön, Anders Legrell, Brother Ingo och Tobbe Lundberg. Alla ni som stödjer oss hjälper till att göra podden möjlig och ju fler ni blir desto bättre podd kan vi göra. Ibland har vi sponsorer i podden men det är faktiskt ert stöd som gör att vi börjar kunna täcka kostnaderna för podden varje månad. Vill du stödja oss på andra sätt så går det naturligtvis utmärkt att recensera podden i din poddspelare. Sätter du betyg eller en stjärna oavsett om det är Spotify, Apples poddkast eller någon helt annan app. Eller berätta helt enkelt om ett avsnitt för någon som du tror skulle gilla podden. Och just nu har vi precis släppt ett helt nytt sätt att stötta. Vi har ett klistermärke till försäljning. I Koffeebutiken så finns...

Det tidigare pack i klistermärken om livet som agil lokförare framimproviserat i en milt urspårade diskussionstråd här om veckan. Visa ditt stöd för alla safe-utövrare där ute och få den där sköna känslan i magen av att bidra till Kodesnacks fortsatta resa. Men kom ihåg, du är en fantastisk person, oavsett om du stöttar oss eller ej. Jag antar att det fortfarande gäller att man får rätt mycket gratis av att använda standardkomponenter också istället för att finna sina egna... Ja, du tänker på inbyggda element? Ja, men precis. Det känns som en sån här grej som fortfarande driver förbi mina... Massa av de flödena är att göra inte din egen ersättning för en knapp eller något i onödan, utan se till att det verkligen behövs. Och då har du rätt mycket att implementera om det ska bli lika tillgängligt som en standard. Ja, om du går div-hållet. Nej, men så är det definitivt. Det finns ju många inbyggda element som är mer semantiska som man kan luta sig mot. Men sen är det ju lite så... Det beror lite på. När det kommer till de här tillgänglighetskraven, just VCAG kanske specifikt, så jobbar man ju i olika nivåer. Då är det liksom A, AA och AAA. Och jag tror, om jag inte minns fel, någon får rätta mig om jag har fel, men jag tror att den här nivån som man ska uppnå är AA. Det kan hända att det skiljer sig lite beroende på vilken typ av problem det är, men AAA är ju då den högsta ambitionsnivån. Och jag menar, det kan man ju lika gärna sikta på då, om man inte är orimligt. Jag har kollat lite på VCAG några gånger och det känns som att den högsta nivån kan vara ganska utmanande ganska ofta, har jag för mig. Ja, men det är säkert att du har en balans där, så att man inte liksom... Ja, men A var väl ofta ganska rimlig. Man kan säga att det här förstår jag ju, dels vad jag ska göra och varför och dels hur jag kommer dit. Och sen AA var, ja men det här är samma fast mer ambitiöst på något sätt. Och sen AAA, oj, nu kan det bli mycket. Ja, men exakt. Jag tror att det som du säger stämmer ju hundraprocentigt, att återuppfinna inte hjulet om man inte måste. Jag vet inte, när det kommer till de komponenterna som vi levererar så försöker vi ju inte återuppfinna hjulet, även om det är en komponent som inte nödvändigtvis går att bara bygga. Den finns inte i browsern. Det kanske är någon lite mer interaktiv komponent som kräver... Nu finns det ju liksom ett inputfält för datum, men vi kanske behöver ha ett sätt att man ska kunna ange en range av datum och vi vill ha det som en bra upplevelse som man får om man ska boka en flygbiljett eller hotellnatt eller något sånt där. Och då måste man ju gå lite utanför vad som finns inbyggt. Och det som vi försöker tänka på där, och som jag väl kanske skulle uppmana ifall det är någon annan som sitter med liknande utmaningar. Även om det är så att det här finns kanske en färdig komponent för i något off the shelf-bibliotek ute i ekosystemet, så försöker vi ändå säga ja, det kanske är rimligt för oss att bara gå på den lösningen, men då sättet vi tänker på det då är att sätta ett eget interface av hur ska ABit se ut. Och det kan man ju säkert inspireras av hur det ser ut där, men även om det är nästintill en ätetmattning så är det en explicit. Vi lägger in det för att då blir det inte ett implicit beroende på just den komponenten, utan då skulle vi ju sen kunna se, men vill vi bygga den custom, eller behöver vi bygga den custom, eller kommer det ett ny aktör eller något nytt bibliotek som funkar ännu bättre. Så det är väl en av de nyckelstrategierna som vi försöker tillämpa. Var det än är för komponent så är ABit, det är lite heligt. Det försöker vi se till att vi har en uppfattning om hur vi, och där är det ju såklart, det är svårt att säkerställa att det blir så, men är det intuitivt, är det flexibelt, och flexibelt så menar jag bara, är det flexibelt för att vi kanske vill ändra våran lösning under huvudet på sikt då. Precis, jag har en kollega som jobbar rätt mycket med våra komponenter. Vi har ju ett litet sånt projekt också. Han har ju sagt exakt samma grej, vi ska se till att slå in det, för att vi använder ett designbibliotek nu ganska mycket. Men hans ambition är ju att allting som vi har som gemensamma komponenter ska vara inslaget precis så att vi inte blir beroende av det bibliotekt, för just nu sitter vi stenhårt fast i det, framförallt i en del äldre projekt. Det är en katastrof att försöka uppdatera en meny. Exakt, och jag menar, även om du tar den approachen så kanske majoriteten av biblioteket ändå använder någonting sådant färdigt. Men då är det i alla fall, förlitar du dig helt och hållet på deras API?

Då sitter det lite i händerna på dem också. Nu har vi gjort en ny major-uppdatering som breakar en massa grejer. Då har man åtminstone en chans att motverka det genom att säga kan vi då, om vi inte bara kan byta komponent tillsammans med det kan vi åtminstone se till att vårat API som vi tillhandahåller går att mappa om till vad som är ändrat. Så det tycker jag är en key takeaway i sammanhanget. Och sen när det gäller lite grann som vi snackade om med hur vi försöker snappa upp behoven ifrån organisationen. Så jag tror ju, och där har vi ju i samband med UX också det som är intressant med våra täta samarbete är att man kommer från olika perspektiv. Från kodsidan så har vi ett visst perspektiv och särskilt när det gäller versionshanterade kod som det finns vissa spelregler helt enkelt. Ja men precis. På designsidan så kanske det inte riktigt har varit lika känsligt med sånt. Då har vi behövt närma oss varandra och synka oss tillsammans så att vi kan inte springa före alla gånger på designsidan eller bara göra en ändring för det är inte riktigt så det funkar på kodsidan. Nej precis. Men sen så tror jag att en annan grej som vi försöker vara i synk kring det är ju att man vill ju att det ska vara konsekvent och därmed så vill man ju att det ska finnas vissa constraints kanske så att det inte är så att vi kan göra på helt olika sätt i olika appar. Det där är ju intressant ja. Men personligen så tycker jag att under de här åren nu så har man ändå både konsumerat ganska mycket innehåll ifrån ekosystemet och ifrån diverse thought leaders och så vidare. Min uppfattning är att den här flexibiliteten behöver vara lite snurrigare än vad man tror ändå. Ja någonstans är det alltid någonting. Det är så trist när du sitter där i din app och så är det så här jag behöver måla lite utanför linjerna men det går inte. Då får jag bara kasta ut allt och göra det helt från scratch. Ja men precis. Det blir ju inte hållbart det heller. Nej men på så sätt så ser vi att en viss flexibilitet behöver ändå finnas i alla komponenter och sättet vi ser det på är ju typ att det är lite mer high level komponenter och lite mer low level komponenter. Och det finns ju en härans massa namn på sådana typer av om det är atomic design eller vad som helst. Vi försöker tänka lite enklare på det att bara en high level komponent det är ett lite mer specifikt användar liksom ett use case. Och man kan använda det med ett ganska begränsat API. Det är ganska mycket opinions inbakade. Men det gör ju också att det är ganska flexibelt för oss att se till att det fortsätter att funka utan större ändringar. Och sen vartefter vi märker att för då kan vi lösa kanske 80% av ett visst behov. Sen så kommer vi till de andra behoven. Och då kan vi utifrån det vi vet då så kan vi börja bryta ner till lite mer low level komponenter. Och då kanske man kan liksom då kommer ofta de här insikterna om API design som hade vi tagit det här valet så hade vi ju kanske kunnat stödja utan att man går allt för långt ner i framtida behov vi inte vet att vi har. Så vissa sådana där grejer blir ändå tydliga. Rent intuitivt så känns det som att det här valet hade varit flexibelt även om vi ser framför oss att vi vill göra lite annorlunda också i framtiden. Ja just det. Men om man säger high level i det här fallet är det typ en sån avancerad datumväljare som vi pratade om innan. Är det en high level? Är det low level? Ja, det är svårt med hur man drar gränserna. Ja, självklart. Jag skulle se det som tänk dig på tabeller till exempel. Vi har inte supermånga tabeller ännu i biblioteket men jag bara tar det som ett exempel för där kan man ju se framför sig att en low level version av sådana komponenter kan ju mappa väldigt nära hur det funkar i HTML. Så att du jobbar med rows och header och olika typer av celler och så vidare. Men en high level komponent kanske tar en lista av data som den kan mappa om till det där under huvudet. För ganska många use cases så räcker det. Då är det ganska nice. Då kan du använda en komponent, skicka in datan som du kanske måste bara skruva lite grann på så att den passar. Och sen så får du en tagg. Istället för att göra typ 88 rader kod här för att bara göra min tabell med att mappa igenom saker och så vidare. Så det är väl ett exempel. Ett annat exempel är kanske att när man jobbar med inmatningsfält i formulär så består ju dem under huvuden av ganska... Alltså de är ju rätt nära elementen i browsern som input och så vidare. Vi har till exempel en komponent som är en text field och då kombinerar ju den själva inputfältet med ett sätt att sätta en label på den och ett terminellt valideringsfel. Så sköter ju den om kopplingarna där.

Mellan under huven så att labeln blir associerad med inputfältet och valideringsfelet också, utan att du som konsument behöver liksom så här, men hur var det nu? Ska det vara Aria label by eller Aria describe by? Just det, precis. Så det är det jag tänker på, men det är ju, jag tror att vi har stött på många gånger att man bara säger, ja men är det här en higher level abstraction? Men ja, till slut så kanske man hamnar i någon atomic design ändå. Ja, men det kanske borde dock. Det är ju en ständig utmaning att få till den där balansen. Ja, men det här kan ju vara en jättefin komponent, men jag behöver skicka in 300 saker till den för att den ska funka. Kan jag tänka om i det här så att jag slipper det? Ja, men då kanske man på en sån här high level, och det är också en, jag vet inte vem det var som hade ett sånt talk någon gång, men pratade just om API design på någon konferens. Man har ju sett exempel på en React-komponent då som liksom har typ 38 props, för att man har byggt på liksom så här vartefter. Man har kommit, ja just det, vi måste stödja det här också. Då är det ju bättre att separera det till helt olika komponenter, så att det blir lättare att underhålla över tid. Så det är väl lite av de tankarna, och mycket av det är ju common sense, men delar av det har man ju liksom på något sätt absorberat under de här åren, som man ändå stött lite mot det här, även om det inte har varit ens huvudsakliga arbetsuppgift. Nej, men precis. Och det finns ju ett stort värde också i att få, sånt som du säger, common sense-grejer, att få dem uttalade och utskrivna. Det är ju en väldigt stor nytta i sig, för annars är det ju någon i teamen då som tycker att något lite annorlunda är. Ja, men det här är väl common sense, och sen så har man plötsligt dragit iväg på två spår igen, fast det inte var avsikten. Nej, och det är ju också en intressant grej, för att ibland i våra utvecklingsteam så sitter majoriteten av dem just nu och jobbar i React-applikationen. Och det har ju då pragmatiskt sett varit våran, alltså det var så det började, och det är fortfarande så. Det betyder ju att jobbar man i något annat än React, och jobbar man i mobilappen, eller jobbar man i något av de andra bolagen som ingår i samma koncern, så kan man inte nödvändigtvis ta del av komponenterna. För de är ju React-specifika. Så då blir ju riktlinjer och design-tokens och sånt desto viktigare. Och sen så är det ju såklart också jätteintressant att fundera på hur skulle vi kunna brygga gapet mellan olika ramverk och kanske till och med olika plattformar. Men hittills, teamet har ju varit verksamt i tre kvartal ungefär nu, så vi har inte känt att det känns inte så pragmatiskt att börja gå utanför till något ramverksagnostiskt när så stor procentandel av allihopa ändå sitter nativity med React. Men det är ju definitivt en fråga för nära framtid förmodligen. Ja, men det är ju som du säger, det är en lågt hängande frukt igen. Vad är vettigt att börja med? Var får vi stor utdelning på det? Och det är kanske inte att skriva ett generellt dokument för alla typer av gränssnitt. Nej, men exakt. Håller man sig på webben och tänker att hur kan vi stödja? Vi vill ju förmodligen, eller vi kanske inte vill och kommer jobba med React i en massa år fram. Det kanske vi gör. Men då kommer man ju onekligen att tänka på sånt som webcomponents. Och webcomponents, jag tycker också, där är det också lite svårt för jag tycker när man läser om webcomponents så är det också ganska polariserande. Man hör liksom use-the-platform-gänget och så hör man framework-authors. Det är liksom de två lägenheterna. Så jag tycker det blir lite svårt för det känns som att det är därför jag har varit lite försiktig med att skynda mig.

Vi jobbar ju ändå i huvudsak med React och då vore det ju synd om man ska behöva hoppa igenom en massa loopholes för att Web Components i React ska samspela. Web Components låter ju så bra på pappret, men är det så bra i praktiken? Man kommer liksom till alla komplexa detaljer som Shadow DOM och hur lirade liksom ramverken och domen egentligen? För många av ramverken går ju liksom en annan väg när det gäller hur de renderar appar. Ja, precis. Vad är det man kallar det? Typ lazy rendered medans domen traditionellt är eagerly rendered. Och då samspelar det verkligen. Jag har nog inte helt satt mig fullständigt in i det, men det är definitivt någonting som vi har lust att titta på lite sen. Och det kan ju hända att delar av utbudet av komponenter funkar kanon som Web Components. De är ganska enskilda. Det är liksom ingen komponent som rappar en massa annat, utan det kanske är typ en date picker eller någonting som är liksom en leaf node typ i hierarkin av alla. Ja, just det. Det känns inte nödvändigtvis som en silver bullet, men vi vill ändå utforska det. För jag tror att tittar man i ekosystemet bara i Sverige av andra designsystem, och det gör vi ju liksom själva mycket också. Det finns ju liksom i Arbetsförmedlingen och SJ har vi inspirerats ganska mycket av. Ah, så de kan man surfa in och titta på? Ja, SJ har, jag tror att de relativt nyligen har gjort ett omtag på sin, jag vet inte, det är någon sån här SJ design eller något sånt. Så de har gjort ett bra arbete och det kan man hämta mycket inspiration från. Men tar man vissa andra så, jag vet, jag ska inte svära på hur de gör kring det, men vissa andra kör ju hundra procent Web Components. Jaha, de gör det. Det funkar säkert jättebra, men jag tror att vi får utforska det i framtiden helt enkelt och se vad det är. Sen vet jag inte, det är ju liksom inte helt otänkbart att landskapet ändrar sig lite grann heller nu när AI är på stort intåg och utvecklingen går så pass snabbt som det gör. Ja men precis, det skulle vara intressant, för det sa du ju precis innan vi började spela in här, att det kan ju mycket väl komma att påverka vad ni bygger och vad man gör och hur. Och det var en sån grej som jag inte hade slagit sig av förrän du sa det. Nej, jag vet inte om jag hade slagit sig av det själv för några veckor sedan heller, men vi har pratat lite mer om det, för det har ju säkert inte gått någon förbi att det händer saker på AI. Och kanske från utvecklarperspektiv så har man ju traditionellt, eller man har kanske tänkt på så här, men vad betyder det här för mig? Vad betyder det här för mitt yrke? Men om man bortser från det så tänker jag ju liksom att våra användare som vi bygger tjänster och appar för idag, hur ser deras interaktion med de apparna ut i framtiden? Delar av det kommer ju säkert att övergå till att vara någon sorts assistent man kanske pratar och ber om eller chattar eller någonting. Så vissa såna här stora komplexa flöden, deklarationer eller liksom du ska ansöka om bolån eller vad det nu är, det kan ju vara ganska omfattande och komplexa formulär. Det kanske är någonting som skulle vara jättebra som ett chattflöde i framtiden, för då kan du ställa frågor under tiden om det är någonting som du undrar. Ja, just det. Men sen tror jag ju personligen att vi kommer ju säkerligen att ha kvar grafiska gränssnitt för diverse grejer. Men det är också så att i våran interna produkt och dess framtid så blir det ju någonting som man har kommit underfund med nu, att det här måste vi ändå tänka på. Hur ser framtiden ut kring det? Var är vi på väg? Det finns ju liksom så här, vad är det de kallar det? Computer vision finns det. Visserligen så är det faktiskt då typ att datorn tar skärmdumpar och faktiskt navigerar och då behöver vi ju ändå ha ett gränssnitt som, det är ju bara bra då om det är tydligt och tillgängligt. Ja men exakt, tillgängligheten lönar sig igen. Ja men exakt. Och det är klart, det måste väl kunna finnas någon aspekt där det blir, andra interaktioner ser jag att man kanske vill presentera saker på andra sätt. Det kanske får ett annat behov av visningskomponenter som kan visas tagna ur sitt sammanhang. Det är inte så att vi har ett jättestort formulär men jag vill presentera resultatet och då har jag resultatkomponenten men jag har inte resten av informationen runt omkring. Man kanske vill integrera inmatningsfält i det här flödet också för att istället för att allt hela tiden ska vara en fritext och typ en GPT-wrapper. Det kanske är en mix av båda världarna. Men jag tycker det är svårt att veta vart vi är på väg och det är väldigt spännande att se. Och det är väl lite så som vi snackade om innan att man får försöka vara snabb på att inte sitta inlåst i att nu jobbar vi med det här i två år och sen så ser vi hur det blir när det är. Utan att man är snabbrörlig och håller örat mot rälsen. Ja men exakt. Det blir nästan mer intressant när man tänker så också, när man inser att det kan komma sådana grejer. Det finns flera aspekter att tänka på än bara de som man har framför sig precis nu.

Exakt, och det tror jag väl gäller om man går in på temat med AI och utveckling också. Där tycker jag också att det är lite svårt att veta. För precis som i Web Components är det också ganska polariserande åsikter om det. Det är liksom all-in eller all-out. Och vem ska man tro på? Har de som är åt det ena hållet eller det andra hållet ett incitament kanske att säga si eller så? Ja, visst. Jag själv har ju, vi har ju använt AI framförallt under en längre stund nu för dokumentation. För att liksom försöka hitta ett konsekvent och professionellt språk, men också liksom lite blank canvas-grej. Att man får, vi ska dokumentera en knapp, eller vi ska dokumentera en komponent som gör det här. Ge mig ett utkast, och så tar vi det därifrån liksom. Ja, just det, ge mig något att börja med. Nej, men jag tror att min personliga resa när det gäller AI-assisterad utveckling har ju varit så här att man har ju fått den här wow-faktorn. Och sen har den på något sätt efterföljts av en, ja, den kör fast och liksom man bråkar med den här AIn för att liksom komma framåt. Men ju mer man liksom fortsätter, ju mer liksom ute på hallucinationer och så blir det. Ja, men exakt, exakt. Det tycker jag är en väldigt bra beskrivning. Men den har ju kommit i omgångar också. Så nu finns det ju liksom ännu bättre integration mellan en AI-agent och liksom en editor till exempel. Och det är också så här, det har också blivit en wow-faktor. Men det känns också som att man kommer till, och man förstår ju att liksom när den har den här chain of thought-grejen, att den kan liksom typ promta sig själv och prova outcomes och så vidare, så förstår man ju att resultatet blir mer träffsäkert. Men det känns ju någonstans också som i slutändan att hur de fungerar gissar sig ändå till vad som är rimligt att göra härnäst. Så att det känns ju som att hittills så har jag fått några sådana där wow-faktorer, men ändå känt i slutändan av när det har gått så här två dagar, min lilla honeymoon-fejsen är över, att så här, men då stöter man på de här friktionerna och där det liksom tar stopp. Ja, men exakt. Det tar stopp på ungefär samma stil som sist, fast på en liten annan, ja. Jag känner nog väldigt mycket så också. Och samtidigt så pratar jag med folk, men genom en av dem som verkligen har, det känns som att de verkligen har hittat arbetssätt ihop med AI som verkligen funkar för dem. Och de blir ju liksom genuint mycket snabbare på att göra saker och jobba på det sättet. Och det kanske är arbetssätt som inte alls passar mig för att jag är gammaldags och vill sitta och titta på koden utan att bli störd av förslaget i eller? Nej, men man vill ju, alltså det är en av de grejerna som jag tycker är det råkigaste med det, att jag vill ju prova, för jag tror också att i någon grad så kommer väl det här, man kommer väl nästan att vara så illa tvungen att använda det för att behålla en viss produktivitet kanske. Sen så tror jag inte att man behöver förlita sig på det helt och hållet. Nej, det är ju frågan. Precis, det är frågan, vem vet. Men jag tänker så för min del, jag har ju, jag jobbar ju i Vim, och jag tycker det gäller NeoVim specifikt. Jag älskar ju liksom det att skriva. Jag tycker det i sig är så kul. Men den, när man jobbar i terminalen så, då är det inte nödvändigtvis så att det är inte där ny funktionalitet kring det här kommer först. Och då blir man såhär, ja okej, men ska jag testa någon ny editor här för att prova? Men liksom jag, jag tror jag delar din åsikt där. Jag vill ju typ sitta utan distraktioner och bara få göra det som, för det ger mig glädje liksom. Ja, och samtidigt så är det ju onekligen så att när jag har Copilot påslagen i Visual Studio Code, jag vill ju kanske egentligen inte ha så mycket av intelligensen, men däremot att den ibland funkar som en väldigt mycket smartare autokomplettering. Ja, spara tid helt enkelt. Det sparar mig ju lite tid då då, och liksom hjälper mig att avsluta en grej och samtidigt hålla en tanke i huvudet. Så det är väldigt så balansgång. Det är både störande och lite hjälpsamt samtidigt. Ja, men exakt. Men det kan vara mycket frustrerande också. Ja, visst. Jag menar på mina mer cyniska humör så kan jag ju tänka mig att om tillräckligt många går tillräckligt hårt in på AI-utvecklingen så kan vi vara några andra som sitter i ett hörn och liksom känna storkån på att vi skriver väldigt pålitliga småsaker med minsta möjliga kod som är hantverksmässigt skriven. Det blir mycket mer förutsägbar. Jo, precis. För det är väl också en av aspekterna att både när det gäller liksom, ja men att producera kod kanske är en aspekt i sig, men se alla de här bildgenereringarna. Det är ju inte som att du får samma resultat när du ställer samma fråga. Så det blir ju lite svårt att liksom, vad är det egentligen som kommer ut? Det kommer säkert att funka. Men det är ju liksom, det är där i den ballparken. Ja, men precis. Det är som att prata med någon slags drömgenerator. Det händer något i en dröm och så tror man att det är samma så plötsligt allting runt omkring ändå. Nej, exakt, exakt. Men jag tror alltså det kommer väl att vara viktigt att fortsätta vara nyfiken på det i alla fall så att man liksom inte frånskriver det helt och hållet. Nej, men precis. Använda det liksom till en rimlig grad där det känns som att det gynnar en och inte...

Men det kanske, vem vet vart vi är på väg? Vi stämmer av igen om två år och ser vad som faktiskt hände. Är det något mer vi borde få med innan vi avslutar för idag? Det här är jätteintressant. Ja, nej jag tror inte det. Jag tror vi har varit inom det mesta som jag har i tankarna. Jag tror att det finns några länkar som vi kanske skulle kunna lägga in i någon beskrivning för avsnittet. Ja men exakt, jag lägger ner in massor med länkar. Inklusive till SJ's designsystem också. Det är trivsamt att de har gjort en sajt för sitt designsystem. Det visar ju bara komponenter men den känns samtidigt 100% SJ. De har lyckats få till en enhetlig känsla på det på ett ganska stiligt sätt. Det är också lite power move att lägga sin designsystem publikt. Det känns som att vi hade säkert också kunnat tänka oss att göra det i framtiden. Men vi har inte vågat göra det ännu. Det har inte blivit ett tillräckligt skyltfönstervänligt material kanske. Jag kan helt förstå resonemanget. Men som sagt, vi länkar in sånt också. Om du kommer på några fler grejer som vi borde länka med så tar vi med dem också. Så folk massvis att titta på. Jättebra. Tack så jättemycket Johan för att du ville vara med. Ja, tack för att jag fick vara med. Tack för att just du lyssnade på KodSnack. Om du vill stödja oss, varför inte tipsa en bekant om podden? Eller lämna en recension i till exempel iTunes eller något annat ställe där det går att sätta betyg på poddar. Du kan också stödja oss genom att köpa oss en kopp kaffe på coffee.com-kodsnack. Alla pengar går direkt till att göra podden bättre och trevligare. Du kan också komma och hänga i vår Slack-kanal. Länk finns på kodsnack.se. Precis som alla andra länkar och all annan info kopplat till varje avsnitt. Sist men inte minst finns det också en länk till vår Spreadshop-butik där du kan köpa tröjor och andra prylar med KodSnack-tryck. Återigen, tusen tack för att du lyssnade. Vi hörs. Han skulle säga det så här, Mr. Amar. The 9000-serien är den mest rättvisa komputeren som aldrig har gjorts. Ingen 9000-komputer har aldrig gjort ett fel eller avkastat information. Vi är alla, på någon praktisk definition av ordet, fullproof och inte kapabla för fel.