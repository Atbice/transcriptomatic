Jag minns att vi hade en QA-person då, eh, som ibland gick i taket över det här för att det var såhär, nu har du ju gjort massa ändringar. Hur vet du att det här funkar? Och det här, och det här smögs alltid mer liksom, lite för QA-personen. Du lyssnar på Developers, podden där du får följa med oss, Sofia och Madde, på allt inom mjukvaruutveckling. Vi träffar spännande gäster, testar nya teknologier, söker inspiration och tar upp aktuella ämnen. Nej, jag vet inte varför har det blivit så svårt att starta podden? Vi, vi stoppar såhär- Vi är stela. (skratt) Nej, men det är bara så, jag har slitit på saker att säga känns det som. Eh, fast vi har en massa saker att säga, men de kanske är såhär rants utanför techvärlden. Ja. Ah nej, jag vet inte. Jag var såhär, du bara frågade, har du något att säga? Ja, men jag hade kalas för min ettåring idag. Det är inte heller så intressant att prata om. Ska vi inte bara hoppa rakt in och såhär tacka våra stödjerstöddar på Patreon? Så sedan snackar vi om vad vi ska snacka om. Jo, jo, jag måste spara luft i mina lungor för det är så mycket technyheter att såhär, jag vet inte ens hur jag ska orka läsa igenom det här. Okej, men då kör vi i och tar och tackar våra stjärnsupportrar på Patreon. Det är alltså de som stöttar oss med hundra kronor eller mer per månad som får sitt namn uppläst här. Och det är Alicia, Anders Nylund, Jan Jonsson, Dag Runell, Kajetan Kazimierczak, Lars Nyström, Molly Haglund, Oskari, Per Nåtby, Selim Jorthal, Stig Hest och Tomas Nilsson. Mm, tack så mycket till er och tack till alla andra som stöttar oss på Patreon och på alla andra olika sätt som ni supportar oss. Ja, det var någon som köpte merch häromdan. Blev såhär glad när det droppar in lite då och då. Exakt. Och ibland ser jag någon på jobbet som har vår merch, som inte går fram och skryter om det varje dag, utan bara såhär, jo men jag har er merch. Det är nice. Fint. Ja. Äh, nej men låt oss hoppa in i nyheter. Du har använt Create-React-app, eller hur? Ja. Jag vet ju det. Det vet du att jag har. Ja, men det är ju såhär, det kanske inte alla som har gjort det. Om man är ganska ny så kanske man redan vet att man inte bör använda Create-React-app. Jag vet inte. Eller om man inte är frontend-utvecklare. Eller om man inte är frontend-utvecklare. Men vad ska vi säga då, Create-React-app var... Alltså jag vet inte, för att det fanns, det kom nog typ precis när jag började jobba med React. Så att det, det kändes som en game changer, men jag vet inte hur pass mycket game changer det var. Det kom 2016, eh, och det tog bort mycket av krånglet med att hålla på med all boilerplate kod för att konfigurera ett helt React-projekt. Du vet så här webpack configs och babel configs. Du måste ju-- du har ju ändå haft, du har väl haft projekt där ni inte har Create-React-app, där ni har fått hålla på med allt jox? Ja, precis. Då var det helt inbyggd webpack och... Det var ju nice för att där är vissa saker i Create-React-app som inte kommer med automatiskt, till exempel server-side-rendering och lite sånt som vi då behövde i den applikationen. Äh, men ja, det är jobbigt att underhålla det också. Sen kan man ju ejecta sin Create-React-app och ja, ja, ja också, så att man kan ju komma ut. Och då hamnar man i något helvete, mellanstadies- Ja, det är nästan ännu värre. Ja, men jag minns du har klagat på typ såhär, åh, vi skulle migrera till webpack fem och bla bla bla, och det tog jättelång tid, ja. Ja, men det tog bort mycket av helvetet som innebär av att jobba med frontend. Äh, ge er inte in i det för det är inte så jättemycket bättre nu ska jag säga. Spöa på den ranten. Men det var i alla fall, jag skulle säga att det var synonymt med att starta ett React-projekt. Alltså, det var såhär, det är självklart att när du startar... Ja, ska du starta ett React-projekt, självklart använder du Create-React-app för att sätta upp allting. Äh, och man ser det, jag ser det fortfarande idag när folk lämnar in sin typ kod till techintervjuer, att folk fortfarande använder det, det är sån vana man har. Även nu, alltså med Vite och sånt? Ja, jag tror att vissa vet inte. Mm. Vissa har inte hört om, om att... Ja, i alla fall, det de inte hört om är att React-teamet slutade ju rekommendera det för ett tag sedan och det, det blev väl såhär, man slutade maintaina det projektet, ähm, och man började rekommend... Ja, det är det här som jag ska gå in på, som med tjafset här. Åh, alltid kul med tjafs. Ja, så det har varit tjafs. Äh, som du säger, Create-React-apps har inte haft, har inte haft stöd för allting som är mer modern webb idag. Äh, så det är inte chockerande att det läggs ner. Ähm, men det hände ett drama typ såhär under sjuttiotvå timmar efter att de offentliggjorde att det verkligen ska läggas ner helt. Så jag ska sammanfatta dramat. React-teamet gjorde ett blogginlägg där de uppmanade utvecklare att överge Create-React-app och att man ska gå över till Next.js, React Router, eller till och med bygga ett eget ramverk från grunden. (skrattar) Inte rekommenderat, inte rekommenderat, men liksom- Det är de här liksom sakerna du kan göra. Men jag vet att de har varit såhär, men håll inte på och bygg det från grunden. Men de är-- Så de är väldigt såhär, använd typ Next.js. Jag tror att du har sett det kanske på hemsidan när man går in så är det såhär, använd Next.js eller Gatsby kanske de också rekommenderar. Ähm, men, och nästan ingen nämnde...Alltså, det heter Vite, men de flesta tror jag säger Vite. Folk som inte snackar franska. Ja, så att ja, de kommer att hata att vi säger Vite. Hur sä-säger du det? Jag säger Vite. Du säger Vite, ja. Men jag har ju läst franska i fyra år, men ja. Oh-hoh. Fancy baguette. Ja, okej, men vissa kallar det Vite... Ja, i alla fall. Vite är jättepopulärt bland React-utvecklare. Typ alla som körde Create React App som förgrevade på att det inte var toppen längre gick över till Vite. Det var svinenkelt att gå över till det. Toppen liksom. Men ingen typ nämnde att såhär, ja men ett alternativ är att du går över till Vite. Det är jätteenkelt. Så att många utvecklare blev väldigt arga och menade att React-teamet var partiska mot Vite och förstår inte hur communityt faktiskt arbetar. Jag skulle säga att de flesta har ju gått över till Vite istället för att migrera alltid till NextJS. Ja, för NextJS känns mycket mer... Alltså visst, det är kanske bra om du ska bygga nånting stort och robust liksom, men det kom-- alltså, det är mycket mer du får på köpet som du kanske inte behöver alltid. Ja, nej, så de var såhär, de gick ju till och med så långt att de anklagade React-teamet för att vara köpta av (skratt) någon som skrev såhär "of big framework". Men vad då? Alltså eller vem, vem ligger bakom NextJS egentligen? Äh, det är ett företag som heter Vercel- Jaha. Folk har kanske hört om det i olika sammanhang. De har ju så här cloud-tjänster. Ja, haugh-ousting. Hostingskratt] Hostings. De kör hosting, de bygger NextJS. Grejen det är typ såhär, nu kan jag vara ute på utvatten så insatt är jag inte, men det är nog, det är många i React-teamet som bidrar eller såhär som har gått in och börjat jobba i, för NextJS-projektet och liksom vice versa någonting. De är väldigt sammankopplade. Så det blir lite såhär... Det blir väldigt färgat. Jag håller faktiskt med om det. Så det här Twitter-tjafset höll på i några dagar och det var ganska underhållande i alla fall, när man såg posterna från det. Äh, men till slut lugnade det ner sig och React-teamet uppdaterade sitt blogginlägg och hade lite mer såhär balanserade, nyanserade rekommendationer, inklusive hur man kommer igång med Vite. Mm. Utan att behöva byta till ett ramverk som NextJS. Äh, så nu är freden återställd, men i alla fall. Lite drama, men jag hoppas att ni har fått budskapet med er, sluta använda Create React App. Det är liksom officerat, dött. Mm. Men alltid kul med lite drama. Men det var fint att det löste sig att de blev vänner till slut. Ja, frid och fröjd på jorden. Nästa grej, inte så relevant för oss, för oss utvecklare kanske, men Amazon. Du vet såhär, typ alla stora företag har ju jobbat med AI, alltså LLMs, släppt nånting för att vara relevanta i AI. Amazon har inte gjort det. Nej, men de gör ju så mycket annat. Ja, jag tänker de har ju hela AVS som är typ en av de världsledande cloud providers och sånt. Behöver man verkligen doppa liksom fingrarna i alla syltburkar? Absolut, absolut. Alltså har du, har du, har du Azure AVS eller Google Cloud så behöver du inte pengar på att inte göra nånting i princip. Absolut, de har haft olika typer av LLM-tjänster i det. Men de, de har ändå liksom inte riktigt varit med i gamet som någon som gör modeller, eller hur? Nej, nej, nej. Jag vet, de har haft... Vad heter den här? Code Whisper. Men ändå, de har ju sin assistent Alexa. Och det är väl där man förväntar sig att någon slags utveckling ska ske. Och nu äntligen så har de rullat ut Alexa Plus, eller i alla fall presenterat det, jag vet inte. Jag tror att man kan signa upp det och det finns olika erbjudanden om du har Prime eller inte. Det är väl spännande. Alltså alla de här Siri och Alexa är helt värdelösa. Du kan ju i princip inte göra någonting förutom att typ sätta på musiken eller släck lampan. Men samtidigt med det sagt så är liksom såhär miljoners miljoner människor som ändå interagerar med Alexa och säger starta musiken eller släck lampan. Så att, jag-vet-inte vad det kommer leda till du vet, men det är väldigt många användare som de introducerar features för och det kanske kommer utvecklas så man kan förstå hur folk använder det mer och mer. Men ja, de som vanligt hade dem en demo där de liksom visade helt såhär. Exempel som är helt... Det är ingen som gör såhär i verkligheten. Det var typ såhär. Ja, men nu kan du använda AI:t för att beställa en Uber åt din kompis när din kompis kommer till flygplatsen. Skratt] Gud vad krångligt scenario. Alltså det enda jag vilja kunna med typ Siri är, öppna min anteckning som heter handlingslista och lägg till smör när jag står med händerna fulla och bakar och inser att smöret är slut. Det går, men det är skitjobbigt att säga det. Ja, men den fattar inte handlingslista. Alltså nej... Jag har i alla fall inte lyckats. Nej vi hoppas att den är bättre, men jag är ju väldigt trött på de här exemplen som såhär ingen i världen någonsin skulle göra. Folk beställer sin Uber själv. Den, den liksom, inte ett verkligt case, men det visar att de ger sig ändå in i det här, ja men AI-agenter. Alltså försöker göra någon slags agent som alla andra håller på med.Vi får se vad som händer där. Nånting som är mer roligt för oss. Visual Studio Code känner du till och använt kanske? Aldrig hört. (skrattar) Jag vet inte. Det är väl såhär, det vet väl typ alla vad det är nästan om. Eller? Det tror jag nog. Om man inte jobbar med något väldigt såhär obskyrt språk. Men det är en ID för, används kanske oftast av... Alltså nu vågar inte jag säga det. Det känns som att flesta JavaScript människor använder Visual Studio Code. Alltså min sambo frågade mig typ när han började plugga såhär, vad är skillnaden på Visual Studio och Visual Studio Code? Så sa jag typ såhär, ja men Visual Studio, det är typ för backend.net och Visual Studio Code är typ för frontend. Alltså så om man ska hård, hårdra. Eh, så hade han sagt det på sin lia och då hade de skrattat åt mig. Och typ... Nej, det har hon absolut inte sagt. Och jag bara såhär... Vad då? Det var väl rimligt för nån som är ganska ny. Alltså han hade ju precis börjat plugga. Det var väl inte så dum förklaring, eller? (skrattar) Men vad menar de att... Eller hur hade du fel? Jag vet inte. Alltså klart, du kan köra andra saker i Visual Studio Code också. Ja, men det är hemskt och du gör inte det. (skrattar) Nej, exakt. Nej, sign out i alla fall. (skrattar) Jag avskyr när folk föreslår det. Alltså, förlåt min chef, du är bäst. Men liksom, han var såhär, behöver du verkligen att vi skulle ha IntelliJ för jag va, behöver du verkligen IntelliJ? Det går ju köra i Visual Studio Code. Jag var såhär. Jag tänker inte sitta med ett sådant full-fledged språk när jag har en full-fledged ID och sitta i Visual Studio Code med skit extensions. (skrattar) Nej, jag är benägen att hålla med. Ja, men det är för att vi är färgade av Visual Studio som har allt liksom. (skrattar) Okej, vi, vi har förklarat vad det är nu på ett dåligt sätt och folk skrattar säkert antagligen igen. Men i alla fall, de har ett väldigt populärt tema. Man kan ha väldigt många olika teman i den här IDE:n som heter Material. Och, eh, det är för att man har upptäckt misstänksam kod. Eh, så material theme var väldigt, väldigt populärt tema. Det hade mer än sex miljoner användare och det är inspirerat av Googles material design. Men nu är det alltså helt borta. Jaha, men vad då? Alltså, teman, det är ju typ bara lite Jason. Vad kan man slänga in för farlig kod där i? Ställ inga frågor. Okej, men läs bara (...) liksom. Nej, nej, men jag bara funderar. Men visst, det är klart, har man ont uppsåt så kan man ju lyckas göra det med det mesta. Jag är så oskilj och naiv och bara hur skulle man kunna göra det i ett tema? Men ja. Ja, alltså bra fråga. Jag har aldrig byggt ett tema. Nån som har byggt ett tema vet ju så klart vad det är. Men den ändrar väl inte bara... Eller? Ändrar man bara liksom färg, liksom color black? För det de sa var i alla fall att... Ja, men för det de sa var att det fanns, alltså det fanns mycket typ kod som gör som har onödiga beroenden till saker. De körde några såhär child-processer i VSCode, vilket var väldigt märkligt för ett vanligt tema. Äh, jag vet inte. Så det är i alla fall borta. Då kan jag tipsa om värdens bästa tema som jag använder på rubbet och det är Nord. Jag tycker det är så snyggt. Ja, just det, det använder du. Vad använder jag? Jag använder Sublime, någonting Coffee eller något sånt där. Det är lite såhär... Lite brun-orange typ, va? Sublime associerar jag med orange i alla fall. Men det-det-det är ett färgglatt tema, men det är lite såhär, det är lite mognare skulle jag vilja säga. (skrattar) Det är bara skönt för ögonen, det är inte så skrikigt, men det är ändå färgglatt. Ja, okej. Eh, vi får göra-- om någon vill så kan vi göra ett avsnitt om alla teman vi har och alla vår uppsättning eh, och allting som vi använder. Men då får ni önska det för annars kommer jag tycka det är pinsamt. (skrattar) Eh, Anthropic, också AI-stuff. De har släppt en ny version av sin populära LLM, version tre punkt sju, som bygger vidare- Alltså Claude då, eller? Just den här, alltså modellen heter Sonnet. Ja, men det gör väl alla Claude-modeller. Som används. Jag vet inte om Claude är det fina namnet bara, eller jag fattar inte. Det kanske är som Antropic är som OpenAI och sen har du ChatGPT som är Claude och sen är Sonnet själva modellnamnet som typ o1. Förmodligen. Mm. Ja, ja, förmodligen. Alltså igen. Jag orkar inte tjejgissa saker här för det är alltid fel säkert. Men det låter jätterimligt. I alla fall, det har kommit en ny, ny version av den och just Sonnet 3.5 har... Ja, ofta enligt de flesta benchmarks toppat ligan i liksom att vara en bra kodassistent och generera kod. Den dök upp i juli 2024, men enligt Antropic så ska 3.7 vara ännu bättre. Inte jättekonstigt att det ska vara bättre, men det ska vara bättre på kodning och specifikt frontend utveckling. Och det är som en del av det här så satsar man också på ett verktyg som heter Claude Code som är en AI-agent som konkurrerar med liknande lösningar som typ Devin och andra såna här AI-verktyg. Är det bara jag som tycker att Claude Code inte var ett bra namn? Tänker inte alls det ligger bra i munnen. Ja, alltså Claude över taget. Ja, det blev lite för, det blev lite äckligt. Äckligt? (skrattar) Claude Code, ja. Claude. Ja, jag vet inte. Det låter som en butler. Jaha, faktiskt. Här kan det ta- Alla dem låter lite så. Jag vet inte, det är ingen som har lyckats med ett produktnamn här. Alltså Gemini kanske är det minst äckliga. Vadå är ChatGPT äckligt? Nej, men jag vet inte, det är bara så dåliga produktnamn. O1, eller vilken modell ska jag använda idag? O1 eller O3 mini eller four o eller... Det är så dålig bara såhär produktpresentation. Med det sagt också ska de, de pratar om att jag vill veta att det är jobbigt. Du ska inte behöva sitta och välja bland sex modeller, utan de ska typ automatisera det att när du skriver en prompt så väljer de den bästa modellen för det du vill göra. Det vore asbra. I alla fall, den tidiga versionen, Sonnet 3.5, den blev ju jätteframgångsrik. Och de flesta IDE:s med såna här generativa AI-funktioner började använda den. Och, men för GitHub Copilot, som du använder i Visual Studio, så dröjde det med stödet för det. Då hann andra IDE:s som typ Cursor och Windsurf plocka upp användare i och med att de tillats Sonnet 3.5. Men den här gången så har alla stora utvecklingsverktyg, inklusive GitHub Copilot, redan lovat stöd för 3.7. På tal om GitHub Copilot så släpper GitHub... Eh, co-pilot sin code review-funktion. Det ska bli spännande för det har du pratat om du vet att, amen så här, en AI som kanske kan kolla igenom din pull request så att ... (överlappande tal) Ja, det är ju skitbra att ha. Alltså kunna ha åtminstone en första granskning innan man skickar upp den för att ha en peer. Eller hur? Jag har inte testat den och jag fick mejl precis typ, tror i går att min co-pilot licens har uppgraderats med den här funktionen för jag liksom, vi betalar för det på jobbet. Så det ska bli jätteintressant att testa. Så vad den gör är att den ger feedback på pull requests. Typ går igenom och hittar uppenbara buggar. Den summerar ändringarna, den föreslår vilka tester du har-- du kan ha, den rättar stavfel. Vi som klagade på stavfel för något avsnitt sedan. Men ja, det är jäkligt coolt. Sen tänker jag att den lär ju inte fatta kontexten särskilt bra. Alltså, själva featuren du implementerar, hur det hänger ihop. Alltså, det borde den ju inte kunna. Men allt annat sånt här liksom, att det ska... Ja, vara stavfel och liknande. Skriver den tester åt en också? Eller bara säger den typ du borde testa detta. För det hade varit sjukt nice om den bara, du borde testa det här. Här har du ett unit test. Jag vet inte, vi får testa. Det, det stod bara att den liksom föreslår tester- Ja. Ehm, så jag vet faktiskt inte. (överlappande tal) Det kanske är jättebra för sånt. Ja, nej men ingen aning. Men det, det låter ju som ett bra tillägg. Men som du säger, den, den kanske inte k-kan skriva en bra pull request, eh, sammanfattning åt en för att den saknar kontext. Det blir kanske såhär, jag har ändrat detta, jag har ändrat detta. Okej, men det är inte intressant om jag inte vet varför du ändrade detta? Mm. Eller så är den för dålig på att använda bra domänspråk. Ja, det är också ett... (skrattar) kan man känna att man bör bli bättre på det. Ja, och vidare över till Google. Vi måste ju nämna alla stora aktörer, eller hur? Innan vi är klara. Google släpper sin kodassistent Gemini Code Assist gratis för privatpersoner. Tidigare så kostade den tjugotvå, tjugotvå komma åtta dollar i månaden. (skrattar) Otroligt. Det är såhär konstigt. Specifikt. De hoppas väl på att locka in fler användare. Det här har de gjort med alla sina AI-verktyg. Först så ville de att alla skulle betala för det, men ingen ville betala för det. Så nu försöker de tvinga oss att använda det i alla appar istället. För att nu har de säger såhär, okej, ingen vill betala för det. Vi vill ju ha folks data. Så låt oss bara tvinga dem att använda det typ vi släpper det fritt. Ja, som sagt, jag vet inte hur många gånger man har hört det här med att om någonting är gratis så betalar du ändå någonting och oftast- (överlappande tal) Exakt. Äh, ja, nej, men vi får se om de hinner ikapp Co-Pilot och Cursor då. Ähm, för företag kostar Gemini Code Assist fortfarande dock femtiofyra dollar i månaden. Det är ganska dyrt. Ja. Eller vad kostar Co-Pilot? För företag vet jag faktiskt inte. Nej. Det är antagligen också dyrare för det är typ såhär, din data processas bara på en dedikerad- Ja. Server som de inte har tillgång till. De får inte träna på din dator, data. Så där förstår att man får betala. Men alltså den, eller har väntar, nej men här står det. Jag vet inte, det här är ju priser i dollar, det kan ju vara annorlunda på vår marknad. Men här står det att Gemini Code Assist kostar femtiofyra och GitHub Copilot Enterprise kostar trettionio dollar. Så den är dyrare. Eh, men ja, det var nyheterna. Ho! Ja, men tack för den här genomgången. Väldigt bra påläst. Jag slipper läsa nyheter. (skrattar) Ja, varsågod. Jag kommer att tänka på bara såhär, vi borde ta upp någonting om allting som har varit med Firefox. Har du hört någonting om det? Ja, men jag orkar inte prata mer. (skrattar) (överlappande tal) Nej, jag har inte alls- Så får du berätta. Jag har inte alls såhär förberett någonting, men jag har läst lite om dem. De har ju uppdaterat sina terms and conditions nu. Och i princip första versionen sa ju mer eller mindre: Vi kommer att samla in all data du matar in i liksom inputfält eller i (skrattar) alltså vad du skriver, vad du surfar och rubbet. De ska väl förmodligen också göra någon form av AI-träning eller något kan jag gissa. De har ju blivit uppköpta också, så det är ju mer... Men folk har ju slagit bakut nu och letar efter alternativa browsers. Det finns ju typ såhär LibreWolf till exempel vet jag, som är en fork av Firefox. Om man nu vill fortsätta använda Firefox men inte sälja ut sin själ. Sen finns det ju en massa andra alternativ. Är man fine att köra på Chromium så förespråkar ju både du och jag Arc. Mm. Och ähm, ja, nej, det finns ju tusentals alternativ. Brave och massa obskyra alternativ som jag knappt ens hört talas om. Ja, men det-det där är tråkigt för jag har inte hört om dem, att de liksom erbjuder att du kan betala någonting och få, och få slippa undan det. Jag förstår att folk behöver tjäna pengar. Eh, och som privatperson, jag vill inte heller betala tvåhundra spänn för att använda en browser. Men att de kunde ha haft en modell såhär, betala, jag vet inte, tjugo spänn i månaden- Mm. Så hade nog väldigt många gjort det. Ja, kanske. Jag hörde, jag vet inte, jag har inte faktaganskat detta nu, men att en stor anledning att de har mindre pengar är för att Google har slutat-Supporta dem. Google har ju supportat ganska många browsers mot att då få ha, ähm, Google som default sökmotor. Nu när de inte längre får göra det i och med de här lagarna som har trätt i kraft- Så det är EU som har förstört det då? Så skiter de i att supporta för att då får de inte ut någonting av det. Okej, så det är vårat fel, européerna. Ja, exakt. Skyll på det. Okej, ja men då ska jag inte säga något. Fan vad de måste vara trötta på oss i USA. Mm. Vi fick ju en lyssnarfråga också som vi kan ta och bränna av kanske. Jag tänker den är inte så jättelång. Det är från vår vän Kajetan Kazmierczak, vars namn ni har hört många gånger. Mm. Han frågar såhär: Hur löser man bäst konflikten mellan att vara lite av en scout och alltid lämna koden i bättre skick än när man fann den? Det vill säga fixa eventuella småsaker när man ser dem, uppdatera paket, fixa felstavningar och så vidare. Och att bara sträcklösa det som finns i en Jira-ticket och inget annat. Flera arbetsplatser har, fullt förståeligt kanske, en policy om att en PR endast får innehålla lösningen på en feature eller bug och inget annat. Samtidigt vill man ju inte att koden ska förfalla för att det inte finns tickets i Jira för något litet man precis har hittat. Och att skapa en ticket, få den prioriterad och kanske få återkomma till den senare är ju rätt omständigt om det handlar om till exempel namnet på en lokal variabel som är fel stavat. Har ni råkat ut för det dilemmat? Alltså, det jag bara såhär reagerade först på var att flera arb-arbetsplatser har en policy där man, där en PR endast får innehålla lösningen och ingenting annat. Jag har aldrig varit med om det. Inte jag heller faktiskt. Jag har liksom inte hört det som att det skulle vara ett problem på det sättet att, ja, att man bara får göra det. Sen kan jag ju förstå att man inte vill trycka in hur mycket som helst. Man får ju ha lite sunt förnuft då. Men ibland så är det ju, ja, ibland blir det ju att man måste lägga ihop vissa saker. Det har jag i alla fall gjort mig skyldig till. Ja, men jag har definitivt varit med att folk diskuterar det här i ett team, men aldrig att det har funnits en strikt policy. Nej. Jag tycker bara det låter helt sjukt att man ska behöva göra en ticket av det och få den prioriterad och liksom att den ska gå igenom hela den här ordinära processen. Det känns som någonting man borde diskutera fram, alltså... Jag vet inte, kanske någonting att ta upp på ett retro och säga det här att jag vill kunna lösa småsaker för att jag är helt med på det här scouttänket. Jag tycker det är klockrent. Alltså såhär, ser man någonting som bör fixas och om det bara är liksom ett stavfel eller ja, någon lintgrej som har blivit fel eller någonting, då har jag bara gjort det i samma PR om det är liksom relaterat till det kontextet. Men om man ser att det kanske är en funktion som skulle behöva refaktureras för att den är lite otydlig, man kanske vill bryta upp det jättelånga till lite olika variabler och sånt. Då kanske det är mer liksom okej, kanske ska göra det till eget. Men då hade jag ändå bara gjort det i en egen PR och inte, ja, skickat in den samtidigt. Mmm. Ja, det är väl här det kan bli tjafs och att man är oense. För att jag, jag, jag tycker att man ska städa upp när det är såhär, det är ett stavfel. Men jag förstår absolut problematiken att du behöver refaktorera en funktion. Eller är det typ såhär, du ändrar kanske massa stavfel. Jag vet inte, du ändrar såhär saker som känns små, men i och med att den här koden inte har tester så kan du ha faktiskt, jag vet inte, introducera något nytt stavfel och det upptäcks inte förrän du har tryckt ut det, jag vet inte. Det skulle ju kunna vara till exempel om man använder såhär magic strings. Alltså att du, istället för att du har en konstant eller någonting eller en enum så jämför du ett strängvärde och så har du plötsligt bytt strängvärdet. Och det är ju mycket lättare att detta trillar mellan stolarna om man bara gör det lite under radarn. Det blir ingen spårbarhet och du inte har en ticket att koppla det till på det sättet. Nej, för jag, ähm, jag har jobbat med en utvecklare som jag har väldigt stor respekt för, men som, som var väldigt snabb och typ såhär upptäckte att shit, det här behöver göras om. Äh, för att man behöver underhålla sin kod. Man ser en halvt år senare och bara, men vad fan är det jag har skrivit? Äh, men som, som kände att det var en bra idé att passa på. Och kanske gjorde en till PR då ens. Försökte vara ändå såhär noga att det skriva lätt att code review:a. Men jag minns att vi hade en QA-person då som ibland gick i taket över det här för att... Det var såhär, nu har du ju gjort massa ändringar. Hur vet du att det här funkar? Och det här, och det här smögs alltid mer liksom lite för QA-personen. För att, för att den här utvecklaren visste ju att QA-personen skulle frågas. Och så var det också störigt för vissa alltså som utvecklare. Ibland kom det en väldigt stor bara, nej men det här är bara refaktorering. Jag bara liksom gör om hela strukturen. Jag gör det mer kanske funktionellt eller jag vill inte att det ska vara funktionellt för det är så svårläst. Och då att sitta och granska det som kollega utan en ticket. Alltså det var ändå såhär... Det kunde vara svårt. Ja, men det känns som en lite större grej. Man kanske kan ha någon slags, liksom är det mer än två minuters jobb att implementera och mer än femton minuter att testa? Ja, då får det bli en ticket av det. Mm.Sen vet jag inte, jag har ändå varit scrum master och jag skulle inte bli sur om någon utvecklare la upp en ticket och bara drog in den i typ developing och körde. Ja, det tycker jag också är nice. Det låter som onödig bromskloss, att man ska sitta och prioritera upp det och så vidare. Och sen prioriteras det inte upp och så glömmer man bort den, ähm- Ja, enda gång- Eftersom det är så litet att man gör det i samband så bara kör liksom. Ja, ända gången jag skulle ju pri-- Liksom vilja lägga det i någon prio backlog är att om det är ett större arbete. Ja, alltså om det är en dag's arbete eller en halv dag ens, då snackar vi liksom nej, då kan du inte bara smyga in den lite sådär. Ja, precis för då sitter du ändå och har prioriterat ner någonting annat. Man behöver ändå vara transparent mot alla i teamet och ha respekt för PO vars ansvar är att se till att det mest prioriterade jobbas på. Det är säkert helt okej för PO, men man behöver liksom lyfta det och prata om det. Och det kan vara sjukt störande som utvecklare. Man är såhär, ni måste göra det här, det går ganska snabbt, det tar bara en halv dag. Men de vill ändå ha lite koll och förstå vad som händer och varför ni lägger tid på det här. Oftast brukar man ju lägga in lite padding för typ maintenance tasks och sånt. När man gör ja sprint planning och sånt. Jag tycker ändå utrymmet borde finnas där. Det håller jag med om. Vad tror du? Ja, säg du? Nej, men jag känner igen ett scenario och det är såhära, åh det här stör, det här stör mig faktiskt väldigt mycket bland saker som stör mig. Jag borde skriva upp det här någonstans så att vi kan göra ett avsnitt om saker som stör mig med andra utvecklare. Ähm, säg att det är såhär, ja, men det tar tjugo procent av din sprinttid att göra det här. Eller ens femtio. Och så säger vi att det här tar lite längre tid, är det lugnt att vi lägger in det här backloggen? Och den här utvecklaren säger nej, jag vill göra det nu. Eller säger det här kommer inte ta så lång tid. Så det de gör istället är att de tycker det här är rätt roligt arbete. Så de sätter sig på kvällarna och gör det här. Okej. Och påstår sedan, jag vet inte om du har varit med om det, men jag har varit med under flera gånger från olika personer. Det är så roligt att de gör det på kvällen. Men det är ändå någon som ska jobba med detta sedan och testa det, granska det. Alltså, de personerna är oftast såhär, men det är inga problem för någon och jag har suttit och gjort det här själv. Och hur kan du inte vara typ, du vet, hur kan inte alla bara vara tacksamma att jag sitter och gör det här på min fritid? Men jag vill inte ha det så. Jag vill inte att det sitter folk och kodar hela nätterna. Visst, jag har väl gjort det någon gång såhär. Men då försöker jag liksom... Jag vill inte att folk ska se att jag har gjort det. Det ska inte stressa teamet att här sitter någon och kodar på kvällarna av intresse. Då höll på med ett hobbyprojekt då. Det stör mig. Och definitivt har vi folk som lyssnar som gör såhär. Jag tror jag har gjort så någon gång också. Jag känner mig lite smått träffad. Jag är träffad själv också någon gång, men det finns vissa som är väldigt så, alltså med större grejer. Att de inte förstår att det är stort och de insisterar på att du vet att de låter inte denna pull requesten vara i draft. Att såhär, för det är fine, gör det på kvällen, lägg upp en pull request och skapa en ticket. Lugna ner folk. Preppa dem lite. Jag vet att det är störigt, men gör det här lilla extra arbetet för folk så att du inte bara trycker in saker. Åtminstone det, ja. Någonting, ja, bara kommunikation typ. Ja, men ja, vad ville du säga? Nej(laughter), jag ska säga, tror du det är en bra idé att man har någon generell typ förbättringsticket? Alltså som man kan då koppla till och att man då, för de flesta verktyg kan du ju ändå skriva en kommentar till, alltså, kopplingen till din ticket från din PR. För då löser man ju lite det här att man måste gå in och du ska skapa en ticket och du ska... Alltså, det är ändå lite extra overhead som blir ganska mycket om du bara ska fixa något litet stavfel eller liknande. Eller blir det bara en liksom slasktratt? Nej, stavfel, absolut samma pull request. Alltså, som sagt, när det inte är farliga stavfel att man ändå råkar ta sönder något. Jag tycker att det ska vara refaktorering i PR'en, men jättegärna att det är en egen commit. Här har jag gjort arbetet och här har jag städat upp. Absolut. Vi pratar om man kunde ha en ticket som är generell, som du kopplar till. Som bara slasktrattar allting? Ja, men typ. Alltså såhär, det här är denna sprintens förbättringsticket. Hit kan du koppla liksom smågrejer. Jag vet inte själv om jag gillar det riktigt nämligen, men jag funderar på att det skulle kunna vara en lösning. Ja, men är det så smått? Alltså då tycker jag att det ska vara kopplat till... Alltså då kan det ändå vara på den, den originalticketen. Men absolut, är det någonting såhär, oh så råkade jag se en helt annan fil. Att det var någonting. Ja, jag vet inte. Å ena sidan blir det såhär, men gud vad bajsnödig man ska vara. Man kan inte ens fixa någonting litet utan att man ska skapa en ticket. Men å andra sidan är det inte så jobbigt att göra det. Bara såhär, klicka på plus och skriva en titel och vad man fixade typ. Det beror på hur mycket du ska skriva. Alltså vissa är ju superstrikt att du ska skriva given, when, then och typ as a developer. Nej, det är det man inte ska skriva as a developer. As a customer you want to bla, bla, bla, bla, bla. Refactor the system liksom. Det är det som är så... Det är ju bajsnödigt. Nej, det kan man inte göra. Nej, men jag vet inte. Vad vi har i vårat team och det har haft i andra team är att vi har en feature eller epic i Jira som heter typ technical improvements, depth, ideas. Och kommer du på någonting så kan du lägga in en task där. Ähm, ja, för framtida grejer. Eller så när du ser någonting nu, nu, nu, så har du en feature att lägga den under liksom. Så hade vi också mitt senaste team. Det här kunde vara verkligen högt och lågt. Ja, man måste rensa ut de här också har jag märkt. Ibland ligger det bara saker som ingen någonsin tar upp. Men jag tycker det är schysst att skriva en rad såhär, för det är för en själv. Man själv minns inte. Jag har skapat den här ticket för ett halvt år sedan och det finns bara en titel som är refactor bla, bla, bla service. Och så bara, men vad är det jag ville refaktorera i den? Varför? Och så är det ingen annan som kan... Ja, så är det ingen annan som kan plocka upp den. Nej, man ska inte önska sig hur mycket man glömmer. Har vi svarat Ketan ens? Frågan var ju, har ni råkat ut för det dilemmat? Ja, eller jag har absolut haft diskussioner. Jo, sen har jag alltså de senaste sju åren har jag jobbat i samma projekt och där var vi liksom, där hade vi turen att ha väldigt förstående PO. Men absolut att det ändå ibland dyker upp då man måste prioritera. -suterade mot något annat. Så att ja. Men en sista sak jag tänkte på kanske, för han nämnde också typ såhär uppdatera paket, till exempel. Mycket kan man ju faktiskt automatisera. Man kan ju ha typ såhär dependabot och sånt för att uppdatera paket. Då blir det inte lika mycket att du själv måste hitta tiden att trycka in det och så här. Nu kommer jag ihåg att jag läste någonstans i någon tråd när vi pratar om linters att Ketan sa att han hatade linters. Jag blev såhär chockad bara, hur kan man hata linters? (skratt) Det är ju ett bra sätt att kunna (skratt) undvika att man behöver göra sådana reflektoreringar. (skratt) Ja. Nej, men det är mycket som går att automatisera och är det en breaking change, ja men då får man ha... Jag vet att vissa team hos oss där de får in breaking changes. De har typ såhär en person som är ansvarig att ta hand om breaking change varje vecka- Mm. -så att alla vet att denna veckan är det Madeleine som kommer. Ja, jag har en breaking change duty. Ja, men faktiskt. Så det är ju rätt så- Det är schysst. Men jag tänker också i allt det här så får man ta in lite såhär, hur kritiskt är vårat system? Alltså har du många miljoner användare och att såhär går det ner på grund av ett stavfel så är det liksom du förlorar så extremt mycket på det. Då kanske man bör fundera. Ja, eller om det är en bank eller någonting liksom och sånt där det kan vara jättestora implikationer om någonting händer. Eller ja, andra ... (överlappande tal) Ja, och det kommer hända fel, men det kan ändå vara skönt om det sker ett fel på grund av något stavfel man gjorde. Äh, du hade ändå såhär att du hade en ticket, att du skrev varför du gjorde det alltså. Det kan nog kännas lite bättre ändå att du, att man gjorde så pass bara rätt att man bara kunde. Hellre det än att det kommer fram att man har smugit om någonting och så har det blivit fel. Då är det ju lite skämmigt. Alltså då står man ju där med ja... Ja. Typ att man såhär bypassade policies eller folk som är såhär, du vet, har en buddy som alltid godkänner- Ja. (skratt) -en gest. (skratt) Alltså så. Man står i skamvrån. Ja, men man får fundera på hur viktigt ens system är. Mm. Ja, hoppas det var en intressant diskussion i alla fall. Mm. Om inte annat så var ju dina nyheter intressanta. Absolut. Men ja, vi hörs nästa vecka. Det gör vi. Ha det bra allihopa! Hejdå!